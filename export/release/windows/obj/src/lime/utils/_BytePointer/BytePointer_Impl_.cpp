// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime_utils_ArrayBufferView
#include <lime/utils/ArrayBufferView.h>
#endif
#ifndef INCLUDED_lime_utils_BytePointerData
#include <lime/utils/BytePointerData.h>
#endif
#ifndef INCLUDED_lime_utils__BytePointer_BytePointer_Impl_
#include <lime/utils/_BytePointer/BytePointer_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_83619bfc0c6e35e8_18_set,"lime.utils._BytePointer.BytePointer_Impl_","set",0x582efc27,"lime.utils._BytePointer.BytePointer_Impl_.set","lime/utils/BytePointer.hx",18,0x50fae541)
namespace lime{
namespace utils{
namespace _BytePointer{

void BytePointer_Impl__obj::__construct() { }

Dynamic BytePointer_Impl__obj::__CreateEmpty() { return new BytePointer_Impl__obj; }

void *BytePointer_Impl__obj::_hx_vtable = 0;

Dynamic BytePointer_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< BytePointer_Impl__obj > _hx_result = new BytePointer_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool BytePointer_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x606deae3;
}

void BytePointer_Impl__obj::set( ::lime::utils::BytePointerData this1, ::haxe::io::Bytes bytes, ::lime::utils::ArrayBufferView bufferView, ::haxe::io::Bytes buffer, ::Dynamic offset){
            	HX_STACKFRAME(&_hx_pos_83619bfc0c6e35e8_18_set)
HXLINE(  19)		if (::hx::IsNotNull( buffer )) {
HXLINE(  24)			bytes = buffer;
            		}
HXLINE(  28)		bool _hx_tmp;
HXDLIN(  28)		if (::hx::IsNull( bytes )) {
HXLINE(  28)			_hx_tmp = ::hx::IsNull( bufferView );
            		}
            		else {
HXLINE(  28)			_hx_tmp = true;
            		}
HXDLIN(  28)		if (_hx_tmp) {
HXLINE(  30)			this1->bytes = bytes;
HXLINE(  31)			int _hx_tmp;
HXDLIN(  31)			if (::hx::IsNotNull( offset )) {
HXLINE(  31)				_hx_tmp = ( (int)(offset) );
            			}
            			else {
HXLINE(  31)				_hx_tmp = 0;
            			}
HXDLIN(  31)			this1->offset = _hx_tmp;
            		}
            		else {
HXLINE(  38)			this1->bytes = bufferView->buffer;
HXLINE(  41)			int _hx_tmp;
HXDLIN(  41)			if (::hx::IsNotNull( offset )) {
HXLINE(  41)				_hx_tmp = (bufferView->byteOffset + offset);
            			}
            			else {
HXLINE(  41)				_hx_tmp = bufferView->byteOffset;
            			}
HXDLIN(  41)			this1->offset = _hx_tmp;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(BytePointer_Impl__obj,set,(void))


BytePointer_Impl__obj::BytePointer_Impl__obj()
{
}

bool BytePointer_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { outValue = set_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *BytePointer_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *BytePointer_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class BytePointer_Impl__obj::__mClass;

static ::String BytePointer_Impl__obj_sStaticFields[] = {
	HX_("set",a2,9b,57,00),
	::String(null())
};

void BytePointer_Impl__obj::__register()
{
	BytePointer_Impl__obj _hx_dummy;
	BytePointer_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("lime.utils._BytePointer.BytePointer_Impl_",73,da,65,91);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &BytePointer_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(BytePointer_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< BytePointer_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = BytePointer_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = BytePointer_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace lime
} // end namespace utils
} // end namespace _BytePointer
