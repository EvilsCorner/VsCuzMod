// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_cc9afe4755847ade
#define INCLUDED_cc9afe4755847ade
#include "linc_lua.h"
#endif
#ifndef INCLUDED_Ana
#include <Ana.h>
#endif
#ifndef INCLUDED_Analysis
#include <Analysis.h>
#endif
#ifndef INCLUDED_BackgroundDancer
#include <BackgroundDancer.h>
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Date
#include <Date.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EtternaFunctions
#include <EtternaFunctions.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_GameOverSubstate
#include <GameOverSubstate.h>
#endif
#ifndef INCLUDED_GitarooPause
#include <GitarooPause.h>
#endif
#ifndef INCLUDED_GlobalVideo
#include <GlobalVideo.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_KeyBinds
#include <KeyBinds.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_LuaCamera
#include <LuaCamera.h>
#endif
#ifndef INCLUDED_LuaCharacter
#include <LuaCharacter.h>
#endif
#ifndef INCLUDED_LuaClass
#include <LuaClass.h>
#endif
#ifndef INCLUDED_LuaNote
#include <LuaNote.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_ModchartState
#include <ModchartState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_NGio
#include <NGio.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PauseSubState
#include <PauseSubState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayStateChangeables
#include <PlayStateChangeables.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Ratings
#include <Ratings.h>
#endif
#ifndef INCLUDED_Replay
#include <Replay.h>
#endif
#ifndef INCLUDED_ResultsScreen
#include <ResultsScreen.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Stage
#include <Stage.h>
#endif
#ifndef INCLUDED_StaticArrow
#include <StaticArrow.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_WebmHandler
#include <WebmHandler.h>
#endif
#ifndef INCLUDED_WiggleEffect
#include <WiggleEffect.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_FlxTrail
#include <flixel/addons/effects/FlxTrail.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_CameraFrontEnd
#include <flixel/system/frontEnds/CameraFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSort
#include <flixel/util/FlxSort.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Path
#include <haxe/io/Path.h>
#endif
#ifndef INCLUDED_haxe_iterators_MapKeyValueIterator
#include <haxe/iterators/MapKeyValueIterator.h>
#endif
#ifndef INCLUDED_io_newgrounds_NG
#include <io/newgrounds/NG.h>
#endif
#ifndef INCLUDED_io_newgrounds_NGLite
#include <io/newgrounds/NGLite.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Medal
#include <io/newgrounds/objects/Medal.h>
#endif
#ifndef INCLUDED_io_newgrounds_objects_Object
#include <io/newgrounds/objects/Object.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app__Event_Void_Void
#include <lime/app/_Event_Void_Void.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_display_Stage
#include <openfl/display/Stage.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_KeyboardEvent
#include <openfl/events/KeyboardEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_webm_WebmPlayer
#include <webm/WebmPlayer.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_87_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",87,0xb30d7781)
static const bool _hx_array_data_46c2835d_1[] = {
	0,0,0,0,
};
static const ::String _hx_array_data_46c2835d_2[] = {
	HX_("purple",3c,f6,89,71),HX_("blue",9a,42,19,41),HX_("green",c3,0e,ed,99),HX_("red",51,d9,56,00),HX_("stab",c2,e3,5b,4c),HX_("scream",ef,37,5d,47),
};
static const ::String _hx_array_data_46c2835d_3[] = {
	HX_("LEFT",07,d0,70,32),HX_("DOWN",62,c0,2e,2d),HX_("UP",5b,4a,00,00),HX_("RIGHT",bc,43,52,67),HX_("STAB",c2,ab,1c,37),HX_("SCREECH",c7,8d,0a,aa),
};
static const ::String _hx_array_data_46c2835d_4[] = {
	HX_("dad:blah blah blah",24,b6,5d,84),HX_("bf:coolswag",c9,19,15,c1),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_286_addObject,"PlayState","addObject",0x09b6776f,"PlayState.addObject","PlayState.hx",286,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_291_removeObject,"PlayState","removeObject",0x9fa28dd4,"PlayState.removeObject","PlayState.hx",291,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_295_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",295,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1059_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1059,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1052_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1052,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1043_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1043,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1075_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1075,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1082_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",1082,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1095_cuzIntros,"PlayState","cuzIntros",0x981be7de,"PlayState.cuzIntros","PlayState.hx",1095,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1122_cuzIntros,"PlayState","cuzIntros",0x981be7de,"PlayState.cuzIntros","PlayState.hx",1122,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1116_cuzIntros,"PlayState","cuzIntros",0x981be7de,"PlayState.cuzIntros","PlayState.hx",1116,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1180_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1180,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1198_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1198,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1213_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1213,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1208_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1208,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1218_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1218,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1152_schoolIntro,"PlayState","schoolIntro",0x509eaac7,"PlayState.schoolIntro","PlayState.hx",1152,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1262_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1262,0xb30d7781)
static const ::String _hx_array_data_46c2835d_38[] = {
	HX_("ready",63,a0,ba,e6),HX_("set",a2,9b,57,00),HX_("go",28,5a,00,00),
};
static const ::String _hx_array_data_46c2835d_39[] = {
	HX_("weeb/pixelUI/ready-pixel",03,3e,00,82),HX_("weeb/pixelUI/set-pixel",c2,0a,78,ea),HX_("weeb/pixelUI/date-pixel",a0,c3,29,fb),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1302_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1302,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1319_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1319,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1338_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1338,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1245_startCountdown,"PlayState","startCountdown",0xf32ea1e0,"PlayState.startCountdown","PlayState.hx",1245,0xb30d7781)
static const int _hx_array_data_46c2835d_44[] = {
	(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1354_getKey,"PlayState","getKey",0xa9336b9a,"PlayState.getKey","PlayState.hx",1354,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1366_releaseInput,"PlayState","releaseInput",0xa075d074,"PlayState.releaseInput","PlayState.hx",1366,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1464_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1464,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1468_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1468,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1407_handleInput,"PlayState","handleInput",0x79b5bcb1,"PlayState.handleInput","PlayState.hx",1407,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1538_startSong,"PlayState","startSong",0x419e6106,"PlayState.startSong","PlayState.hx",1538,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1629_generateSong,"PlayState","generateSong",0x3a61615b,"PlayState.generateSong","PlayState.hx",1629,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1886_sortByShit,"PlayState","sortByShit",0xfa9f74a6,"PlayState.sortByShit","PlayState.hx",1886,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1891_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1891,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1988_generateStaticArrows,"PlayState","generateStaticArrows",0x65da515e,"PlayState.generateStaticArrows","PlayState.hx",1988,0xb30d7781)
static const int _hx_array_data_46c2835d_73[] = {
	(int)6,
};
static const int _hx_array_data_46c2835d_74[] = {
	(int)7,
};
static const int _hx_array_data_46c2835d_75[] = {
	(int)5,
};
static const int _hx_array_data_46c2835d_76[] = {
	(int)4,
};
static const int _hx_array_data_46c2835d_77[] = {
	(int)12,(int)16,
};
static const int _hx_array_data_46c2835d_78[] = {
	(int)13,(int)17,
};
static const int _hx_array_data_46c2835d_79[] = {
	(int)14,(int)18,
};
static const int _hx_array_data_46c2835d_80[] = {
	(int)15,(int)19,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1999_appearStaticArrows,"PlayState","appearStaticArrows",0x766c1a7e,"PlayState.appearStaticArrows","PlayState.hx",1999,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1997_appearStaticArrows,"PlayState","appearStaticArrows",0x766c1a7e,"PlayState.appearStaticArrows","PlayState.hx",1997,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2006_tweenCamIn,"PlayState","tweenCamIn",0x8478acda,"PlayState.tweenCamIn","PlayState.hx",2006,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2010_openSubState,"PlayState","openSubState",0x527dda0c,"PlayState.openSubState","PlayState.hx",2010,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2041_closeSubState,"PlayState","closeSubState",0xb7c1df78,"PlayState.closeSubState","PlayState.hx",2041,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2083_resyncVocals,"PlayState","resyncVocals",0x86228a3d,"PlayState.resyncVocals","PlayState.hx",2083,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2137_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2137,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2978_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",2978,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3115_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3115,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3151_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3151,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3348_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3348,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3358_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3358,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3386_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",3386,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3395_getSectionByTime,"PlayState","getSectionByTime",0x77354304,"PlayState.getSectionByTime","PlayState.hx",3395,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3418_recalculateAllSectionTimes,"PlayState","recalculateAllSectionTimes",0x34e3dfc0,"PlayState.recalculateAllSectionTimes","PlayState.hx",3418,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3441_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3441,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3535_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3535,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3615_endSong,"PlayState","endSong",0x78be073f,"PlayState.endSong","PlayState.hx",3615,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3633_getRatesScore,"PlayState","getRatesScore",0xf8894024,"PlayState.getRatesScore","PlayState.hx",3633,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3658_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3658,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3936_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3936,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3945_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3945,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3900_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3900,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3906_popUpScore,"PlayState","popUpScore",0xcc0b16d7,"PlayState.popUpScore","PlayState.hx",3906,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3964_NearlyEquals,"PlayState","NearlyEquals",0x84760165,"PlayState.NearlyEquals","PlayState.hx",3964,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_3975_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",3975,0xb30d7781)
static const ::String _hx_array_data_46c2835d_138[] = {
	HX_("left",07,08,b0,47),HX_("down",62,f8,6d,42),HX_("up",5b,66,00,00),HX_("right",dc,0b,64,e9),
};
static const bool _hx_array_data_46c2835d_139[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_140[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_141[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4018_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4018,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4039_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4039,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4077_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4077,0xb30d7781)
static const bool _hx_array_data_46c2835d_145[] = {
	0,0,0,0,
};
static const bool _hx_array_data_46c2835d_146[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4130_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4130,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4150_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4150,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4173_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4173,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4199_keyShit,"PlayState","keyShit",0xf06d6aee,"PlayState.keyShit","PlayState.hx",4199,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4209_findByTime,"PlayState","findByTime",0xc7b7b00e,"PlayState.findByTime","PlayState.hx",4209,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4220_findByTimeIndex,"PlayState","findByTimeIndex",0x9aab6824,"PlayState.findByTimeIndex","PlayState.hx",4220,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4240_focusOut,"PlayState","focusOut",0xc021f6c7,"PlayState.focusOut","PlayState.hx",4240,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4257_focusIn,"PlayState","focusIn",0x8bc46fcc,"PlayState.focusIn","PlayState.hx",4257,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4262_backgroundVideo,"PlayState","backgroundVideo",0x865a229c,"PlayState.backgroundVideo","PlayState.hx",4262,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4321_noteMiss,"PlayState","noteMiss",0x0652ff3f,"PlayState.noteMiss","PlayState.hx",4321,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4432_updateAccuracy,"PlayState","updateAccuracy",0x9f2d7b53,"PlayState.updateAccuracy","PlayState.hx",4432,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4446_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4446,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4449_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4449,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4441_getKeyPresses,"PlayState","getKeyPresses",0xb8709637,"PlayState.getKeyPresses","PlayState.hx",4441,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4463_noteCheck,"PlayState","noteCheck",0xbf96a725,"PlayState.noteCheck","PlayState.hx",4463,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4509_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4509,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4589_goodNoteHit,"PlayState","goodNoteHit",0x2c129b33,"PlayState.goodNoteHit","PlayState.hx",4589,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4610_pressArrow,"PlayState","pressArrow",0x8f0070b7,"PlayState.pressArrow","PlayState.hx",4610,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4627_resetFastCar,"PlayState","resetFastCar",0x6b33ac7a,"PlayState.resetFastCar","PlayState.hx",4627,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4638_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",4638,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4647_fastCarDrive,"PlayState","fastCarDrive",0xda080ac3,"PlayState.fastCarDrive","PlayState.hx",4647,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4661_trainStart,"PlayState","trainStart",0x6a3d10eb,"PlayState.trainStart","PlayState.hx",4661,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4673_updateTrainPos,"PlayState","updateTrainPos",0x957683c6,"PlayState.updateTrainPos","PlayState.hx",4673,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4703_trainReset,"PlayState","trainReset",0xccf9e658,"PlayState.trainReset","PlayState.hx",4703,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4717_lightningStrikeShit,"PlayState","lightningStrikeShit",0xdc0ca52b,"PlayState.lightningStrikeShit","PlayState.hx",4717,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4731_stepHit,"PlayState","stepHit",0xcb82d856,"PlayState.stepHit","PlayState.hx",4731,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4780_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4780,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4785_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4785,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4961_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4961,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4911_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4911,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_4928_beatHit,"PlayState","beatHit",0xbe46146c,"PlayState.beatHit","PlayState.hx",4928,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_5050_poggers,"PlayState","poggers",0x6fe9ecd6,"PlayState.poggers","PlayState.hx",5050,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_89_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",89,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_92_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",92,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_93_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",93,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_94_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",94,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_95_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",95,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_96_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",96,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_97_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",97,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_98_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",98,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_99_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",99,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_100_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",100,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_101_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",101,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_112_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",112,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_113_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",113,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_115_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",115,0xb30d7781)
static const bool _hx_array_data_46c2835d_214[] = {
	0,0,0,0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_130_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",130,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_155_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",155,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_156_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",156,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_157_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",157,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_168_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",168,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_169_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",169,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_170_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",170,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_171_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",171,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_172_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",172,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_173_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",173,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_199_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",199,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_228_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",228,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_230_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",230,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_232_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",232,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_242_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",242,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_243_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",243,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_245_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",245,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_246_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",246,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_249_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",249,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_250_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",250,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_259_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",259,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_268_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",268,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_280_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",280,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1241_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1241,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_1534_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",1534,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_2122_boot,"PlayState","boot",0xa6fd5ee3,"PlayState.boot","PlayState.hx",2122,0xb30d7781)

void PlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_87_new)
HXLINE(5166)		this->curLight = 0;
HXLINE(4777)		this->lightningOffset = 8;
HXLINE(4776)		this->lightningStrikeBeat = 0;
HXLINE(4728)		this->danced = false;
HXLINE(4669)		this->startedMoving = false;
HXLINE(4657)		this->trainCooldown = 0;
HXLINE(4656)		this->trainFinishing = false;
HXLINE(4655)		this->trainCars = 8;
HXLINE(4653)		this->trainFrameTiming = ((Float)0);
HXLINE(4652)		this->trainMoving = false;
HXLINE(4623)		this->fastCarCanDrive = true;
HXLINE(4460)		this->etternaModeScore = 0;
HXLINE(4458)		this->mashViolations = 0;
HXLINE(4457)		this->mashing = 0;
HXLINE(4235)		this->playingDathing = false;
HXLINE(4231)		this->useVideo = false;
HXLINE(4230)		this->fuckingVolume = ((Float)1);
HXLINE(3970)		this->leftHold = false;
HXLINE(3969)		this->rightHold = false;
HXLINE(3968)		this->downHold = false;
HXLINE(3967)		this->upHold = false;
HXLINE(3655)		this->currentTimingShown = null();
HXLINE(3654)		this->timeShown = 0;
HXLINE(3630)		this->offsetTest = ((Float)0);
HXLINE(3629)		this->hits = ::Array_obj< Float >::__new(0);
HXLINE(3627)		this->endingSong = false;
HXLINE(2134)		this->currentLuaIndex = 0;
HXLINE(2131)		this->pastScrollChanges = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2129)		this->updateFrame = 0;
HXLINE(2127)		this->currentBPM = 0;
HXLINE(2125)		this->removedVideo = false;
HXLINE(2124)		this->stopUpdate = false;
HXLINE(2120)		this->maxNPS = 0;
HXLINE(2119)		this->nps = 0;
HXLINE(2118)		this->canPause = true;
HXLINE(2117)		this->startedCountdown = false;
HXLINE(2116)		this->paused = false;
HXLINE(1626)		this->debugNum = 0;
HXLINE(1535)		this->previousRate = ::PlayState_obj::songMultiplier;
HXLINE(1531)		this->doAnything = false;
HXLINE(1529)		this->songStarted = false;
HXLINE(1403)		this->closestNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1363)		this->keys = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_1,4);
HXLINE(1351)		this->songTime = ((Float)0);
HXLINE(1350)		this->lastReportedPlayheadPosition = 0;
HXLINE(1349)		this->previousFrameTime = 0;
HXLINE(1238)		this->luaWiggles = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1237)		this->perfectMode = false;
HXLINE( 278)		this->missedStab = false;
HXLINE( 277)		this->stabcounter = 1;
HXLINE( 274)		this->dataColor = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_2,6);
HXLINE( 273)		this->dataSuffix = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_3,6);
HXLINE( 270)		this->executeModchart = false;
HXLINE( 266)		this->replayAna =  ::Analysis_obj::__alloc( HX_CTX );
HXLINE( 265)		this->saveJudge = ::Array_obj< ::String >::__new(0);
HXLINE( 264)		this->saveNotes = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 256)		this->allowedToHeadbang = false;
HXLINE( 253)		this->triggeredAlready = false;
HXLINE( 238)		this->randomVar = false;
HXLINE( 236)		this->usedTimeTravel = false;
HXLINE( 235)		this->inCutscene = false;
HXLINE( 224)		this->songScoreDef = 0;
HXLINE( 222)		this->songScore = 0;
HXLINE( 220)		this->talking = true;
HXLINE( 218)		this->wiggleShit =  ::WiggleEffect_obj::__alloc( HX_CTX );
HXLINE( 216)		this->fc = true;
HXLINE( 208)		this->dialogue = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_4,2);
HXLINE( 206)		this->idleBeat = 2;
HXLINE( 205)		this->idleToBeat = false;
HXLINE( 204)		this->currentFrames = 0;
HXLINE( 203)		this->notesHitArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 201)		this->isSMFile = false;
HXLINE( 197)		this->cannotDie = false;
HXLINE( 188)		this->startingSong = false;
HXLINE( 187)		this->generatedMusic = false;
HXLINE( 185)		this->songPositionBar = ((Float)0);
HXLINE( 181)		this->ss = false;
HXLINE( 180)		this->totalPlayed = 0;
HXLINE( 179)		this->totalNotesHitDefault = ((Float)0);
HXLINE( 178)		this->totalNotesHit = ((Float)0);
HXLINE( 177)		this->accuracyDefault = ((Float)0.00);
HXLINE( 175)		this->accuracy = ((Float)0.00);
HXLINE( 166)		this->combo = 0;
HXLINE( 164)		this->health = ((Float)1);
HXLINE( 162)		this->gfSpeed = 1;
HXLINE( 160)		this->curSong = HX_("",00,00,00,00);
HXLINE( 159)		this->camZooming = false;
HXLINE( 149)		this->curSection = 0;
HXLINE( 145)		this->unspawnNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 125)		this->detailsPausedText = HX_("",00,00,00,00);
HXLINE( 124)		this->detailsText = HX_("",00,00,00,00);
HXLINE( 123)		this->iconRPC = HX_("",00,00,00,00);
HXLINE( 122)		this->storyDifficultyText = HX_("",00,00,00,00);
HXLINE( 117)		this->songLength = ((Float)0);
HXLINE( 107)		this->visibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 105)		this->visibleCombos = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  87)		super::__construct(TransIn,TransOut);
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PlayState_obj::addObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_286_addObject)
HXDLIN( 286)		this->add(object);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,addObject,(void))

void PlayState_obj::removeObject( ::flixel::FlxBasic object){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_291_removeObject)
HXDLIN( 291)		this->remove(object,null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,removeObject,(void))

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_295_create)
HXLINE( 294)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 296)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 297)		::PlayState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 299)		this->previousRate = (::PlayState_obj::songMultiplier - ((Float)0.05));
HXLINE( 301)		if ((this->previousRate < ((Float)1.00))) {
HXLINE( 302)			this->previousRate = ( (Float)(1) );
            		}
HXLINE( 304)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE( 305)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(800) ));
            		}
HXLINE( 307)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 308)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 308)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE( 310)		::PlayState_obj::sicks = 0;
HXLINE( 311)		::PlayState_obj::bads = 0;
HXLINE( 312)		::PlayState_obj::shits = 0;
HXLINE( 313)		::PlayState_obj::goods = 0;
HXLINE( 315)		::PlayState_obj::misses = 0;
HXLINE( 317)		::PlayState_obj::highestCombo = 0;
HXLINE( 318)		::PlayState_obj::repPresses = 0;
HXLINE( 319)		::PlayState_obj::repReleases = 0;
HXLINE( 320)		::PlayState_obj::inResults = false;
HXLINE( 322)		::PlayStateChangeables_obj::useDownscroll = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("downscroll",ef,45,d4,4f),::hx::paccDynamic)) );
HXLINE( 323)		::PlayStateChangeables_obj::safeFrames = ( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("frames",a6,af,85,ac),::hx::paccDynamic)) );
HXLINE( 324)		::PlayStateChangeables_obj::scrollSpeed = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("scrollSpeed",3a,e0,46,cb),::hx::paccDynamic)) );
HXLINE( 325)		::PlayStateChangeables_obj::botPlay = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("botplay",7b,fb,a9,61),::hx::paccDynamic)) );
HXLINE( 326)		::PlayStateChangeables_obj::Optimize = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("optimize",dd,8c,18,1d),::hx::paccDynamic)) );
HXLINE( 327)		::PlayStateChangeables_obj::zoom = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXLINE( 330)		::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE( 331)		::String _hx_switch_0 = songLowercase;
            		if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 334)			songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 334)			goto _hx_goto_7;
            		}
            		if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 336)			songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN( 336)			goto _hx_goto_7;
            		}
            		_hx_goto_7:;
HXLINE( 339)		this->removedVideo = false;
HXLINE( 342)		::String library = null();
HXDLIN( 342)		this->executeModchart = ::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("data/",c5,0e,88,d4) + (songLowercase + HX_("/modchart",0b,0e,ff,5d))) + HX_(".lua",4a,2a,ba,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 343)		if (::PlayState_obj::isSM) {
HXLINE( 344)			this->executeModchart = ::sys::FileSystem_obj::exists((::PlayState_obj::pathToSm + HX_("/modchart.lua",d5,99,c0,d9)));
            		}
HXLINE( 345)		if (this->executeModchart) {
HXLINE( 346)			::PlayStateChangeables_obj::Optimize = false;
            		}
HXLINE( 355)		if (this->executeModchart) {
HXLINE( 356)			::PlayState_obj::songMultiplier = ( (Float)(1) );
            		}
HXLINE( 360)		this->storyDifficultyText = ::CoolUtil_obj::difficultyFromInt(::PlayState_obj::storyDifficulty);
HXLINE( 362)		this->iconRPC = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
HXLINE( 365)		::String _hx_switch_1 = this->iconRPC;
            		if (  (_hx_switch_1==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE( 372)			this->iconRPC = HX_("mom",cb,16,53,00);
HXDLIN( 372)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 370)			this->iconRPC = HX_("monster",1a,54,b0,b8);
HXDLIN( 370)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 368)			this->iconRPC = HX_("senpai",3c,df,8d,6b);
HXDLIN( 368)			goto _hx_goto_8;
            		}
            		_hx_goto_8:;
HXLINE( 376)		if (::PlayState_obj::isStoryMode) {
HXLINE( 378)			this->detailsText = (HX_("Story Mode: Week ",38,e3,aa,dd) + ::PlayState_obj::storyWeek);
            		}
            		else {
HXLINE( 382)			this->detailsText = HX_("Freeplay",c0,4c,38,fc);
            		}
HXLINE( 386)		this->detailsPausedText = (HX_("Paused - ",65,2f,92,fd) + this->detailsText);
HXLINE( 389)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN( 389)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE( 396)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE( 389)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE( 405)		this->camGame =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 406)		this->camHUD =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 407)		{
HXLINE( 407)			 ::flixel::FlxCamera _hx_tmp3 = this->camHUD;
HXDLIN( 407)			_hx_tmp3->bgColor = (_hx_tmp3->bgColor & 16777215);
HXDLIN( 407)			 ::flixel::FlxCamera _hx_tmp4 = this->camHUD;
HXDLIN( 407)			_hx_tmp4->bgColor = (_hx_tmp4->bgColor | 0);
            		}
HXLINE( 408)		this->camSustains =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 409)		{
HXLINE( 409)			 ::flixel::FlxCamera _hx_tmp5 = this->camSustains;
HXDLIN( 409)			_hx_tmp5->bgColor = (_hx_tmp5->bgColor & 16777215);
HXDLIN( 409)			 ::flixel::FlxCamera _hx_tmp6 = this->camSustains;
HXDLIN( 409)			_hx_tmp6->bgColor = (_hx_tmp6->bgColor | 0);
            		}
HXLINE( 410)		this->camNotes =  ::flixel::FlxCamera_obj::__alloc( HX_CTX ,null(),null(),null(),null(),null());
HXLINE( 411)		{
HXLINE( 411)			 ::flixel::FlxCamera _hx_tmp7 = this->camNotes;
HXDLIN( 411)			_hx_tmp7->bgColor = (_hx_tmp7->bgColor & 16777215);
HXDLIN( 411)			 ::flixel::FlxCamera _hx_tmp8 = this->camNotes;
HXDLIN( 411)			_hx_tmp8->bgColor = (_hx_tmp8->bgColor | 0);
            		}
HXLINE( 413)		::flixel::FlxG_obj::cameras->reset(this->camGame);
HXLINE( 414)		::flixel::FlxG_obj::cameras->add(this->camHUD,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 415)		::flixel::FlxG_obj::cameras->add(this->camSustains,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 416)		::flixel::FlxG_obj::cameras->add(this->camNotes,null()).StaticCast<  ::flixel::FlxCamera >();
HXLINE( 418)		this->camHUD->set_zoom(::PlayStateChangeables_obj::zoom);
HXLINE( 420)		::flixel::FlxCamera_obj::_defaultCameras = ::Array_obj< ::Dynamic>::__new(1)->init(0,this->camGame);
HXLINE( 422)		this->persistentUpdate = true;
HXLINE( 423)		this->persistentDraw = true;
HXLINE( 425)		if (::hx::IsNull( ::PlayState_obj::SONG )) {
HXLINE( 426)			::PlayState_obj::SONG = ::Song_obj::loadFromJson(HX_("tutorial",9e,8f,b5,82),HX_("tutorial",9e,8f,b5,82));
            		}
HXLINE( 428)		::Conductor_obj::mapBPMChanges(::PlayState_obj::SONG);
HXLINE( 429)		::Conductor_obj::changeBPM(( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 431)		::Conductor_obj::bpm = ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 433)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 435)			::PlayState_obj::SONG->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 438)		::TimingStruct_obj::clearTimings();
HXLINE( 440)		int currentIndex = 0;
HXLINE( 441)		{
HXLINE( 441)			int _g = 0;
HXDLIN( 441)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 441)			while((_g < _g1->length)){
HXLINE( 441)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 441)				_g = (_g + 1);
HXLINE( 443)				if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 445)					Float beat = i->position;
HXLINE( 447)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 449)					Float bpm = i->value;
HXLINE( 451)					::TimingStruct_obj::addTiming(beat,bpm,endBeat,( (Float)(0) ));
HXLINE( 453)					if ((currentIndex != 0)) {
HXLINE( 455)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 456)						data->endBeat = beat;
HXLINE( 457)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 458)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE( 461)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 466)		this->recalculateAllSectionTimes();
HXLINE( 475)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE( 476)			::String library = null();
HXDLIN( 476)			this->dialogue = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath(((HX_("",00,00,00,00) + ((HX_("data/",c5,0e,88,d4) + songLowercase) + HX_("/dialogue",47,74,e6,61))) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE( 481)				{
HXLINE( 481)					 ::flixel::_hx_system::frontEnds::LogFrontEnd _this = ::flixel::FlxG_obj::log;
HXDLIN( 481)					 ::Dynamic Data = e->get_message();
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE( 492)		::String stageCheck = HX_("stage",be,6a,0b,84);
HXLINE( 494)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic) )) {
HXLINE( 496)			switch((int)(::PlayState_obj::storyWeek)){
            				case (int)2: {
HXLINE( 499)					stageCheck = HX_("halloween",8d,bb,38,50);
            				}
            				break;
            				case (int)3: {
HXLINE( 501)					stageCheck = HX_("philly",28,77,5e,ef);
            				}
            				break;
            				case (int)4: {
HXLINE( 503)					stageCheck = HX_("limo",1f,17,b3,47);
            				}
            				break;
            				case (int)5: {
HXLINE( 505)					if ((songLowercase == HX_("winter-horrorland",9d,39,f4,1e))) {
HXLINE( 507)						stageCheck = HX_("mallEvil",88,d3,e3,a7);
            					}
            					else {
HXLINE( 511)						stageCheck = HX_("mall",d4,3a,56,48);
            					}
            				}
            				break;
            				case (int)6: {
HXLINE( 514)					if ((songLowercase == HX_("thorns",9c,bf,c7,8c))) {
HXLINE( 516)						stageCheck = HX_("schoolEvil",28,a1,f5,f7);
            					}
            					else {
HXLINE( 520)						stageCheck = HX_("school",74,b8,c8,40);
            					}
            				}
            				break;
            				case (int)7: {
HXLINE( 523)					stageCheck = HX_("downtown",b4,33,10,97);
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 528)			stageCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) );
            		}
HXLINE( 531)		if (::PlayState_obj::isStoryMode) {
HXLINE( 532)			::PlayState_obj::songMultiplier = ( (Float)(1) );
            		}
HXLINE( 535)		::String gfCheck = HX_("gf",1f,5a,00,00);
HXLINE( 537)		if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic) )) {
HXLINE( 539)			switch((int)(::PlayState_obj::storyWeek)){
            				case (int)4: {
HXLINE( 542)					gfCheck = HX_("gf-car",a6,63,ab,07);
            				}
            				break;
            				case (int)5: {
HXLINE( 544)					gfCheck = HX_("gf-christmas",94,26,b1,6d);
            				}
            				break;
            				case (int)6: {
HXLINE( 546)					gfCheck = HX_("gf-pixel",98,3e,8c,55);
            				}
            				break;
            				case (int)7: {
HXLINE( 548)					gfCheck = HX_("gf-bf",72,fe,d3,91);
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 553)			gfCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) );
            		}
HXLINE( 556)		::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(400) ),( (Float)(130) ),gfCheck,null());
HXLINE( 558)		if (::hx::IsNull( ::PlayState_obj::gf->frames )) {
HXLINE( 563)			::PlayState_obj::gf =  ::Character_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),HX_("gf",1f,5a,00,00),null());
            		}
HXLINE( 566)		::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE( 568)		if (::hx::IsNull( ::PlayState_obj::boyfriend->frames )) {
HXLINE( 573)			::PlayState_obj::boyfriend =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(450) ),HX_("bf",c4,55,00,00));
            		}
HXLINE( 576)		::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 578)		if (::hx::IsNull( ::PlayState_obj::dad->frames )) {
HXLINE( 583)			::PlayState_obj::dad =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(100) ),HX_("dad",47,36,4c,00),null());
            		}
HXLINE( 586)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 588)			::PlayState_obj::Stage =  ::Stage_obj::__alloc( HX_CTX ,( (::String)(::PlayState_obj::SONG->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE( 589)			{
HXLINE( 589)				int _g = 0;
HXDLIN( 589)				::cpp::VirtualArray _g1 = ::PlayState_obj::Stage->toAdd;
HXDLIN( 589)				while((_g < _g1->get_length())){
HXLINE( 589)					 ::Dynamic i = _g1->__get(_g);
HXDLIN( 589)					_g = (_g + 1);
HXLINE( 591)					this->add(i);
            				}
            			}
HXLINE( 593)			{
HXLINE( 593)				int _g5_current = 0;
HXDLIN( 593)				::Array< ::Dynamic> _g5_array = ::PlayState_obj::Stage->layInFront;
HXDLIN( 593)				while((_g5_current < _g5_array->length)){
HXLINE( 593)					::Array< ::Dynamic> _g6_value = _g5_array->__get(_g5_current).StaticCast< ::Array< ::Dynamic> >();
HXDLIN( 593)					_g5_current = (_g5_current + 1);
HXDLIN( 593)					int _g6_key = (_g5_current - 1);
HXDLIN( 593)					int index = _g6_key;
HXDLIN( 593)					::Array< ::Dynamic> array = _g6_value;
HXLINE( 595)					switch((int)(index)){
            						case (int)0: {
HXLINE( 598)							this->add(::PlayState_obj::gf);
HXLINE( 600)							if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Imminence",59,26,98,ca) )) {
HXLINE( 602)								::PlayState_obj::gf2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(613) ),( (Float)(35) ),HX_("gf-bushes-gleam",83,6a,a8,bc),null());
HXLINE( 603)								this->add(::PlayState_obj::gf2);
HXLINE( 604)								::PlayState_obj::gf2->set_visible(false);
            							}
HXLINE( 606)							::PlayState_obj::gf->scrollFactor->set(((Float)0.95),((Float)0.95));
HXLINE( 607)							{
HXLINE( 607)								int _g = 0;
HXDLIN( 607)								while((_g < array->length)){
HXLINE( 607)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 607)									_g = (_g + 1);
HXLINE( 608)									this->add(bg);
            								}
            							}
            						}
            						break;
            						case (int)1: {
HXLINE( 610)							this->add(::PlayState_obj::dad);
HXLINE( 611)							{
HXLINE( 611)								int _g = 0;
HXDLIN( 611)								while((_g < array->length)){
HXLINE( 611)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 611)									_g = (_g + 1);
HXLINE( 612)									this->add(bg);
            								}
            							}
            						}
            						break;
            						case (int)2: {
HXLINE( 614)							this->add(::PlayState_obj::boyfriend);
HXLINE( 615)							{
HXLINE( 615)								int _g = 0;
HXDLIN( 615)								while((_g < array->length)){
HXLINE( 615)									 ::flixel::FlxSprite bg = array->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN( 615)									_g = (_g + 1);
HXLINE( 616)									this->add(bg);
            								}
            							}
            						}
            						break;
            					}
            				}
            			}
            		}
            		else {
HXLINE( 622)			::PlayState_obj::Stage =  ::Stage_obj::__alloc( HX_CTX ,HX_("stage",be,6a,0b,84));
            		}
HXLINE( 625)		Float camPos = ::PlayState_obj::dad->getGraphicMidpoint(null())->x;
HXDLIN( 625)		 ::flixel::math::FlxPoint camPos1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,camPos,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 627)		::String _hx_switch_2 = ::PlayState_obj::dad->curCharacter;
            		if (  (_hx_switch_2==HX_("cuz",88,85,4b,00)) ||  (_hx_switch_2==HX_("cuz2",aa,51,c9,41)) ){
HXLINE( 678)			int offSet = 53;
HXLINE( 679)			{
HXLINE( 679)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 679)				_g->set_x((_g->x + (offSet + 40)));
            			}
HXLINE( 680)			{
HXLINE( 680)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 680)				_g1->set_y((_g1->y + -35));
            			}
HXLINE( 681)			{
HXLINE( 681)				 ::Boyfriend _g2 = ::PlayState_obj::boyfriend;
HXDLIN( 681)				_g2->set_x((_g2->x + (offSet + 550)));
            			}
HXLINE( 682)			{
HXLINE( 682)				 ::Boyfriend _g3 = ::PlayState_obj::boyfriend;
HXDLIN( 682)				_g3->set_y((_g3->y + 50));
            			}
HXLINE( 683)			{
HXLINE( 683)				 ::Character _g4 = ::PlayState_obj::gf;
HXDLIN( 683)				_g4->set_x((_g4->x + (offSet + 160)));
            			}
HXLINE( 684)			{
HXLINE( 684)				 ::Character _g5 = ::PlayState_obj::gf;
HXDLIN( 684)				_g5->set_y((_g5->y + -95));
            			}
HXLINE( 685)			::PlayState_obj::gf->scrollFactor->set(1,1);
HXLINE( 677)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("cuz4",ac,51,c9,41)) ||  (_hx_switch_2==HX_("cuzmad",08,aa,2d,44)) ){
HXLINE( 687)			int offSet = 53;
HXLINE( 688)			{
HXLINE( 688)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 688)				_g->set_x((_g->x + (offSet + -60)));
            			}
HXLINE( 689)			{
HXLINE( 689)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 689)				_g1->set_y((_g1->y + -390));
            			}
HXLINE( 690)			{
HXLINE( 690)				 ::Boyfriend _g2 = ::PlayState_obj::boyfriend;
HXDLIN( 690)				_g2->set_x((_g2->x + (offSet + 370)));
            			}
HXLINE( 691)			{
HXLINE( 691)				 ::Boyfriend _g3 = ::PlayState_obj::boyfriend;
HXDLIN( 691)				_g3->set_y((_g3->y + -240));
            			}
HXLINE( 692)			{
HXLINE( 692)				 ::Character _g4 = ::PlayState_obj::gf;
HXDLIN( 692)				_g4->set_x((_g4->x + (offSet + 160)));
            			}
HXLINE( 693)			{
HXLINE( 693)				 ::Character _g5 = ::PlayState_obj::gf;
HXDLIN( 693)				_g5->set_y((_g5->y + -20));
            			}
HXLINE( 694)			::PlayState_obj::gf->scrollFactor->set(1,1);
HXLINE( 686)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("dad",47,36,4c,00)) ){
HXLINE( 645)			 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 645)			_g->set_x((_g->x + 400));
HXDLIN( 645)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("gf",1f,5a,00,00)) ){
HXLINE( 630)			::PlayState_obj::dad->setPosition(::PlayState_obj::gf->x,::PlayState_obj::gf->y);
HXLINE( 631)			::PlayState_obj::gf->set_visible(false);
HXLINE( 632)			if (::PlayState_obj::isStoryMode) {
HXLINE( 634)				{
HXLINE( 634)					 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 634)					_g->set_x((_g->x + 600));
            				}
HXLINE( 635)				this->tweenCamIn();
            			}
HXLINE( 629)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("monster",1a,54,b0,b8)) ){
HXLINE( 641)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 641)			_g->set_y((_g->y + 100));
HXDLIN( 641)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 643)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 643)			_g->set_y((_g->y + 130));
HXDLIN( 643)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("parents-christmas",fe,94,c5,32)) ){
HXLINE( 650)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 650)			_g->set_x((_g->x - ( (Float)(500) )));
HXDLIN( 650)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 647)			{
HXLINE( 647)				 ::flixel::math::FlxPoint _g = camPos1;
HXDLIN( 647)				_g->set_x((_g->x + 600));
            			}
HXLINE( 648)			{
HXLINE( 648)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 648)				_g1->set_y((_g1->y + 300));
            			}
HXLINE( 646)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("senpai",3c,df,8d,6b)) ){
HXLINE( 652)			{
HXLINE( 652)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 652)				_g->set_x((_g->x + 150));
            			}
HXLINE( 653)			{
HXLINE( 653)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 653)				_g1->set_y((_g1->y + 360));
            			}
HXLINE( 654)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 654)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 651)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 656)			{
HXLINE( 656)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 656)				_g->set_x((_g->x + 150));
            			}
HXLINE( 657)			{
HXLINE( 657)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 657)				_g1->set_y((_g1->y + 360));
            			}
HXLINE( 658)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 658)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 655)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 660)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 663)				if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 665)					 ::flixel::addons::effects::FlxTrail evilTrail =  ::flixel::addons::effects::FlxTrail_obj::__alloc( HX_CTX ,::PlayState_obj::dad,null(),4,24,((Float)0.3),((Float)0.069));
HXLINE( 668)					this->add(evilTrail);
            				}
            			}
HXLINE( 673)			{
HXLINE( 673)				 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 673)				_g->set_x((_g->x - ( (Float)(150) )));
            			}
HXLINE( 674)			{
HXLINE( 674)				 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 674)				_g1->set_y((_g1->y + 100));
            			}
HXLINE( 675)			Float _hx_tmp = (::PlayState_obj::dad->getGraphicMidpoint(null())->x + 300);
HXDLIN( 675)			camPos1->set(_hx_tmp,::PlayState_obj::dad->getGraphicMidpoint(null())->y);
HXLINE( 659)			goto _hx_goto_15;
            		}
            		if (  (_hx_switch_2==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 639)			 ::Character _g = ::PlayState_obj::dad;
HXDLIN( 639)			_g->set_y((_g->y + 200));
HXDLIN( 639)			goto _hx_goto_15;
            		}
            		_hx_goto_15:;
HXLINE( 698)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE( 699)			::String _hx_switch_3 = ::PlayState_obj::Stage->curStage;
            			if (  (_hx_switch_3==HX_("downtown",b4,33,10,97)) ){
HXLINE( 727)				camPos1->set(960,510);
HXDLIN( 727)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_3==HX_("liminalHell",3d,fa,dc,88)) ){
HXLINE( 730)				camPos1->set(960,510);
HXLINE( 731)				{
HXLINE( 731)					 ::Character _g = ::PlayState_obj::gf;
HXDLIN( 731)					_g->set_y((_g->y + 200));
            				}
HXLINE( 732)				{
HXLINE( 732)					 ::Character _g1 = ::PlayState_obj::gf;
HXDLIN( 732)					_g1->set_x((_g1->x + -20));
            				}
HXLINE( 733)				{
HXLINE( 733)					 ::Boyfriend _g2 = ::PlayState_obj::boyfriend;
HXDLIN( 733)					_g2->set_x((_g2->x + -50));
            				}
HXLINE( 729)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_3==HX_("limo",1f,17,b3,47)) ){
HXLINE( 702)				{
HXLINE( 702)					 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 702)					_g->set_y((_g->y - ( (Float)(220) )));
            				}
HXLINE( 703)				{
HXLINE( 703)					 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 703)					_g1->set_x((_g1->x + 260));
            				}
HXLINE( 704)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE( 706)					this->resetFastCar();
            				}
HXLINE( 701)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_3==HX_("mall",d4,3a,56,48)) ){
HXLINE( 710)				 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 710)				_g->set_x((_g->x + 200));
HXDLIN( 710)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_3==HX_("mallEvil",88,d3,e3,a7)) ){
HXLINE( 713)				{
HXLINE( 713)					 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 713)					_g->set_x((_g->x + 320));
            				}
HXLINE( 714)				{
HXLINE( 714)					 ::Character _g1 = ::PlayState_obj::dad;
HXDLIN( 714)					_g1->set_y((_g1->y - ( (Float)(80) )));
            				}
HXLINE( 712)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_3==HX_("school",74,b8,c8,40)) ){
HXLINE( 716)				{
HXLINE( 716)					 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 716)					_g->set_x((_g->x + 200));
            				}
HXLINE( 717)				{
HXLINE( 717)					 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 717)					_g1->set_y((_g1->y + 220));
            				}
HXLINE( 718)				{
HXLINE( 718)					 ::Character _g2 = ::PlayState_obj::gf;
HXDLIN( 718)					_g2->set_x((_g2->x + 180));
            				}
HXLINE( 719)				{
HXLINE( 719)					 ::Character _g3 = ::PlayState_obj::gf;
HXDLIN( 719)					_g3->set_y((_g3->y + 300));
            				}
HXLINE( 715)				goto _hx_goto_16;
            			}
            			if (  (_hx_switch_3==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE( 721)				{
HXLINE( 721)					 ::Boyfriend _g = ::PlayState_obj::boyfriend;
HXDLIN( 721)					_g->set_x((_g->x + 200));
            				}
HXLINE( 722)				{
HXLINE( 722)					 ::Boyfriend _g1 = ::PlayState_obj::boyfriend;
HXDLIN( 722)					_g1->set_y((_g1->y + 220));
            				}
HXLINE( 723)				{
HXLINE( 723)					 ::Character _g2 = ::PlayState_obj::gf;
HXDLIN( 723)					_g2->set_x((_g2->x + 180));
            				}
HXLINE( 724)				{
HXLINE( 724)					 ::Character _g3 = ::PlayState_obj::gf;
HXDLIN( 724)					_g3->set_y((_g3->y + 300));
            				}
HXLINE( 720)				goto _hx_goto_16;
            			}
            			_hx_goto_16:;
            		}
HXLINE( 737)		if (::PlayState_obj::loadRep) {
HXLINE( 743)			::PlayStateChangeables_obj::useDownscroll = ( (bool)(::PlayState_obj::rep->replay->__Field(HX_("isDownscroll",79,6e,f3,21),::hx::paccDynamic)) );
HXLINE( 744)			::PlayStateChangeables_obj::safeFrames = ( (int)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) );
HXLINE( 745)			::PlayStateChangeables_obj::botPlay = true;
            		}
HXLINE( 752)		 ::DialogueBox doof = null();
HXLINE( 754)		if (::PlayState_obj::isStoryMode) {
HXLINE( 756)			doof =  ::DialogueBox_obj::__alloc( HX_CTX ,false,this->dialogue);
HXLINE( 759)			doof->scrollFactor->set(null(),null());
HXLINE( 760)			doof->finishThing = this->startCountdown_dyn();
            		}
HXLINE( 763)		::Conductor_obj::songPosition = ( (Float)(-5000) );
HXLINE( 764)		::Conductor_obj::rawPosition = ::Conductor_obj::songPosition;
HXLINE( 766)		this->strumLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,50,null())->makeGraphic(::flixel::FlxG_obj::width,10,null(),null(),null());
HXLINE( 767)		this->strumLine->scrollFactor->set(null(),null());
HXLINE( 769)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 770)			this->strumLine->set_y(( (Float)((::flixel::FlxG_obj::height - 165)) ));
            		}
HXLINE( 772)		::PlayState_obj::strumLineNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 773)		this->add(::PlayState_obj::strumLineNotes);
HXLINE( 775)		::PlayState_obj::playerStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 776)		::PlayState_obj::cpuStrums =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 778)		this->generateStaticArrows(0);
HXLINE( 779)		this->generateStaticArrows(1);
HXLINE( 783)		bool _hx_tmp9 = ::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) );
HXLINE( 788)		this->generateSong(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ));
HXLINE( 792)		::String songLowercase1 = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE( 793)		::String _hx_switch_4 = songLowercase1;
            		if (  (_hx_switch_4==HX_("dad-battle",be,d5,66,07)) ){
HXLINE( 796)			songLowercase1 = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN( 796)			goto _hx_goto_17;
            		}
            		if (  (_hx_switch_4==HX_("philly-nice",22,2e,26,44)) ){
HXLINE( 798)			songLowercase1 = HX_("philly",28,77,5e,ef);
HXDLIN( 798)			goto _hx_goto_17;
            		}
            		_hx_goto_17:;
HXLINE( 800)		if (this->executeModchart) {
HXLINE( 802)			::PlayState_obj::luaModchart = ::ModchartState_obj::createModchartState(::PlayState_obj::isStoryMode);
HXLINE( 803)			::PlayState_obj::luaModchart->executeState(HX_("start",62,74,0b,84),::cpp::VirtualArray_obj::__new(1)->init(0,songLowercase1));
            		}
HXLINE( 807)		if (this->executeModchart) {
HXLINE( 809)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camGame,HX_("camGame",a1,47,50,cf))->Register(::ModchartState_obj::lua);
HXLINE( 810)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camHUD,HX_("camHUD",e8,2b,76,b7))->Register(::ModchartState_obj::lua);
HXLINE( 811)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camSustains,HX_("camSustains",9f,69,a2,15))->Register(::ModchartState_obj::lua);
HXLINE( 812)			 ::LuaCamera_obj::__alloc( HX_CTX ,this->camSustains,HX_("camNotes",b2,c1,02,a8))->Register(::ModchartState_obj::lua);
HXLINE( 813)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::dad,HX_("dad",47,36,4c,00))->Register(::ModchartState_obj::lua);
HXLINE( 814)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::gf,HX_("gf",1f,5a,00,00))->Register(::ModchartState_obj::lua);
HXLINE( 815)			 ::LuaCharacter_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6))->Register(::ModchartState_obj::lua);
            		}
HXLINE( 817)		int index = 0;
HXLINE( 819)		if ((::PlayState_obj::startTime != 0)) {
HXLINE( 821)			::Array< ::Dynamic> toBeRemoved = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 822)			{
HXLINE( 822)				int _g = 0;
HXDLIN( 822)				int _g1 = this->notes->members->get_length();
HXDLIN( 822)				while((_g < _g1)){
HXLINE( 822)					_g = (_g + 1);
HXDLIN( 822)					int i = (_g - 1);
HXLINE( 824)					 ::Note dunceNote = Dynamic( this->notes->members->__get(i)).StaticCast<  ::Note >();
HXLINE( 826)					if (((dunceNote->strumTime - ::PlayState_obj::startTime) <= 0)) {
HXLINE( 827)						toBeRemoved->push(dunceNote);
            					}
            					else {
HXLINE( 830)						if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 832)							if (dunceNote->mustPress) {
HXLINE( 833)								Float _hx_tmp = (Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(dunceNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y * (::PlayState_obj::startTime - dunceNote->strumTime));
HXLINE( 834)								Float _hx_tmp1;
HXDLIN( 834)								if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 834)									_hx_tmp1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 834)									_hx_tmp1 = ::PlayStateChangeables_obj::scrollSpeed;
            								}
HXLINE( 833)								Float _hx_tmp2 = (_hx_tmp * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp1,2));
HXDLIN( 833)								dunceNote->set_y((_hx_tmp2 - ( (Float)(dunceNote->noteYOff) )));
            							}
            							else {
HXLINE( 837)								Float _hx_tmp = (Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(dunceNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y * (::PlayState_obj::startTime - dunceNote->strumTime));
HXLINE( 838)								Float _hx_tmp1;
HXDLIN( 838)								if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 838)									_hx_tmp1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 838)									_hx_tmp1 = ::PlayStateChangeables_obj::scrollSpeed;
            								}
HXLINE( 837)								Float _hx_tmp2 = (_hx_tmp * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp1,2));
HXDLIN( 837)								dunceNote->set_y((_hx_tmp2 - ( (Float)(dunceNote->noteYOff) )));
            							}
            						}
            						else {
HXLINE( 843)							if (dunceNote->mustPress) {
HXLINE( 844)								Float _hx_tmp = (Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(dunceNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y * (::PlayState_obj::startTime - dunceNote->strumTime));
HXLINE( 845)								Float _hx_tmp1;
HXDLIN( 845)								if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 845)									_hx_tmp1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 845)									_hx_tmp1 = ::PlayStateChangeables_obj::scrollSpeed;
            								}
HXLINE( 844)								Float _hx_tmp2 = (_hx_tmp * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp1,2));
HXDLIN( 844)								dunceNote->set_y((_hx_tmp2 + dunceNote->noteYOff));
            							}
            							else {
HXLINE( 848)								Float _hx_tmp = (Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(dunceNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y * (::PlayState_obj::startTime - dunceNote->strumTime));
HXLINE( 849)								Float _hx_tmp1;
HXDLIN( 849)								if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE( 849)									_hx_tmp1 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            								}
            								else {
HXLINE( 849)									_hx_tmp1 = ::PlayStateChangeables_obj::scrollSpeed;
            								}
HXLINE( 848)								Float _hx_tmp2 = (_hx_tmp * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp1,2));
HXDLIN( 848)								dunceNote->set_y((_hx_tmp2 + dunceNote->noteYOff));
            							}
            						}
            					}
            				}
            			}
HXLINE( 855)			{
HXLINE( 855)				int _g2 = 0;
HXDLIN( 855)				while((_g2 < toBeRemoved->length)){
HXLINE( 855)					 ::Note i = toBeRemoved->__get(_g2).StaticCast<  ::Note >();
HXDLIN( 855)					_g2 = (_g2 + 1);
HXLINE( 856)					this->notes->members->remove(i);
            				}
            			}
            		}
HXLINE( 863)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 865)		this->camFollow->setPosition(camPos1->x,camPos1->y);
HXLINE( 867)		if (::hx::IsNotNull( ::PlayState_obj::prevCamFollow )) {
HXLINE( 869)			this->camFollow = ::PlayState_obj::prevCamFollow;
HXLINE( 870)			::PlayState_obj::prevCamFollow = null();
            		}
HXLINE( 873)		this->add(this->camFollow);
HXLINE( 875)		 ::flixel::FlxCamera _hx_tmp10 = ::flixel::FlxG_obj::camera;
HXDLIN( 875)		 ::flixel::FlxObject _hx_tmp11 = this->camFollow;
HXDLIN( 875)		_hx_tmp10->follow(_hx_tmp11,::flixel::FlxCameraFollowStyle_obj::LOCKON_dyn(),(((Float)0.04) * (( (Float)(30) ) / ::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->getFPS())));
HXLINE( 877)		::flixel::FlxG_obj::camera->set_zoom(::PlayState_obj::Stage->camZoom);
HXLINE( 878)		{
HXLINE( 878)			 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN( 878)			 ::flixel::math::FlxPoint point = this->camFollow->getPosition(null());
HXDLIN( 878)			_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN( 878)			if (point->_weak) {
HXLINE( 878)				point->put();
            			}
            		}
HXLINE( 880)		{
HXLINE( 880)			 ::flixel::math::FlxRect _this1 = ::flixel::FlxG_obj::worldBounds;
HXDLIN( 880)			_this1->x = ( (Float)(0) );
HXDLIN( 880)			_this1->y = ( (Float)(0) );
HXDLIN( 880)			_this1->width = ( (Float)(::flixel::FlxG_obj::width) );
HXDLIN( 880)			_this1->height = ( (Float)(::flixel::FlxG_obj::height) );
            		}
HXLINE( 882)		::flixel::FlxG_obj::fixedTimestep = false;
HXLINE( 884)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE( 886)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN( 886)			::String library = null();
HXDLIN( 886)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 887)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 888)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE( 889)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 890)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE( 891)			this->add(::PlayState_obj::songPosBG);
HXLINE( 893)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXDLIN( 893)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXDLIN( 893)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXDLIN( 893)			int _hx_tmp4 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) )));
HXDLIN( 893)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,_hx_tmp4,::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,this->songLength,null());
HXLINE( 895)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE( 896)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE( 897)			this->add(::PlayState_obj::songPosBar);
HXLINE( 899)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN( 899)			Float songName1 = (songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) )));
HXDLIN( 899)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(songName1 - ( (Float)((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).length * 5)) )),::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE( 900)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 901)				 ::flixel::text::FlxText _g = songName2;
HXDLIN( 901)				_g->set_y((_g->y - ( (Float)(3) )));
            			}
HXLINE( 902)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 903)			songName2->scrollFactor->set(null(),null());
HXLINE( 904)			this->add(songName2);
HXLINE( 905)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE( 908)		 ::flixel::FlxSprite _hx_tmp12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)),null());
HXDLIN( 908)		::String library1 = null();
HXDLIN( 908)		this->healthBarBG = _hx_tmp12->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library1),null(),null(),null(),null(),null());
HXLINE( 909)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 910)			this->healthBarBG->set_y(( (Float)(50) ));
            		}
HXLINE( 911)		this->healthBarBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 912)		this->healthBarBG->scrollFactor->set(null(),null());
HXLINE( 913)		this->add(this->healthBarBG);
HXLINE( 915)		Float _hx_tmp13 = (this->healthBarBG->x + 4);
HXDLIN( 915)		Float _hx_tmp14 = (this->healthBarBG->y + 4);
HXDLIN( 915)		int _hx_tmp15 = ::Std_obj::_hx_int((this->healthBarBG->get_width() - ( (Float)(8) )));
HXDLIN( 915)		this->healthBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp13,_hx_tmp14,::flixel::ui::FlxBarFillDirection_obj::RIGHT_TO_LEFT_dyn(),_hx_tmp15,::Std_obj::_hx_int((this->healthBarBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("health",9c,28,06,fd),0,2,null());
HXLINE( 917)		this->healthBar->scrollFactor->set(null(),null());
HXLINE( 918)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("colour",4c,c8,86,c6),::hx::paccDynamic)) )) {
HXLINE( 920)			::String _hx_switch_5 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            			if (  (_hx_switch_5==HX_("cuz",88,85,4b,00)) ||  (_hx_switch_5==HX_("cuz2",aa,51,c9,41)) ){
HXLINE( 937)				this->healthBar->createFilledBar(-8728087,-16738364,null(),null());
HXDLIN( 937)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_5==HX_("cuz4",ac,51,c9,41)) ||  (_hx_switch_5==HX_("cuzmad",08,aa,2d,44)) ){
HXLINE( 939)				this->healthBar->createFilledBar(-8728087,-5963699,null(),null());
HXDLIN( 939)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_5==HX_("gf",1f,5a,00,00)) ){
HXLINE( 923)				this->healthBar->createFilledBar(-65536,-16738364,null(),null());
HXDLIN( 923)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_5==HX_("monster",1a,54,b0,b8)) ||  (_hx_switch_5==HX_("monster-christmas",4f,88,85,27)) ){
HXLINE( 929)				this->healthBar->createFilledBar(-664313,-16738364,null(),null());
HXDLIN( 929)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_5==HX_("dad",47,36,4c,00)) ||  (_hx_switch_5==HX_("mom-car",52,e6,f7,f6)) ||  (_hx_switch_5==HX_("parents-christmas",fe,94,c5,32)) ){
HXLINE( 925)				this->healthBar->createFilledBar(-10876939,-16738364,null(),null());
HXDLIN( 925)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_5==HX_("pico",e5,e8,57,4a)) ){
HXLINE( 931)				this->healthBar->createFilledBar(-11356908,-16738364,null(),null());
HXDLIN( 931)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_5==HX_("senpai",3c,df,8d,6b)) ||  (_hx_switch_5==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE( 933)				this->healthBar->createFilledBar(-561811,-16738364,null(),null());
HXDLIN( 933)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_5==HX_("spirit",31,bb,a9,bd)) ){
HXLINE( 935)				this->healthBar->createFilledBar(-5438203,-16738364,null(),null());
HXDLIN( 935)				goto _hx_goto_20;
            			}
            			if (  (_hx_switch_5==HX_("spooky",eb,bd,9e,c1)) ){
HXLINE( 927)				this->healthBar->createFilledBar(-688633,-16738364,null(),null());
HXDLIN( 927)				goto _hx_goto_20;
            			}
            			_hx_goto_20:;
            		}
            		else {
HXLINE( 943)			this->healthBar->createFilledBar(-65536,-10027213,null(),null());
            		}
HXLINE( 945)		this->add(this->healthBar);
HXLINE( 948)		Float _hx_tmp16 = (this->healthBarBG->y + 50);
HXLINE( 950)		::String _hx_tmp17 = ( (::String)((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" - ",73,6f,18,00))) );
HXLINE( 948)		this->kadeEngineWatermark =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,4,_hx_tmp16,0,(_hx_tmp17 + ::CoolUtil_obj::difficultyFromInt(::PlayState_obj::storyDifficulty)),16,null());
HXLINE( 955)		this->kadeEngineWatermark->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 956)		this->kadeEngineWatermark->scrollFactor->set(null(),null());
HXLINE( 957)		this->add(this->kadeEngineWatermark);
HXLINE( 959)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 960)			this->kadeEngineWatermark->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            		}
HXLINE( 962)		this->scoreTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) - ( (Float)(235) )),(this->healthBarBG->y + 50),0,HX_("",00,00,00,00),20,null());
HXLINE( 964)		this->scoreTxt->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 966)		this->originalX = this->scoreTxt->x;
HXLINE( 968)		this->scoreTxt->scrollFactor->set(null(),null());
HXLINE( 970)		this->scoreTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 972)		this->add(this->scoreTxt);
HXLINE( 974)		Float _hx_tmp18 = this->healthBarBG->x;
HXDLIN( 974)		Float _hx_tmp19 = ((_hx_tmp18 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN( 974)		int _hx_tmp20;
HXDLIN( 974)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 974)			_hx_tmp20 = 100;
            		}
            		else {
HXLINE( 974)			_hx_tmp20 = -100;
            		}
HXDLIN( 974)		this->replayTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp19,(this->healthBarBG->y + _hx_tmp20),0,HX_("REPLAY",27,93,04,b9),20,null());
HXLINE( 976)		this->replayTxt->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 977)		this->replayTxt->set_borderSize(( (Float)(4) ));
HXLINE( 978)		this->replayTxt->set_borderQuality(( (Float)(2) ));
HXLINE( 979)		this->replayTxt->scrollFactor->set(null(),null());
HXLINE( 980)		if (::PlayState_obj::loadRep) {
HXLINE( 982)			this->add(this->replayTxt);
            		}
HXLINE( 985)		Float _hx_tmp21 = this->healthBarBG->x;
HXDLIN( 985)		Float _hx_tmp22 = ((_hx_tmp21 + (this->healthBarBG->get_width() / ( (Float)(2) ))) - ( (Float)(75) ));
HXDLIN( 985)		int _hx_tmp23;
HXDLIN( 985)		if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE( 985)			_hx_tmp23 = 100;
            		}
            		else {
HXLINE( 985)			_hx_tmp23 = -100;
            		}
HXDLIN( 985)		this->botPlayState =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp22,(this->healthBarBG->y + _hx_tmp23),0,HX_("BOTPLAY",5b,cf,7d,e1),20,null());
HXLINE( 987)		this->botPlayState->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),42,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 988)		this->botPlayState->scrollFactor->set(null(),null());
HXLINE( 989)		this->botPlayState->set_borderSize(( (Float)(4) ));
HXLINE( 990)		this->botPlayState->set_borderQuality(( (Float)(2) ));
HXLINE( 991)		bool _hx_tmp24;
HXDLIN( 991)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE( 991)			_hx_tmp24 = !(::PlayState_obj::loadRep);
            		}
            		else {
HXLINE( 991)			_hx_tmp24 = false;
            		}
HXDLIN( 991)		if (_hx_tmp24) {
HXLINE( 992)			this->add(this->botPlayState);
            		}
HXLINE( 994)		this->iconP1 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::boyfriend->curCharacter,true);
HXLINE( 995)		 ::HealthIcon _hx_tmp25 = this->iconP1;
HXDLIN( 995)		Float _hx_tmp26 = this->healthBar->y;
HXDLIN( 995)		_hx_tmp25->set_y((_hx_tmp26 - (this->iconP1->get_height() / ( (Float)(2) ))));
HXLINE( 996)		this->iconP1->updateHitbox();
HXLINE( 998)		this->add(this->iconP1);
HXLINE(1000)		this->iconP2 =  ::HealthIcon_obj::__alloc( HX_CTX ,::PlayState_obj::dad->curCharacter,false);
HXLINE(1001)		 ::HealthIcon _hx_tmp27 = this->iconP2;
HXDLIN(1001)		Float _hx_tmp28 = this->healthBar->y;
HXDLIN(1001)		_hx_tmp27->set_y((_hx_tmp28 - (this->iconP2->get_height() / ( (Float)(2) ))));
HXLINE(1002)		this->iconP2->updateHitbox();
HXLINE(1003)		this->add(this->iconP2);
HXLINE(1005)		::PlayState_obj::strumLineNotes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1006)		this->notes->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1007)		this->healthBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1008)		this->healthBarBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1009)		this->iconP1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1010)		this->iconP2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1011)		this->scoreTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1012)		if (::PlayState_obj::isStoryMode) {
HXLINE(1013)			doof->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1014)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1016)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1017)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1019)		this->kadeEngineWatermark->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1020)		if (::PlayState_obj::loadRep) {
HXLINE(1021)			this->replayTxt->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1028)		this->startingSong = true;
HXLINE(1032)		if (::PlayState_obj::isStoryMode) {
HXLINE(1034)			::String _hx_switch_6 = ::StringTools_obj::replace(this->curSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
            			if (  (_hx_switch_6==HX_("equivocation",2b,55,ff,5a)) ||  (_hx_switch_6==HX_("exertion",74,11,ad,61)) ||  (_hx_switch_6==HX_("grappler",43,f6,b3,17)) ||  (_hx_switch_6==HX_("imminence",79,46,c5,28)) ){
HXLINE(1072)				this->cuzIntros(doof);
HXDLIN(1072)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_6==HX_("roses",04,6c,64,ed)) ){
HXLINE(1067)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1067)				_hx_tmp->play(::Paths_obj::sound(HX_("ANGRY",01,81,d0,a0),null()),null(),null(),null(),null(),null());
HXLINE(1068)				this->schoolIntro(doof);
HXLINE(1066)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_6==HX_("senpai",3c,df,8d,6b)) ){
HXLINE(1065)				this->schoolIntro(doof);
HXDLIN(1065)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_6==HX_("thorns",9c,bf,c7,8c)) ){
HXLINE(1070)				this->schoolIntro(doof);
HXDLIN(1070)				goto _hx_goto_21;
            			}
            			if (  (_hx_switch_6==HX_("winter-horrorland",9d,39,f4,1e)) ){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis, ::flixel::FlxSprite,blackScreen2) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::tweens::FlxTween twn){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1059_create)
HXLINE(1059)							_gthis->startCountdown();
            						}
            						HX_END_LOCAL_FUNC1((void))

            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1052_create)
HXLINE(1053)						_gthis->camHUD->set_visible(true);
HXLINE(1054)						_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1055)						::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("zoom",13,a3,f8,50),::PlayState_obj::Stage->camZoom)),((Float)2.5), ::Dynamic(::hx::Anon_obj::Create(2)
            							->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            							->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(_gthis)))));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1043_create)
HXLINE(1044)					_gthis->remove(blackScreen2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1045)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1045)					_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Turn_On",5f,e1,29,ad),null()),null(),null(),null(),null(),null());
HXLINE(1046)					_gthis->camFollow->set_y(( (Float)(-2050) ));
HXLINE(1047)					{
HXLINE(1047)						 ::flixel::FlxObject _g = _gthis->camFollow;
HXDLIN(1047)						_g->set_x((_g->x + 200));
            					}
HXLINE(1048)					{
HXLINE(1048)						 ::flixel::FlxCamera _this = ::flixel::FlxG_obj::camera;
HXDLIN(1048)						 ::flixel::math::FlxPoint point = _gthis->camFollow->getPosition(null());
HXDLIN(1048)						_this->scroll->set((point->x - (( (Float)(_this->width) ) * ((Float)0.5))),(point->y - (( (Float)(_this->height) ) * ((Float)0.5))));
HXDLIN(1048)						if (point->_weak) {
HXLINE(1048)							point->put();
            						}
            					}
HXLINE(1049)					::flixel::FlxG_obj::camera->set_zoom(((Float)1.5));
HXLINE(1051)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2(_gthis,blackScreen2)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1037)				 ::flixel::FlxSprite blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(1037)				int blackScreen1 = ::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::width * 2)) ));
HXDLIN(1037)				 ::flixel::FlxSprite blackScreen2 = blackScreen->makeGraphic(blackScreen1,::Std_obj::_hx_int(( (Float)((::flixel::FlxG_obj::height * 2)) )),-16777216,null(),null());
HXLINE(1038)				this->add(blackScreen2);
HXLINE(1039)				blackScreen2->scrollFactor->set(null(),null());
HXLINE(1040)				this->camHUD->set_visible(false);
HXLINE(1042)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.1), ::Dynamic(new _hx_Closure_3(_gthis,blackScreen2)),null());
HXLINE(1036)				goto _hx_goto_21;
            			}
            			/* default */{
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1075_create)
HXLINE(1075)					_gthis->startCountdown();
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(1074)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
            			_hx_goto_21:;
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1082_create)
HXLINE(1082)				_gthis->startCountdown();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1081)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_4(_gthis)),null());
            		}
HXLINE(1086)		if (!(::PlayState_obj::loadRep)) {
HXLINE(1087)			::PlayState_obj::rep =  ::Replay_obj::__alloc( HX_CTX ,HX_("na",33,60,00,00));
            		}
HXLINE(1089)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null(),null(),null());
HXLINE(1090)		::openfl::Lib_obj::get_current()->stage->addEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null(),null(),null());
HXLINE(1091)		this->super::create();
            	}


void PlayState_obj::cuzIntros( ::DialogueBox dialogueBox){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1095_cuzIntros)
HXLINE(1094)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1097)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1097)		_hx_tmp->play(::Paths_obj::sound(HX_("SNAP",4a,1e,18,37),null()),null(),null(),null(),null(),null());
HXLINE(1109)		 ::flixel::FlxSprite white =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-700,-700,null());
HXDLIN(1109)		 ::flixel::FlxSprite white1 = white->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-1,null(),null());
HXLINE(1110)		white1->scrollFactor->set(null(),null());
HXLINE(1111)		this->add(white1);
HXLINE(1114)		if ((this->curSong == HX_("exertion",74,11,ad,61))) {
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,white1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1122_cuzIntros)
HXLINE(1122)					if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1124)						_gthis->inCutscene = true;
HXLINE(1131)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            					else {
HXLINE(1133)						_gthis->startCountdown();
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1116_cuzIntros)
HXLINE(1118)				::flixel::FlxG_obj::camera->fade(-1,3,true,null(),null());
HXLINE(1119)				white1->set_alpha(( (Float)(0) ));
HXLINE(1120)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(3, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(1115)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,white1)),null());
            		}
            		else {
HXLINE(1140)			if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1142)				this->inCutscene = true;
HXLINE(1143)				this->add(dialogueBox);
            			}
            			else {
HXLINE(1145)				this->startCountdown();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,cuzIntros,(void))

void PlayState_obj::schoolIntro( ::DialogueBox dialogueBox){
            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,black1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1180_schoolIntro)
HXLINE(1181)			{
HXLINE(1181)				 ::flixel::FlxSprite _g = black1;
HXDLIN(1181)				_g->set_alpha((_g->alpha - ((Float)0.15)));
            			}
HXLINE(1183)			if ((black1->alpha > 0)) {
HXLINE(1185)				tmr->reset(((Float)0.3));
            			}
            			else {
HXLINE(1189)				if (::hx::IsNotNull( dialogueBox )) {
HXLINE(1191)					_gthis->inCutscene = true;
HXLINE(1193)					if ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
            						HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer swagTimer){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1198_schoolIntro)
HXLINE(1199)							{
HXLINE(1199)								 ::flixel::FlxSprite _g = senpaiEvil;
HXDLIN(1199)								_g->set_alpha((_g->alpha + ((Float)0.15)));
            							}
HXLINE(1200)							if ((senpaiEvil->alpha < 1)) {
HXLINE(1202)								swagTimer->reset(null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::DialogueBox,dialogueBox, ::flixel::FlxSprite,red1, ::flixel::FlxSprite,senpaiEvil) HXARGC(0)
            								void _hx_run(){
            									HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::DialogueBox,dialogueBox) HXARGC(0)
            									void _hx_run(){
            										HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1213_schoolIntro)
HXLINE(1213)										_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            									}
            									HX_END_LOCAL_FUNC0((void))

            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1208_schoolIntro)
HXLINE(1209)									_gthis->remove(senpaiEvil,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1210)									_gthis->remove(red1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1211)									::flixel::FlxG_obj::camera->fade(-1,((Float)0.01),true, ::Dynamic(new _hx_Closure_0(_gthis,dialogueBox)),true);
            								}
            								HX_END_LOCAL_FUNC0((void))

            								HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer deadTime){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1218_schoolIntro)
HXLINE(1218)									::flixel::FlxG_obj::camera->fade(-1,((Float)1.6),false,null(),null());
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(1206)								senpaiEvil->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1207)								 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1207)								_hx_tmp->play(::Paths_obj::sound(HX_("Senpai_Dies",56,a2,b9,ec),null()),1,false,null(),true, ::Dynamic(new _hx_Closure_1(_gthis,dialogueBox,red1,senpaiEvil)));
HXLINE(1216)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)3.2), ::Dynamic(new _hx_Closure_2()),null());
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(1195)						_gthis->add(senpaiEvil).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1196)						senpaiEvil->set_alpha(( (Float)(0) ));
HXLINE(1197)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_3(_gthis,dialogueBox,red1,senpaiEvil)),null());
            					}
            					else {
HXLINE(1225)						_gthis->add(dialogueBox).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            				else {
HXLINE(1229)					_gthis->startCountdown();
            				}
HXLINE(1231)				_gthis->remove(black1,null()).StaticCast<  ::flixel::FlxBasic >();
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1152_schoolIntro)
HXLINE(1151)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1153)		 ::flixel::FlxSprite black =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1153)		 ::flixel::FlxSprite black1 = black->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-16777216,null(),null());
HXLINE(1154)		black1->scrollFactor->set(null(),null());
HXLINE(1155)		this->add(black1);
HXLINE(1157)		 ::flixel::FlxSprite red =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,-100,null());
HXDLIN(1157)		 ::flixel::FlxSprite red1 = red->makeGraphic((::flixel::FlxG_obj::width * 2),(::flixel::FlxG_obj::height * 2),-58575,null(),null());
HXLINE(1158)		red1->scrollFactor->set(null(),null());
HXLINE(1160)		 ::flixel::FlxSprite senpaiEvil =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(1161)		 ::flixel::FlxSprite senpaiEvil1 = senpaiEvil;
HXDLIN(1161)		::String library = null();
HXDLIN(1161)		bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(1161)		::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1161)		senpaiEvil1->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/senpaiCrazy",d1,d1,90,fa)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1162)		senpaiEvil->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Senpai Pre Explosion",54,71,6e,81),24,false,null(),null());
HXLINE(1163)		 ::flixel::FlxSprite senpaiEvil2 = senpaiEvil;
HXDLIN(1163)		senpaiEvil2->setGraphicSize(::Std_obj::_hx_int((senpaiEvil->get_width() * ( (Float)(6) ))),null());
HXLINE(1164)		senpaiEvil->scrollFactor->set(null(),null());
HXLINE(1165)		senpaiEvil->updateHitbox();
HXLINE(1166)		senpaiEvil->screenCenter(null());
HXLINE(1168)		bool _hx_tmp1;
HXDLIN(1168)		if ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() != HX_("roses",04,6c,64,ed))) {
HXLINE(1168)			_hx_tmp1 = (::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("thorns",9c,bf,c7,8c));
            		}
            		else {
HXLINE(1168)			_hx_tmp1 = true;
            		}
HXDLIN(1168)		if (_hx_tmp1) {
HXLINE(1171)			this->remove(black1,null());
HXLINE(1173)			if ((::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE(1175)				this->add(red1);
            			}
            		}
HXLINE(1179)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.3), ::Dynamic(new _hx_Closure_4(_gthis,dialogueBox,red1,black1,senpaiEvil)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,schoolIntro,(void))

void PlayState_obj::startCountdown(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis,::Array< int >,swagCounter) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1262_startCountdown)
HXLINE(1263)			::PlayState_obj::dad->dance(null(),null());
HXLINE(1264)			::PlayState_obj::gf->dance(null(),null());
HXLINE(1265)			if (::hx::IsNotNull( ::PlayState_obj::gf2 )) {
HXLINE(1265)				::PlayState_obj::gf2->dance(null(),null());
            			}
HXLINE(1266)			::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE(1268)			 ::haxe::ds::StringMap introAssets =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(1269)			introAssets->set(HX_("default",c1,d8,c3,9b),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_38,3));
HXLINE(1270)			introAssets->set(HX_("pixel",86,c6,a3,c2),::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_39,3));
HXLINE(1272)			::Array< ::String > introAlts = ( (::Array< ::String >)(introAssets->get(HX_("default",c1,d8,c3,9b))) );
HXLINE(1273)			::String altSuffix = HX_("",00,00,00,00);
HXLINE(1274)			::String week6Bullshit = null();
HXLINE(1276)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1278)				introAlts = ( (::Array< ::String >)(introAssets->get(HX_("pixel",86,c6,a3,c2))) );
HXLINE(1279)				altSuffix = HX_("-pixel",39,03,b3,c0);
HXLINE(1280)				week6Bullshit = HX_("week6",c2,95,be,c7);
            			}
HXLINE(1283)			switch((int)(swagCounter->__get(0))){
            				case (int)0: {
HXLINE(1287)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1287)					_hx_tmp->play(::Paths_obj::sound((HX_("intro3",47,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)1: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,ready1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1302_startCountdown)
HXLINE(1302)						ready1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1289)					 ::flixel::FlxSprite ready =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1289)					 ::flixel::FlxSprite ready1 = ready->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(0)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1290)					ready1->scrollFactor->set(null(),null());
HXLINE(1291)					ready1->updateHitbox();
HXLINE(1293)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1294)						 ::flixel::FlxSprite ready = ready1;
HXDLIN(1294)						Float _hx_tmp = ready1->get_width();
HXDLIN(1294)						ready->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1296)					ready1->screenCenter(null());
HXLINE(1297)					_gthis->add(ready1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1298)					 ::flixel::FlxSprite ready2 = ready1;
HXDLIN(1298)					 ::flixel::FlxSprite _g = ready1;
HXDLIN(1298)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1298)					::flixel::tweens::FlxTween_obj::tween(ready2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(ready1)))));
HXLINE(1305)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1305)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro2",46,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)2: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::FlxSprite,set1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1319_startCountdown)
HXLINE(1319)						set1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1307)					 ::flixel::FlxSprite set =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1307)					 ::flixel::FlxSprite set1 = set->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(1)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1308)					set1->scrollFactor->set(null(),null());
HXLINE(1310)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1311)						 ::flixel::FlxSprite set = set1;
HXDLIN(1311)						Float _hx_tmp = set1->get_width();
HXDLIN(1311)						set->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1313)					set1->screenCenter(null());
HXLINE(1314)					_gthis->add(set1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1315)					 ::flixel::FlxSprite set2 = set1;
HXDLIN(1315)					 ::flixel::FlxSprite _g = set1;
HXDLIN(1315)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1315)					::flixel::tweens::FlxTween_obj::tween(set2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_1(set1)))));
HXLINE(1322)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1322)					_hx_tmp1->play(::Paths_obj::sound((HX_("intro1",45,54,90,9e) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)3: {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::flixel::FlxSprite,go1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween twn){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1338_startCountdown)
HXLINE(1338)						go1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(1324)					 ::flixel::FlxSprite go =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(1324)					 ::flixel::FlxSprite go1 = go->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + introAlts->__get(2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),week6Bullshit),null(),null(),null(),null(),null());
HXLINE(1325)					go1->scrollFactor->set(null(),null());
HXLINE(1327)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(1328)						 ::flixel::FlxSprite go = go1;
HXDLIN(1328)						Float _hx_tmp = go1->get_width();
HXDLIN(1328)						go->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(1330)					go1->updateHitbox();
HXLINE(1332)					go1->screenCenter(null());
HXLINE(1333)					_gthis->add(go1).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1334)					 ::flixel::FlxSprite go2 = go1;
HXDLIN(1334)					 ::flixel::FlxSprite _g = go1;
HXDLIN(1334)					 ::Dynamic _hx_tmp =  ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("y",79,00,00,00),_g->set_y((_g->y + 100)))
            						->setFixed(1,HX_("alpha",5e,a7,96,21),0));
HXDLIN(1334)					::flixel::tweens::FlxTween_obj::tween(go2,_hx_tmp,(::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::cubeInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_2(go1)))));
HXLINE(1341)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN(1341)					_hx_tmp1->play(::Paths_obj::sound((HX_("introGo",b4,7b,b9,1f) + altSuffix),null()),((Float)0.6),null(),null(),null(),null());
            				}
            				break;
            				case (int)4: {
            				}
            				break;
            			}
HXLINE(1345)			::Array< int > swagCounter1 = swagCounter;
HXDLIN(1345)			int _hx_tmp = 0;
HXDLIN(1345)			swagCounter1[_hx_tmp] = (swagCounter1->__get(_hx_tmp) + 1);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1245_startCountdown)
HXLINE(1244)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1246)		this->inCutscene = false;
HXLINE(1248)		this->appearStaticArrows();
HXLINE(1254)		this->talking = false;
HXLINE(1255)		this->startedCountdown = true;
HXLINE(1256)		::Conductor_obj::songPosition = ( (Float)(0) );
HXLINE(1257)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(1257)		::Conductor_obj::songPosition = (::Conductor_obj::songPosition - (::Conductor_obj::crochet * ( (Float)(5) )));
HXLINE(1259)		::Array< int > swagCounter = ::Array_obj< int >::fromData( _hx_array_data_46c2835d_44,1);
HXLINE(1261)		 ::flixel::util::FlxTimer _hx_tmp1 =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null());
HXDLIN(1261)		this->startTimer = _hx_tmp1->start((::Conductor_obj::crochet / ( (Float)(1000) )), ::Dynamic(new _hx_Closure_3(_gthis,swagCounter)),5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startCountdown,(void))

::String PlayState_obj::getKey(int charCode){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1354_getKey)
HXLINE(1355)		{
HXLINE(1355)			 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap);
HXDLIN(1355)			while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(1355)				 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(1355)				::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(1355)				int value = ( (int)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE(1357)				if ((charCode == value)) {
HXLINE(1358)					return key;
            				}
            			}
            		}
HXLINE(1360)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKey,return )

void PlayState_obj::releaseInput( ::openfl::events::KeyboardEvent evt){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1366_releaseInput)
HXLINE(1368)		::String key = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(evt->keyCode);
HXLINE(1370)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(1377)		int data = -1;
HXLINE(1379)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(1382)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(1386)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(1388)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(1384)				data = 1;
            			}
            			break;
            		}
HXLINE(1391)		{
HXLINE(1391)			int _g = 0;
HXDLIN(1391)			int _g1 = binds->length;
HXDLIN(1391)			while((_g < _g1)){
HXLINE(1391)				_g = (_g + 1);
HXDLIN(1391)				int i = (_g - 1);
HXLINE(1393)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(1393)				if ((_hx_tmp == key.toLowerCase())) {
HXLINE(1394)					data = i;
            				}
            			}
            		}
HXLINE(1397)		if ((data == -1)) {
HXLINE(1398)			return;
            		}
HXLINE(1400)		this->keys[data] = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,releaseInput,(void))

void PlayState_obj::handleInput( ::openfl::events::KeyboardEvent evt){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1464_handleInput)
HXLINE(1464)			bool _hx_tmp;
HXDLIN(1464)			bool _hx_tmp1;
HXDLIN(1464)			if (daNote->canBeHit) {
HXLINE(1464)				_hx_tmp1 = daNote->mustPress;
            			}
            			else {
HXLINE(1464)				_hx_tmp1 = false;
            			}
HXDLIN(1464)			if (_hx_tmp1) {
HXLINE(1464)				_hx_tmp = !(daNote->wasGoodHit);
            			}
            			else {
HXLINE(1464)				_hx_tmp = false;
            			}
HXDLIN(1464)			if (_hx_tmp) {
HXLINE(1465)				_gthis->closestNotes->push(daNote);
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(2)
            		int _hx_run( ::Note a, ::Note b){
            			HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1468_handleInput)
HXLINE(1468)			return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1407_handleInput)
HXLINE(1406)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1409)		bool _hx_tmp;
HXDLIN(1409)		bool _hx_tmp1;
HXDLIN(1409)		if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(1409)			_hx_tmp1 = ::PlayState_obj::loadRep;
            		}
            		else {
HXLINE(1409)			_hx_tmp1 = true;
            		}
HXDLIN(1409)		if (!(_hx_tmp1)) {
HXLINE(1409)			_hx_tmp = this->paused;
            		}
            		else {
HXLINE(1409)			_hx_tmp = true;
            		}
HXDLIN(1409)		if (_hx_tmp) {
HXLINE(1410)			return;
            		}
HXLINE(1417)		::String key = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::toStringMap->get_string(evt->keyCode);
HXLINE(1419)		::Array< ::String > binds = ::Array_obj< ::String >::__new(4)->init(0, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("leftBind",64,39,12,48),::hx::paccDynamic)))->init(1, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("downBind",3f,f3,fe,75),::hx::paccDynamic)))->init(2, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("upBind",b8,51,92,70),::hx::paccDynamic)))->init(3, ::Dynamic(::flixel::FlxG_obj::save->data->__Field(HX_("rightBind",b9,4b,dd,ab),::hx::paccDynamic)));
HXLINE(1426)		int data = -1;
HXLINE(1428)		switch((int)(evt->keyCode)){
            			case (int)37: {
HXLINE(1431)				data = 0;
            			}
            			break;
            			case (int)38: {
HXLINE(1435)				data = 2;
            			}
            			break;
            			case (int)39: {
HXLINE(1437)				data = 3;
            			}
            			break;
            			case (int)40: {
HXLINE(1433)				data = 1;
            			}
            			break;
            		}
HXLINE(1440)		{
HXLINE(1440)			int _g = 0;
HXDLIN(1440)			int _g1 = binds->length;
HXDLIN(1440)			while((_g < _g1)){
HXLINE(1440)				_g = (_g + 1);
HXDLIN(1440)				int i = (_g - 1);
HXLINE(1442)				::String _hx_tmp = binds->__get(i).toLowerCase();
HXDLIN(1442)				if ((_hx_tmp == key.toLowerCase())) {
HXLINE(1443)					data = i;
            				}
            			}
            		}
HXLINE(1445)		if ((data == -1)) {
HXLINE(1448)			return;
            		}
HXLINE(1450)		if (this->keys->__get(data)) {
HXLINE(1453)			return;
            		}
HXLINE(1456)		this->keys[data] = true;
HXLINE(1458)		 ::Ana ana =  ::Ana_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,null(),false,HX_("miss",fc,52,5c,48),data);
HXLINE(1460)		this->closestNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1462)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(1468)		this->closestNotes->sort( ::Dynamic(new _hx_Closure_1()));
HXLINE(1470)		::Array< ::Dynamic> dataNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1471)		{
HXLINE(1471)			int _g2 = 0;
HXDLIN(1471)			::Array< ::Dynamic> _g3 = this->closestNotes;
HXDLIN(1471)			while((_g2 < _g3->length)){
HXLINE(1471)				 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(1471)				_g2 = (_g2 + 1);
HXLINE(1472)				if ((i->noteData == data)) {
HXLINE(1473)					dataNotes->push(i);
            				}
            			}
            		}
HXLINE(1477)		if ((dataNotes->length != 0)) {
HXLINE(1479)			 ::Note coolNote = null();
HXLINE(1481)			{
HXLINE(1481)				int _g = 0;
HXDLIN(1481)				while((_g < dataNotes->length)){
HXLINE(1481)					 ::Note i = dataNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(1481)					_g = (_g + 1);
HXLINE(1482)					if (!(i->isSustainNote)) {
HXLINE(1484)						coolNote = i;
HXLINE(1485)						goto _hx_goto_51;
            					}
            				}
            				_hx_goto_51:;
            			}
HXLINE(1488)			if (::hx::IsNull( coolNote )) {
HXLINE(1490)				return;
            			}
HXLINE(1493)			if ((dataNotes->length > 1)) {
HXLINE(1495)				int _g = 0;
HXDLIN(1495)				int _g1 = dataNotes->length;
HXDLIN(1495)				while((_g < _g1)){
HXLINE(1495)					_g = (_g + 1);
HXDLIN(1495)					int i = (_g - 1);
HXLINE(1497)					if ((i == 0)) {
HXLINE(1498)						continue;
            					}
HXLINE(1500)					 ::Note note = dataNotes->__get(i).StaticCast<  ::Note >();
HXLINE(1502)					bool _hx_tmp;
HXDLIN(1502)					if (!(note->isSustainNote)) {
HXLINE(1502)						_hx_tmp = ((note->strumTime - coolNote->strumTime) < 2);
            					}
            					else {
HXLINE(1502)						_hx_tmp = false;
            					}
HXDLIN(1502)					if (_hx_tmp) {
HXLINE(1506)						note->kill();
HXLINE(1507)						this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(1508)						note->destroy();
            					}
            				}
            			}
HXLINE(1513)			this->goodNoteHit(coolNote,null());
HXLINE(1514)			Float noteDiff = -((coolNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(1515)			ana->hit = true;
HXLINE(1516)			ana->hitJudge = ::Ratings_obj::judgeNote(coolNote);
HXLINE(1517)			ana->nearestNote = ::cpp::VirtualArray_obj::__new(3)->init(0,coolNote->strumTime)->init(1,coolNote->noteData)->init(2,coolNote->sustainLength);
            		}
            		else {
HXLINE(1519)			bool _hx_tmp;
HXDLIN(1519)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(1519)				_hx_tmp = this->songStarted;
            			}
            			else {
HXLINE(1519)				_hx_tmp = false;
            			}
HXDLIN(1519)			if (_hx_tmp) {
HXLINE(1521)				this->noteMiss(data,null());
HXLINE(1522)				ana->hit = false;
HXLINE(1523)				ana->hitJudge = HX_("shit",c0,cf,52,4c);
HXLINE(1524)				ana->nearestNote = ::cpp::VirtualArray_obj::__new(0);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,handleInput,(void))

void PlayState_obj::startSong(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1538_startSong)
HXLINE(1539)		this->startingSong = false;
HXLINE(1540)		this->songStarted = true;
HXLINE(1541)		this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(1542)		this->lastReportedPlayheadPosition = 0;
HXLINE(1544)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(1545)		this->vocals->play(null(),null(),null());
HXLINE(1549)		::String _hx_switch_0 = this->curSong;
            		if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ||  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ||  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ||  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ||  (_hx_switch_0==HX_("Philly Nice",95,67,fc,96)) ){
HXLINE(1552)			this->allowedToHeadbang = true;
HXDLIN(1552)			goto _hx_goto_56;
            		}
            		/* default */{
HXLINE(1554)			this->allowedToHeadbang = false;
            		}
            		_hx_goto_56:;
HXLINE(1557)		if (this->useVideo) {
HXLINE(1558)			::GlobalVideo_obj::get()->__Field(HX_("resume",ad,69,84,08),::hx::paccDynamic)();
            		}
HXLINE(1560)		if (this->executeModchart) {
HXLINE(1561)			::PlayState_obj::luaModchart->executeState(HX_("songStart",4d,bc,85,b3),::cpp::VirtualArray_obj::__new(1)->init(0,null()));
            		}
HXLINE(1565)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(1565)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(1572)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(1565)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(1580)		::flixel::FlxG_obj::sound->music->set_time(::PlayState_obj::startTime);
HXLINE(1581)		if (::hx::IsNotNull( this->vocals )) {
HXLINE(1582)			this->vocals->set_time(::PlayState_obj::startTime);
            		}
HXLINE(1583)		::Conductor_obj::songPosition = ::PlayState_obj::startTime;
HXLINE(1584)		::PlayState_obj::startTime = ( (Float)(0) );
HXLINE(1612)		{
HXLINE(1613)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(1614)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(1615)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(1621)		{
HXLINE(1621)			int _g = 0;
HXDLIN(1621)			int _g1 = this->unspawnNotes->length;
HXDLIN(1621)			while((_g < _g1)){
HXLINE(1621)				_g = (_g + 1);
HXDLIN(1621)				int i = (_g - 1);
HXLINE(1622)				if ((this->unspawnNotes->__get(i).StaticCast<  ::Note >()->strumTime < ::PlayState_obj::startTime)) {
HXLINE(1623)					this->unspawnNotes->remove(this->unspawnNotes->__get(i).StaticCast<  ::Note >());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,startSong,(void))

void PlayState_obj::generateSong(::String dataPath){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1629_generateSong)
HXLINE(1632)		 ::Dynamic songData = ::PlayState_obj::SONG;
HXLINE(1633)		::Conductor_obj::changeBPM(( (Float)(songData->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE(1635)		this->curSong = ( (::String)(songData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) );
HXLINE(1638)		bool _hx_tmp;
HXDLIN(1638)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1638)			_hx_tmp = !(::PlayState_obj::isSM);
            		}
            		else {
HXLINE(1638)			_hx_tmp = false;
            		}
HXDLIN(1638)		if (_hx_tmp) {
HXLINE(1639)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1639)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1639)			::String _hx_switch_0 = songLowercase;
            			if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1639)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1639)				goto _hx_goto_59;
            			}
            			if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1639)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1639)				goto _hx_goto_59;
            			}
            			_hx_goto_59:;
HXDLIN(1639)			this->vocals = _hx_tmp->loadEmbedded((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00)),null(),null(),null());
            		}
            		else {
HXLINE(1641)			this->vocals =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
            		}
HXLINE(1651)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1653)		if (!(this->paused)) {
HXLINE(1656)			bool _hx_tmp;
HXDLIN(1656)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1656)				_hx_tmp = ::PlayState_obj::isSM;
            			}
            			else {
HXLINE(1656)				_hx_tmp = false;
            			}
HXDLIN(1656)			if (_hx_tmp) {
HXLINE(1659)				 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC));
HXLINE(1660)				 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1661)				sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE(1662)				::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            			}
            			else {
HXLINE(1666)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1666)				::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1666)				::String _hx_switch_1 = songLowercase;
            				if (  (_hx_switch_1==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1666)					songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1666)					goto _hx_goto_60;
            				}
            				if (  (_hx_switch_1==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1666)					songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1666)					goto _hx_goto_60;
            				}
            				_hx_goto_60:;
HXDLIN(1666)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),1,false,null());
            			}
            		}
HXLINE(1672)		::flixel::FlxG_obj::sound->music->onComplete = this->endSong_dyn();
HXLINE(1673)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1675)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(1676)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(1676)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1676)			::String _hx_switch_2 = songLowercase;
            			if (  (_hx_switch_2==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1676)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1676)				goto _hx_goto_61;
            			}
            			if (  (_hx_switch_2==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1676)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1676)				goto _hx_goto_61;
            			}
            			_hx_goto_61:;
HXDLIN(1676)			::String EmbeddedSound = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(1676)			bool _hx_tmp;
HXDLIN(1676)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(1676)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(1676)				_hx_tmp = true;
            			}
HXDLIN(1676)			if (_hx_tmp) {
HXLINE(1676)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE(1677)		if (!(::PlayState_obj::isSM)) {
HXLINE(1678)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _this = ::flixel::FlxG_obj::sound;
HXDLIN(1678)			::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1678)			::String _hx_switch_3 = songLowercase;
            			if (  (_hx_switch_3==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1678)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1678)				goto _hx_goto_62;
            			}
            			if (  (_hx_switch_3==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1678)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1678)				goto _hx_goto_62;
            			}
            			_hx_goto_62:;
HXDLIN(1678)			::String EmbeddedSound = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00));
HXDLIN(1678)			bool _hx_tmp;
HXDLIN(1678)			if (!(::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("SOUND",af,c4,ba,fe)))) {
HXLINE(1678)				_hx_tmp = ::openfl::utils::Assets_obj::exists(EmbeddedSound,HX_("MUSIC",85,08,49,8e));
            			}
            			else {
HXLINE(1678)				_hx_tmp = true;
            			}
HXDLIN(1678)			if (_hx_tmp) {
HXLINE(1678)				::openfl::utils::Assets_obj::getSound(EmbeddedSound,true);
            			}
            		}
HXLINE(1683)		this->songLength = (::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) ));
HXLINE(1685)		::Conductor_obj::crochet = (((( (Float)(60) ) / ( (Float)(::PlayState_obj::SONG->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) )) * ( (Float)(1000) )) / ::PlayState_obj::songMultiplier);
HXLINE(1686)		::Conductor_obj::stepCrochet = (::Conductor_obj::crochet / ( (Float)(4) ));
HXLINE(1688)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("songPosition",9e,dd,3b,8d),::hx::paccDynamic)) )) {
HXLINE(1690)			this->remove(::PlayState_obj::songPosBG,null());
HXLINE(1691)			this->remove(::PlayState_obj::songPosBar,null());
HXLINE(1692)			this->remove(this->songName,null());
HXLINE(1694)			 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,10,null());
HXDLIN(1694)			::String library = null();
HXDLIN(1694)			::PlayState_obj::songPosBG = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("healthBar",97,8a,92,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(1695)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(1696)				::PlayState_obj::songPosBG->set_y(((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.9)) + 45));
            			}
HXLINE(1697)			::PlayState_obj::songPosBG->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(1698)			::PlayState_obj::songPosBG->scrollFactor->set(null(),null());
HXLINE(1699)			this->add(::PlayState_obj::songPosBG);
HXLINE(1701)			Float _hx_tmp1 = (::PlayState_obj::songPosBG->x + 4);
HXLINE(1702)			Float _hx_tmp2 = (::PlayState_obj::songPosBG->y + 4);
HXLINE(1703)			int _hx_tmp3 = ::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_width() - ( (Float)(8) )));
HXLINE(1701)			::PlayState_obj::songPosBar =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,_hx_tmp1,_hx_tmp2,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),_hx_tmp3,::Std_obj::_hx_int((::PlayState_obj::songPosBG->get_height() - ( (Float)(8) ))),::hx::ObjectPtr<OBJ_>(this),HX_("songPositionBar",d5,62,6e,a6),0,100,null());
HXLINE(1705)			::PlayState_obj::songPosBar->set_numDivisions(1000);
HXLINE(1706)			::PlayState_obj::songPosBar->scrollFactor->set(null(),null());
HXLINE(1707)			::PlayState_obj::songPosBar->createFilledBar(-8355712,-16711936,null(),null());
HXLINE(1708)			this->add(::PlayState_obj::songPosBar);
HXLINE(1710)			Float songName = ::PlayState_obj::songPosBG->x;
HXDLIN(1710)			Float songName1 = (songName + (::PlayState_obj::songPosBG->get_width() / ( (Float)(2) )));
HXDLIN(1710)			 ::flixel::text::FlxText songName2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(songName1 - ( (Float)((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).length * 5)) )),::PlayState_obj::songPosBG->y,0,( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),16,null());
HXLINE(1711)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(1712)				 ::flixel::text::FlxText _g = songName2;
HXDLIN(1712)				_g->set_y((_g->y - ( (Float)(3) )));
            			}
HXLINE(1713)			songName2->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),16,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1714)			songName2->scrollFactor->set(null(),null());
HXLINE(1715)			this->add(songName2);
HXLINE(1717)			::PlayState_obj::songPosBG->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1718)			::PlayState_obj::songPosBar->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(1719)			songName2->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            		}
HXLINE(1723)		this->notes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(1724)		this->add(this->notes);
HXLINE(1726)		::Array< ::Dynamic> noteData = ( (::Array< ::Dynamic>)(songData->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXLINE(1731)		int playerCounter = 0;
HXLINE(1736)		::String songLowercase = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXLINE(1737)		::String _hx_switch_4 = songLowercase;
            		if (  (_hx_switch_4==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1740)			songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1740)			goto _hx_goto_63;
            		}
            		if (  (_hx_switch_4==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1742)			songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1742)			goto _hx_goto_63;
            		}
            		_hx_goto_63:;
HXLINE(1745)		::String songPath = ((HX_("assets/data/",f9,10,73,a0) + songLowercase) + HX_("/",2f,00,00,00));
HXLINE(1748)		bool _hx_tmp1;
HXDLIN(1748)		if (::PlayState_obj::isSM) {
HXLINE(1748)			_hx_tmp1 = !(::PlayState_obj::isStoryMode);
            		}
            		else {
HXLINE(1748)			_hx_tmp1 = false;
            		}
HXDLIN(1748)		if (_hx_tmp1) {
HXLINE(1749)			songPath = ::PlayState_obj::pathToSm;
            		}
HXLINE(1752)		{
HXLINE(1752)			int _g = 0;
HXDLIN(1752)			::Array< ::String > _g1 = ::sys::FileSystem_obj::readDirectory(songPath);
HXDLIN(1752)			while((_g < _g1->length)){
HXLINE(1752)				::String file = _g1->__get(_g);
HXDLIN(1752)				_g = (_g + 1);
HXLINE(1754)				::String path = ::haxe::io::Path_obj::join(::Array_obj< ::String >::__new(2)->init(0,songPath)->init(1,file));
HXLINE(1755)				if (!(::sys::FileSystem_obj::isDirectory(path))) {
HXLINE(1757)					if (::StringTools_obj::endsWith(path,HX_(".offset",41,ee,1a,d9))) {
HXLINE(1760)						::PlayState_obj::songOffset = ::Std_obj::parseFloat(file.substring(0,file.indexOf(HX_(".off",01,64,bc,1e),null())));
HXLINE(1761)						goto _hx_goto_64;
            					}
            					else {
HXLINE(1766)						::sys::io::File_obj::saveContent(((songPath + ::PlayState_obj::songOffset) + HX_(".offset",41,ee,1a,d9)),HX_("",00,00,00,00));
            					}
            				}
            			}
            			_hx_goto_64:;
            		}
HXLINE(1771)		int daBeats = 0;
HXLINE(1777)		{
HXLINE(1777)			int _g2 = 0;
HXDLIN(1777)			while((_g2 < noteData->length)){
HXLINE(1777)				 ::Dynamic section = noteData->__get(_g2);
HXDLIN(1777)				_g2 = (_g2 + 1);
HXLINE(1779)				int coolSection = ::Std_obj::_hx_int((( (Float)(section->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) / ( (Float)(4) )));
HXLINE(1781)				{
HXLINE(1781)					int _g = 0;
HXDLIN(1781)					::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1781)					while((_g < _g1->length)){
HXLINE(1781)						::cpp::VirtualArray songNotes = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(1781)						_g = (_g + 1);
HXLINE(1783)						Float daStrumTime = ((( (Float)(songNotes->__get(0)) ) - ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("offset",93,97,3f,60),::hx::paccDynamic)) )) - ::PlayState_obj::songOffset);
HXLINE(1784)						if ((daStrumTime < 0)) {
HXLINE(1785)							daStrumTime = ( (Float)(0) );
            						}
HXLINE(1787)						int daNoteData = ::Std_obj::_hx_int(::hx::Mod(songNotes->__get(1),4));
HXLINE(1789)						bool gottaHitNote = true;
HXLINE(1796)						int daNoteType = ::Std_obj::_hx_int(( (Float)(songNotes->__get(5)) ));
HXLINE(1798)						bool _hx_tmp;
HXDLIN(1798)						if (::hx::IsGreater( songNotes->__get(1),3 )) {
HXLINE(1798)							_hx_tmp = ( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
            						}
            						else {
HXLINE(1798)							_hx_tmp = false;
            						}
HXDLIN(1798)						if (_hx_tmp) {
HXLINE(1799)							gottaHitNote = false;
            						}
            						else {
HXLINE(1800)							bool _hx_tmp;
HXDLIN(1800)							if (::hx::IsLess( songNotes->__get(1),4 )) {
HXLINE(1800)								_hx_tmp = !(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            							}
            							else {
HXLINE(1800)								_hx_tmp = false;
            							}
HXDLIN(1800)							if (_hx_tmp) {
HXLINE(1801)								gottaHitNote = false;
            							}
            						}
HXLINE(1807)						 ::Note oldNote;
HXLINE(1808)						if ((this->unspawnNotes->length > 0)) {
HXLINE(1809)							oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(1811)							oldNote = null();
            						}
HXLINE(1817)						 ::Note swagNote =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,daNoteData,oldNote,false,false,false,0,daNoteType);
HXLINE(1820)						bool _hx_tmp1;
HXDLIN(1820)						if (!(gottaHitNote)) {
HXLINE(1820)							_hx_tmp1 = ::PlayStateChangeables_obj::Optimize;
            						}
            						else {
HXLINE(1820)							_hx_tmp1 = false;
            						}
HXDLIN(1820)						if (_hx_tmp1) {
HXLINE(1821)							continue;
            						}
HXLINE(1823)						swagNote->sustainLength = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(songNotes->__get(2)) )));
HXLINE(1824)						swagNote->scrollFactor->set(0,0);
HXLINE(1826)						Float susLength = swagNote->sustainLength;
HXLINE(1828)						susLength = (susLength / ::Conductor_obj::stepCrochet);
HXLINE(1829)						this->unspawnNotes->push(swagNote);
HXLINE(1832)						swagNote->isAlt = ( (bool)(songNotes->__get(3)) );
HXLINE(1834)						if ((susLength > 0)) {
HXLINE(1835)							swagNote->isParent = true;
            						}
HXLINE(1837)						int type = 0;
HXLINE(1839)						{
HXLINE(1839)							int _g2 = 0;
HXDLIN(1839)							int _g3 = ::Math_obj::floor(susLength);
HXDLIN(1839)							while((_g2 < _g3)){
HXLINE(1839)								_g2 = (_g2 + 1);
HXDLIN(1839)								int susNote = (_g2 - 1);
HXLINE(1841)								oldNote = this->unspawnNotes->__get(::Std_obj::_hx_int(( (Float)((this->unspawnNotes->length - 1)) ))).StaticCast<  ::Note >();
HXLINE(1844)								 ::Note sustainNote =  ::Note_obj::__alloc( HX_CTX ,((daStrumTime + (::Conductor_obj::stepCrochet * ( (Float)(susNote) ))) + ::Conductor_obj::stepCrochet),daNoteData,oldNote,true,false,false,0,daNoteType);
HXLINE(1847)								sustainNote->scrollFactor->set(null(),null());
HXLINE(1848)								this->unspawnNotes->push(sustainNote);
HXLINE(1850)								sustainNote->isAlt = ( (bool)(songNotes->__get(3)) );
HXLINE(1852)								sustainNote->mustPress = gottaHitNote;
HXLINE(1854)								if (sustainNote->mustPress) {
HXLINE(1856)									 ::Note _g = sustainNote;
HXDLIN(1856)									_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            								}
HXLINE(1859)								sustainNote->parent = swagNote;
HXLINE(1860)								swagNote->children->push(sustainNote);
HXLINE(1861)								sustainNote->spotInLine = type;
HXLINE(1862)								type = (type + 1);
            							}
            						}
HXLINE(1865)						swagNote->mustPress = gottaHitNote;
HXLINE(1867)						if (swagNote->mustPress) {
HXLINE(1869)							 ::Note _g = swagNote;
HXDLIN(1869)							_g->set_x((_g->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))));
            						}
            					}
            				}
HXLINE(1872)				daBeats = (daBeats + 1);
            			}
            		}
HXLINE(1878)		this->unspawnNotes->sort(this->sortByShit_dyn());
HXLINE(1880)		this->generatedMusic = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateSong,(void))

int PlayState_obj::sortByShit( ::Note Obj1, ::Note Obj2){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1886_sortByShit)
HXDLIN(1886)		Float Value1 = Obj1->strumTime;
HXDLIN(1886)		Float Value2 = Obj2->strumTime;
HXDLIN(1886)		int result = 0;
HXDLIN(1886)		if ((Value1 < Value2)) {
HXDLIN(1886)			result = -1;
            		}
            		else {
HXDLIN(1886)			if ((Value1 > Value2)) {
HXDLIN(1886)				result = 1;
            			}
            		}
HXDLIN(1886)		return result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,sortByShit,return )

void PlayState_obj::generateStaticArrows(int player){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1891_generateStaticArrows)
HXDLIN(1891)		int _g = 0;
HXDLIN(1891)		while((_g < 4)){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            			void _hx_run( ::flixel::FlxSprite spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_1988_generateStaticArrows)
HXLINE(1988)				spr->centerOffsets(null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXDLIN(1891)			_g = (_g + 1);
HXDLIN(1891)			int i = (_g - 1);
HXLINE(1894)			 ::StaticArrow babyArrow =  ::StaticArrow_obj::__alloc( HX_CTX ,( (Float)(0) ),this->strumLine->y);
HXLINE(1897)			::String noteTypeCheck = HX_("normal",27,72,69,30);
HXLINE(1899)			bool _hx_tmp;
HXDLIN(1899)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(1899)				_hx_tmp = (player == 0);
            			}
            			else {
HXLINE(1899)				_hx_tmp = false;
            			}
HXDLIN(1899)			if (_hx_tmp) {
HXLINE(1900)				continue;
            			}
HXLINE(1902)			if (::hx::IsNull( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic) )) {
HXLINE(1904)				if ((::PlayState_obj::storyWeek == 6)) {
HXLINE(1907)					noteTypeCheck = HX_("pixel",86,c6,a3,c2);
            				}
            			}
            			else {
HXLINE(1912)				noteTypeCheck = ( (::String)(::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) );
            			}
HXLINE(1915)			if ((noteTypeCheck == HX_("pixel",86,c6,a3,c2))) {
HXLINE(1918)				babyArrow->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/pixelUI/arrows-pixels",b7,c3,c7,09)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("week6",c2,95,be,c7)),true,17,17,null(),null());
HXLINE(1919)				babyArrow->animation->add(HX_("green",c3,0e,ed,99),::Array_obj< int >::fromData( _hx_array_data_46c2835d_73,1),null(),null(),null(),null());
HXLINE(1920)				babyArrow->animation->add(HX_("red",51,d9,56,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_74,1),null(),null(),null(),null());
HXLINE(1921)				babyArrow->animation->add(HX_("blue",9a,42,19,41),::Array_obj< int >::fromData( _hx_array_data_46c2835d_75,1),null(),null(),null(),null());
HXLINE(1922)				babyArrow->animation->add(HX_("purplel",b0,7e,2d,e7),::Array_obj< int >::fromData( _hx_array_data_46c2835d_76,1),null(),null(),null(),null());
HXLINE(1924)				Float _hx_tmp = babyArrow->get_width();
HXDLIN(1924)				babyArrow->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
HXLINE(1925)				babyArrow->updateHitbox();
HXLINE(1926)				babyArrow->set_antialiasing(false);
HXLINE(1928)				{
HXLINE(1928)					 ::StaticArrow _g = babyArrow;
HXDLIN(1928)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE(1929)				babyArrow->animation->add(HX_("static",ae,dc,fb,05),::Array_obj< int >::__new(1)->init(0,i),null(),null(),null(),null());
HXLINE(1930)				babyArrow->animation->add(HX_("pressed",a2,d2,e6,39),::Array_obj< int >::__new(2)->init(0,(4 + i))->init(1,(8 + i)),12,false,null(),null());
HXLINE(1931)				babyArrow->animation->add(HX_("confirm",00,9d,39,10),::Array_obj< int >::__new(2)->init(0,(12 + i))->init(1,(16 + i)),24,false,null(),null());
HXLINE(1933)				{
HXLINE(1935)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 0),::Array_obj< int >::fromData( _hx_array_data_46c2835d_77,2),24,false,null(),null());
HXDLIN(1935)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 1),::Array_obj< int >::fromData( _hx_array_data_46c2835d_78,2),24,false,null(),null());
HXDLIN(1935)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 2),::Array_obj< int >::fromData( _hx_array_data_46c2835d_79,2),24,false,null(),null());
HXDLIN(1935)					babyArrow->animation->add((HX_("dirCon",f5,88,50,bc) + 3),::Array_obj< int >::fromData( _hx_array_data_46c2835d_80,2),24,false,null(),null());
            				}
            			}
            			else {
HXLINE(1939)				::String library = null();
HXDLIN(1939)				bool usecahce = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXDLIN(1939)				::String _hx_tmp = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN(1939)				babyArrow->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("NOTE_assets",70,3c,09,f7)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE(1940)				{
HXLINE(1941)					{
HXLINE(1942)						babyArrow->animation->addByPrefix(this->dataColor->__get(0),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(0)),null(),null(),null(),null());
HXLINE(1943)						 ::flixel::animation::FlxAnimationController babyArrow1 = babyArrow->animation;
HXDLIN(1943)						babyArrow1->addByPrefix((HX_("dirCon",f5,88,50,bc) + 0),(this->dataSuffix->__get(0).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1941)					{
HXLINE(1942)						babyArrow->animation->addByPrefix(this->dataColor->__get(1),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(1)),null(),null(),null(),null());
HXLINE(1943)						 ::flixel::animation::FlxAnimationController babyArrow2 = babyArrow->animation;
HXDLIN(1943)						babyArrow2->addByPrefix((HX_("dirCon",f5,88,50,bc) + 1),(this->dataSuffix->__get(1).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1941)					{
HXLINE(1942)						babyArrow->animation->addByPrefix(this->dataColor->__get(2),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(2)),null(),null(),null(),null());
HXLINE(1943)						 ::flixel::animation::FlxAnimationController babyArrow3 = babyArrow->animation;
HXDLIN(1943)						babyArrow3->addByPrefix((HX_("dirCon",f5,88,50,bc) + 2),(this->dataSuffix->__get(2).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
HXLINE(1941)					{
HXLINE(1942)						babyArrow->animation->addByPrefix(this->dataColor->__get(3),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(3)),null(),null(),null(),null());
HXLINE(1943)						 ::flixel::animation::FlxAnimationController babyArrow4 = babyArrow->animation;
HXDLIN(1943)						babyArrow4->addByPrefix((HX_("dirCon",f5,88,50,bc) + 3),(this->dataSuffix->__get(3).toLowerCase() + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
            					}
            				}
HXLINE(1946)				::String lowerDir = this->dataSuffix->__get(i).toLowerCase();
HXLINE(1948)				babyArrow->animation->addByPrefix(HX_("static",ae,dc,fb,05),(HX_("arrow",c9,79,8f,25) + this->dataSuffix->__get(i)),null(),null(),null(),null());
HXLINE(1949)				babyArrow->animation->addByPrefix(HX_("pressed",a2,d2,e6,39),(lowerDir + HX_(" press",63,df,f3,93)),24,false,null(),null());
HXLINE(1950)				babyArrow->animation->addByPrefix(HX_("confirm",00,9d,39,10),(lowerDir + HX_(" confirm",e0,e0,87,36)),24,false,null(),null());
HXLINE(1952)				{
HXLINE(1952)					 ::StaticArrow _g = babyArrow;
HXDLIN(1952)					_g->set_x((_g->x + (::Note_obj::swagWidth * ( (Float)(i) ))));
            				}
HXLINE(1954)				babyArrow->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(1955)				babyArrow->setGraphicSize(::Std_obj::_hx_int((babyArrow->get_width() * ((Float)0.7))),null());
            			}
HXLINE(1958)			babyArrow->updateHitbox();
HXLINE(1959)			babyArrow->scrollFactor->set(null(),null());
HXLINE(1961)			babyArrow->set_alpha(( (Float)(0) ));
HXLINE(1962)			if (!(::PlayState_obj::isStoryMode)) {
HXLINE(1964)				{
HXLINE(1964)					 ::StaticArrow _g = babyArrow;
HXDLIN(1964)					_g->set_y((_g->y - ( (Float)(10) )));
            				}
HXLINE(1966)				::flixel::tweens::FlxTween_obj::tween(babyArrow, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("y",79,00,00,00),(babyArrow->y + 10))
            					->setFixed(1,HX_("alpha",5e,a7,96,21),((Float)0.7))),1, ::Dynamic(::hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("startDelay",c1,af,3d,f3),(((Float)0.5) + (((Float)0.2) * ( (Float)(i) ))))
            					->setFixed(1,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())));
            			}
HXLINE(1969)			babyArrow->ID = i;
HXLINE(1971)			switch((int)(player)){
            				case (int)0: {
HXLINE(1974)					::PlayState_obj::cpuStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            				case (int)1: {
HXLINE(1976)					::PlayState_obj::playerStrums->add(babyArrow).StaticCast<  ::StaticArrow >();
            				}
            				break;
            			}
HXLINE(1979)			babyArrow->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(1980)			{
HXLINE(1980)				 ::StaticArrow _g1 = babyArrow;
HXDLIN(1980)				_g1->set_x((_g1->x + 50));
            			}
HXLINE(1981)			{
HXLINE(1981)				 ::StaticArrow _g2 = babyArrow;
HXDLIN(1981)				_g2->set_x((_g2->x + ((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) * ( (Float)(player) ))));
            			}
HXLINE(1983)			if (::PlayStateChangeables_obj::Optimize) {
HXLINE(1984)				 ::StaticArrow _g = babyArrow;
HXDLIN(1984)				_g->set_x((_g->x - ( (Float)(275) )));
            			}
HXLINE(1986)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(1991)			::PlayState_obj::strumLineNotes->add(babyArrow).StaticCast<  ::StaticArrow >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,generateStaticArrows,(void))

void PlayState_obj::appearStaticArrows(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite babyArrow){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1999_appearStaticArrows)
HXLINE(1999)			if (::PlayState_obj::isStoryMode) {
HXLINE(2000)				babyArrow->set_alpha(((Float)0.7));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1997_appearStaticArrows)
HXDLIN(1997)		::PlayState_obj::strumLineNotes->forEach( ::Dynamic(new _hx_Closure_0()),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,appearStaticArrows,(void))

void PlayState_obj::tweenCamIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2006_tweenCamIn)
HXDLIN(2006)		::flixel::tweens::FlxTween_obj::tween(::flixel::FlxG_obj::camera, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("zoom",13,a3,f8,50),((Float)1.3))),((::Conductor_obj::stepCrochet * ( (Float)(4) )) / ( (Float)(1000) )), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::elasticInOut_dyn())));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,tweenCamIn,(void))

void PlayState_obj::openSubState( ::flixel::FlxSubState SubState){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2010_openSubState)
HXLINE(2011)		if (this->paused) {
HXLINE(2013)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2015)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2016)				this->vocals->pause();
            			}
HXLINE(2020)			::String _hx_tmp = ( (::String)(((((HX_("PAUSED on ",af,49,21,f3) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2020)			::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2026)			::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2020)			::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
HXLINE(2033)			if (!(this->startTimer->finished)) {
HXLINE(2034)				this->startTimer->active = false;
            			}
            		}
HXLINE(2037)		this->super::openSubState(SubState);
            	}


void PlayState_obj::closeSubState(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2041_closeSubState)
HXLINE(2042)		if (this->paused) {
HXLINE(2044)			bool _hx_tmp;
HXDLIN(2044)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(2044)				_hx_tmp = !(this->startingSong);
            			}
            			else {
HXLINE(2044)				_hx_tmp = false;
            			}
HXDLIN(2044)			if (_hx_tmp) {
HXLINE(2046)				this->resyncVocals();
            			}
HXLINE(2049)			if (!(this->startTimer->finished)) {
HXLINE(2050)				this->startTimer->active = true;
            			}
HXLINE(2051)			this->paused = false;
HXLINE(2054)			if (this->startTimer->finished) {
HXLINE(2056)				::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2056)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2063)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2056)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,true,(this->songLength - ::Conductor_obj::songPosition));
            			}
            			else {
HXLINE(2074)				::String _hx_tmp = this->detailsText;
HXDLIN(2074)				::String _hx_tmp1 = ( (::String)((((::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2074)				::String _hx_tmp2 = (_hx_tmp1 + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXDLIN(2074)				::DiscordClient_obj::changePresence(_hx_tmp,_hx_tmp2,this->iconRPC,null(),null());
            			}
            		}
HXLINE(2079)		this->super::closeSubState();
            	}


void PlayState_obj::resyncVocals(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2083_resyncVocals)
HXLINE(2084)		this->vocals->pause();
HXLINE(2086)		::flixel::FlxG_obj::sound->music->play(null(),null(),null());
HXLINE(2087)		::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2088)		this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
HXLINE(2089)		this->vocals->play(null(),null(),null());
HXLINE(2092)		{
HXLINE(2093)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(2094)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2095)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(2100)		::String _hx_tmp = ( (::String)((((((this->detailsText + HX_(" ",20,00,00,00)) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2100)		::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2107)		::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2100)		::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resyncVocals,(void))

void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2137_update)
HXLINE(2136)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2139)		this->perfectMode = false;
HXLINE(2143)		if (::hx::IsNotNull( this->unspawnNotes->__get(0).StaticCast<  ::Note >() )) {
HXLINE(2146)			if (((this->unspawnNotes->__get(0).StaticCast<  ::Note >()->strumTime - ::Conductor_obj::songPosition) < (( (Float)(14000) ) * ::PlayState_obj::songMultiplier))) {
HXLINE(2148)				 ::Note dunceNote = this->unspawnNotes->__get(0).StaticCast<  ::Note >();
HXLINE(2149)				this->notes->add(dunceNote).StaticCast<  ::Note >();
HXLINE(2151)				if (this->executeModchart) {
HXLINE(2153)					 ::LuaNote_obj::__alloc( HX_CTX ,dunceNote,this->currentLuaIndex);
HXLINE(2154)					dunceNote->luaID = this->currentLuaIndex;
            				}
HXLINE(2157)				if (this->executeModchart) {
HXLINE(2159)					if (!(dunceNote->isSustainNote)) {
HXLINE(2160)						dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camNotes));
            					}
            					else {
HXLINE(2162)						dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camSustains));
            					}
            				}
            				else {
HXLINE(2166)					dunceNote->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
            				}
HXLINE(2169)				int index = this->unspawnNotes->indexOf(dunceNote,null());
HXLINE(2170)				this->unspawnNotes->removeRange(index,1);
HXLINE(2171)				this->currentLuaIndex++;
            			}
            		}
HXLINE(2177)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2180)			::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
HXLINE(2181)			if (::hx::IsNotNull( this->vocals->_channel )) {
HXLINE(2182)				::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,::PlayState_obj::songMultiplier);
            			}
            		}
HXLINE(2187)		if (this->generatedMusic) {
HXLINE(2189)			bool _hx_tmp;
HXDLIN(2189)			if (this->songStarted) {
HXLINE(2189)				_hx_tmp = !(this->endingSong);
            			}
            			else {
HXLINE(2189)				_hx_tmp = false;
            			}
HXDLIN(2189)			if (_hx_tmp) {
HXLINE(2194)				bool _hx_tmp;
HXDLIN(2194)				if ((this->unspawnNotes->length == 0)) {
HXLINE(2194)					_hx_tmp = ((::flixel::FlxG_obj::sound->music->_length - ::Conductor_obj::songPosition) <= 100);
            				}
            				else {
HXLINE(2194)					_hx_tmp = false;
            				}
HXDLIN(2194)				if (_hx_tmp) {
HXLINE(2196)					this->endSong();
            				}
            			}
            		}
HXLINE(2202)		if ((this->updateFrame == 4)) {
HXLINE(2204)			::TimingStruct_obj::clearTimings();
HXLINE(2206)			int currentIndex = 0;
HXLINE(2207)			{
HXLINE(2207)				int _g = 0;
HXDLIN(2207)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2207)				while((_g < _g1->length)){
HXLINE(2207)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2207)					_g = (_g + 1);
HXLINE(2209)					if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(2211)						Float beat = i->position;
HXLINE(2213)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(2215)						Float bpm = i->value;
HXLINE(2217)						::TimingStruct_obj::addTiming(beat,bpm,endBeat,( (Float)(0) ));
HXLINE(2219)						if ((currentIndex != 0)) {
HXLINE(2221)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(2222)							data->endBeat = beat;
HXLINE(2223)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(2224)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2225)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(2226)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE(2229)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE(2233)			this->updateFrame++;
            		}
            		else {
HXLINE(2235)			if ((this->updateFrame != 5)) {
HXLINE(2236)				this->updateFrame++;
            			}
            		}
HXLINE(2239)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2242)			 ::TimingStruct timingSeg = ::TimingStruct_obj::getTimingAtBeat(this->curDecimalBeat);
HXLINE(2244)			if (::hx::IsNotNull( timingSeg )) {
HXLINE(2247)				Float timingSegBpm = timingSeg->bpm;
HXLINE(2249)				if ((timingSegBpm != ::Conductor_obj::bpm)) {
HXLINE(2252)					::Conductor_obj::changeBPM(timingSegBpm,false);
HXLINE(2253)					::Conductor_obj::crochet = (((( (Float)(60) ) / timingSegBpm) * ( (Float)(1000) )) / ::PlayState_obj::songMultiplier);
HXLINE(2254)					::Conductor_obj::stepCrochet = (::Conductor_obj::crochet / ( (Float)(4) ));
            				}
            			}
HXLINE(2259)			Float newScroll = ((Float)1.0);
HXLINE(2261)			{
HXLINE(2261)				int _g = 0;
HXDLIN(2261)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2261)				while((_g < _g1->length)){
HXLINE(2261)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2261)					_g = (_g + 1);
HXLINE(2263)					if ((i->type == HX_("Scroll Speed Change",fc,2c,18,61))) {
HXLINE(2266)						bool _hx_tmp;
HXDLIN(2266)						if ((i->position <= this->curDecimalBeat)) {
HXLINE(2266)							_hx_tmp = !(this->pastScrollChanges->contains(i));
            						}
            						else {
HXLINE(2266)							_hx_tmp = false;
            						}
HXDLIN(2266)						if (_hx_tmp) {
HXLINE(2268)							this->pastScrollChanges->push(i);
HXLINE(2270)							newScroll = i->value;
            						}
            					}
            				}
            			}
HXLINE(2275)			if ((newScroll != 0)) {
HXLINE(2276)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayStateChangeables >();
HXDLIN(2276)				::PlayStateChangeables_obj::scrollSpeed = (::PlayStateChangeables_obj::scrollSpeed * newScroll);
            			}
            		}
HXLINE(2279)		bool _hx_tmp;
HXDLIN(2279)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(2279)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2279)			_hx_tmp = _this->keyManager->checkStatus(49,_this->status);
            		}
            		else {
HXLINE(2279)			_hx_tmp = false;
            		}
HXDLIN(2279)		if (_hx_tmp) {
HXLINE(2280)			this->camHUD->set_visible(!(this->camHUD->visible));
            		}
HXLINE(2282)		bool _hx_tmp1;
HXDLIN(2282)		bool _hx_tmp2;
HXDLIN(2282)		if (this->useVideo) {
HXLINE(2282)			_hx_tmp2 = ::hx::IsNotNull( ::GlobalVideo_obj::get() );
            		}
            		else {
HXLINE(2282)			_hx_tmp2 = false;
            		}
HXDLIN(2282)		if (_hx_tmp2) {
HXLINE(2282)			_hx_tmp1 = !(this->stopUpdate);
            		}
            		else {
HXLINE(2282)			_hx_tmp1 = false;
            		}
HXDLIN(2282)		if (_hx_tmp1) {
HXLINE(2284)			bool _hx_tmp;
HXDLIN(2284)			if (( (bool)(::GlobalVideo_obj::get()->__Field(HX_("ended",fa,48,7a,70),::hx::paccDynamic)) )) {
HXLINE(2284)				_hx_tmp = !(this->removedVideo);
            			}
            			else {
HXLINE(2284)				_hx_tmp = false;
            			}
HXDLIN(2284)			if (_hx_tmp) {
HXLINE(2286)				this->remove(this->videoSprite,null());
HXLINE(2287)				::openfl::Lib_obj::get_current()->stage->window->onFocusOut->remove(this->focusOut_dyn());
HXLINE(2288)				::openfl::Lib_obj::get_current()->stage->window->onFocusIn->remove(this->focusIn_dyn());
HXLINE(2289)				this->removedVideo = true;
            			}
            		}
HXLINE(2294)		bool _hx_tmp3;
HXDLIN(2294)		bool _hx_tmp4;
HXDLIN(2294)		if (this->executeModchart) {
HXLINE(2294)			_hx_tmp4 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(2294)			_hx_tmp4 = false;
            		}
HXDLIN(2294)		if (_hx_tmp4) {
HXLINE(2294)			_hx_tmp3 = this->songStarted;
            		}
            		else {
HXLINE(2294)			_hx_tmp3 = false;
            		}
HXDLIN(2294)		if (_hx_tmp3) {
HXLINE(2296)			::PlayState_obj::luaModchart->setVar(HX_("songPos",bf,44,27,aa),::Conductor_obj::songPosition);
HXLINE(2297)			::PlayState_obj::luaModchart->setVar(HX_("hudZoom",6a,47,5d,7c),this->camHUD->zoom);
HXLINE(2298)			 ::ModchartState _hx_tmp = ::PlayState_obj::luaModchart;
HXDLIN(2298)			_hx_tmp->setVar(HX_("curBeat",16,53,29,ac),::HelperFunctions_obj::truncateFloat(this->curDecimalBeat,3));
HXLINE(2299)			::PlayState_obj::luaModchart->setVar(HX_("cameraZoom",58,cc,16,b7),::flixel::FlxG_obj::camera->zoom);
HXLINE(2301)			::PlayState_obj::luaModchart->executeState(HX_("update",09,86,05,87),::cpp::VirtualArray_obj::__new(1)->init(0,elapsed));
HXLINE(2303)			{
HXLINE(2303)				 ::Dynamic _g =  ::haxe::iterators::MapKeyValueIterator_obj::__alloc( HX_CTX ,::PlayState_obj::luaModchart->luaWiggles);
HXDLIN(2303)				while(( (bool)(_g->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2303)					 ::Dynamic _g1 = _g->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)();
HXDLIN(2303)					::String key = ( (::String)(_g1->__Field(HX_("key",9f,89,51,00),::hx::paccDynamic)) );
HXDLIN(2303)					 ::WiggleEffect value = ( ( ::WiggleEffect)(_g1->__Field(HX_("value",71,7f,b8,31),::hx::paccDynamic)) );
HXLINE(2306)					value->update(elapsed);
            				}
            			}
HXLINE(2309)			::PlayStateChangeables_obj::useDownscroll = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("downscroll",ef,45,d4,4f),HX_("bool",2a,84,1b,41))) );
HXLINE(2318)			 ::flixel::FlxCamera _hx_tmp1 = ::flixel::FlxG_obj::camera;
HXDLIN(2318)			_hx_tmp1->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("cameraAngle",ee,36,28,17),HX_("float",9c,c5,96,02))) ));
HXLINE(2319)			 ::flixel::FlxCamera _hx_tmp2 = this->camHUD;
HXDLIN(2319)			_hx_tmp2->set_angle(( (Float)(::PlayState_obj::luaModchart->getVar(HX_("camHudAngle",cb,c2,43,4c),HX_("float",9c,c5,96,02))) ));
HXLINE(2321)			if (( (bool)(::PlayState_obj::luaModchart->getVar(HX_("showOnlyStrums",f3,ec,e4,3c),HX_("bool",2a,84,1b,41))) )) {
HXLINE(2323)				this->healthBarBG->set_visible(false);
HXLINE(2324)				this->kadeEngineWatermark->set_visible(false);
HXLINE(2325)				this->healthBar->set_visible(false);
HXLINE(2326)				this->iconP1->set_visible(false);
HXLINE(2327)				this->iconP2->set_visible(false);
HXLINE(2328)				this->scoreTxt->set_visible(false);
            			}
            			else {
HXLINE(2332)				this->healthBarBG->set_visible(true);
HXLINE(2333)				this->kadeEngineWatermark->set_visible(true);
HXLINE(2334)				this->healthBar->set_visible(true);
HXLINE(2335)				this->iconP1->set_visible(true);
HXLINE(2336)				this->iconP2->set_visible(true);
HXLINE(2337)				this->scoreTxt->set_visible(true);
            			}
HXLINE(2340)			bool p1 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine1Visible",1e,97,fd,b5),HX_("bool",2a,84,1b,41))) );
HXLINE(2341)			bool p2 = ( (bool)(::PlayState_obj::luaModchart->getVar(HX_("strumLine2Visible",3d,09,30,ef),HX_("bool",2a,84,1b,41))) );
HXLINE(2343)			{
HXLINE(2344)				{
HXLINE(2345)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(0)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2346)					if ((0 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2347)						Dynamic( ::PlayState_obj::playerStrums->members->__get(0)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2344)				{
HXLINE(2345)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(1)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2346)					if ((1 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2347)						Dynamic( ::PlayState_obj::playerStrums->members->__get(1)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2344)				{
HXLINE(2345)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(2)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2346)					if ((2 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2347)						Dynamic( ::PlayState_obj::playerStrums->members->__get(2)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
HXLINE(2344)				{
HXLINE(2345)					Dynamic( ::PlayState_obj::strumLineNotes->members->__get(3)).StaticCast<  ::StaticArrow >()->set_visible(p1);
HXLINE(2346)					if ((3 <= ::PlayState_obj::playerStrums->length)) {
HXLINE(2347)						Dynamic( ::PlayState_obj::playerStrums->members->__get(3)).StaticCast<  ::StaticArrow >()->set_visible(p2);
            					}
            				}
            			}
HXLINE(2350)			this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2351)			this->camNotes->set_x(this->camHUD->x);
HXLINE(2352)			this->camNotes->set_y(this->camHUD->y);
HXLINE(2353)			this->camNotes->set_angle(this->camHUD->angle);
HXLINE(2354)			this->camSustains->set_zoom(this->camHUD->zoom);
HXLINE(2355)			this->camSustains->set_x(this->camHUD->x);
HXLINE(2356)			this->camSustains->set_y(this->camHUD->y);
HXLINE(2357)			this->camSustains->set_angle(this->camHUD->angle);
            		}
HXLINE(2364)		{
HXLINE(2365)			int balls = (this->notesHitArray->length - 1);
HXLINE(2366)			while((balls >= 0)){
HXLINE(2368)				 ::Date cock = this->notesHitArray->__get(balls).StaticCast<  ::Date >();
HXLINE(2369)				bool _hx_tmp;
HXDLIN(2369)				if (::hx::IsNotNull( cock )) {
HXLINE(2369)					Float _hx_tmp1 = (cock->getTime() + 1000);
HXDLIN(2369)					_hx_tmp = (_hx_tmp1 < ::Date_obj::now()->getTime());
            				}
            				else {
HXLINE(2369)					_hx_tmp = false;
            				}
HXDLIN(2369)				if (_hx_tmp) {
HXLINE(2370)					this->notesHitArray->remove(cock);
            				}
            				else {
HXLINE(2372)					balls = 0;
            				}
HXLINE(2373)				balls = (balls - 1);
            			}
HXLINE(2375)			this->nps = this->notesHitArray->length;
HXLINE(2376)			if ((this->nps > this->maxNPS)) {
HXLINE(2377)				this->maxNPS = this->nps;
            			}
            		}
HXLINE(2380)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2380)		if (_this->keyManager->checkStatus(57,_this->status)) {
HXLINE(2381)			this->iconP1->swapOldIcon();
            		}
HXLINE(2384)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(2385)			if ((::PlayState_obj::Stage->curStage == HX_("philly",28,77,5e,ef))) {
HXLINE(2388)				bool _hx_tmp;
HXDLIN(2388)				if (this->trainMoving) {
HXLINE(2388)					_hx_tmp = !(::PlayStateChangeables_obj::Optimize);
            				}
            				else {
HXLINE(2388)					_hx_tmp = false;
            				}
HXDLIN(2388)				if (_hx_tmp) {
HXLINE(2390)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2390)					_hx_tmp->trainFrameTiming = (_hx_tmp->trainFrameTiming + elapsed);
HXLINE(2392)					if ((this->trainFrameTiming >= ((Float)0.041666666666666664))) {
HXLINE(2394)						this->updateTrainPos();
HXLINE(2395)						this->trainFrameTiming = ( (Float)(0) );
            					}
            				}
            			}
            		}
HXLINE(2402)		int lengthInPx = this->scoreTxt->textField->get_length();
HXDLIN(2402)		int lengthInPx1 = (lengthInPx * this->scoreTxt->frameHeight);
HXLINE(2404)		this->scoreTxt->set_x(((this->originalX - (( (Float)(lengthInPx1) ) / ( (Float)(2) ))) + 335));
HXLINE(2406)		bool _hx_tmp5;
HXDLIN(2406)		bool _hx_tmp6;
HXDLIN(2406)		bool _hx_tmp7;
HXDLIN(2406)		if (::PlayerSettings_obj::player1->controls->_pause->check()) {
HXLINE(2406)			_hx_tmp7 = this->startedCountdown;
            		}
            		else {
HXLINE(2406)			_hx_tmp7 = false;
            		}
HXDLIN(2406)		if (_hx_tmp7) {
HXLINE(2406)			_hx_tmp6 = this->canPause;
            		}
            		else {
HXLINE(2406)			_hx_tmp6 = false;
            		}
HXDLIN(2406)		if (_hx_tmp6) {
HXLINE(2406)			_hx_tmp5 = !(this->cannotDie);
            		}
            		else {
HXLINE(2406)			_hx_tmp5 = false;
            		}
HXDLIN(2406)		if (_hx_tmp5) {
HXLINE(2408)			this->persistentUpdate = false;
HXLINE(2409)			this->persistentDraw = true;
HXLINE(2410)			this->paused = true;
HXLINE(2413)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < ((Float)0.1))) {
HXLINE(2416)				{
HXLINE(2416)					 ::flixel::FlxState nextState =  ::GitarooPause_obj::__alloc( HX_CTX );
HXDLIN(2416)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2416)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE(2417)				this->clean();
            			}
            			else {
HXLINE(2420)				Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2420)				this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            			}
            		}
HXLINE(2423)		bool _hx_tmp8;
HXDLIN(2423)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2423)		if (_this1->keyManager->checkStatus(55,_this1->status)) {
HXLINE(2423)			_hx_tmp8 = this->songStarted;
            		}
            		else {
HXLINE(2423)			_hx_tmp8 = false;
            		}
HXDLIN(2423)		if (_hx_tmp8) {
HXLINE(2425)			::PlayState_obj::songMultiplier = ( (Float)(1) );
HXLINE(2426)			if (this->useVideo) {
HXLINE(2428)				::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(2429)				this->remove(this->videoSprite,null());
HXLINE(2431)				::openfl::Lib_obj::get_current()->stage->window->onFocusOut->remove(this->focusOut_dyn());
HXLINE(2432)				::openfl::Lib_obj::get_current()->stage->window->onFocusIn->remove(this->focusIn_dyn());
HXLINE(2434)				this->removedVideo = true;
            			}
HXLINE(2436)			this->cannotDie = true;
HXLINE(2438)			{
HXLINE(2438)				 ::flixel::FlxState nextState =  ::ChartingState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2438)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2438)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(2439)			this->clean();
HXLINE(2440)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(2441)			::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(2443)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2445)				::PlayState_obj::luaModchart->die();
HXLINE(2446)				::PlayState_obj::luaModchart = null();
            			}
            		}
HXLINE(2455)		 ::HealthIcon _hx_tmp9 = this->iconP1;
HXDLIN(2455)		_hx_tmp9->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP1->get_width() - ( (Float)(150) ))))),null());
HXLINE(2456)		 ::HealthIcon _hx_tmp10 = this->iconP2;
HXDLIN(2456)		_hx_tmp10->setGraphicSize(::Std_obj::_hx_int((150 + (((Float)0.50) * (this->iconP2->get_width() - ( (Float)(150) ))))),null());
HXLINE(2461)		int iconOffset = 26;
HXLINE(2463)		 ::HealthIcon _hx_tmp11 = this->iconP1;
HXDLIN(2463)		Float _hx_tmp12 = this->healthBar->x;
HXDLIN(2463)		Float _hx_tmp13 = this->healthBar->get_width();
HXDLIN(2463)		_hx_tmp11->set_x((_hx_tmp12 + ((_hx_tmp13 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))) - ( (Float)(iconOffset) ))));
HXLINE(2464)		 ::HealthIcon _hx_tmp14 = this->iconP2;
HXDLIN(2464)		Float _hx_tmp15 = this->healthBar->x;
HXDLIN(2464)		Float _hx_tmp16 = this->healthBar->get_width();
HXDLIN(2464)		Float _hx_tmp17 = (_hx_tmp15 + (_hx_tmp16 * (::flixel::math::FlxMath_obj::remapToRange(this->healthBar->get_percent(),( (Float)(0) ),( (Float)(100) ),( (Float)(100) ),( (Float)(0) )) * ((Float)0.01))));
HXDLIN(2464)		_hx_tmp14->set_x((_hx_tmp17 - (this->iconP2->get_width() - ( (Float)(iconOffset) ))));
HXLINE(2466)		if ((this->health > 2)) {
HXLINE(2467)			this->health = ( (Float)(2) );
            		}
HXLINE(2470)		if ((this->healthBar->get_percent() < 20)) {
HXLINE(2471)			this->iconP1->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(2473)			this->iconP1->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2475)		if ((this->healthBar->get_percent() > 80)) {
HXLINE(2476)			this->iconP2->animation->_curAnim->set_curFrame(1);
            		}
            		else {
HXLINE(2478)			this->iconP2->animation->_curAnim->set_curFrame(0);
            		}
HXLINE(2596)		if (this->startingSong) {
HXLINE(2598)			if (this->startedCountdown) {
HXLINE(2600)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2600)				::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2601)				::Conductor_obj::rawPosition = ::Conductor_obj::songPosition;
HXLINE(2602)				if ((::Conductor_obj::songPosition >= 0)) {
HXLINE(2603)					this->startSong();
            				}
            			}
            		}
            		else {
HXLINE(2609)			 ::Dynamic _hx_tmp = ::hx::ClassOf< ::Conductor >();
HXDLIN(2609)			::Conductor_obj::songPosition = (::Conductor_obj::songPosition + (::flixel::FlxG_obj::elapsed * ( (Float)(1000) )));
HXLINE(2610)			::Conductor_obj::rawPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2615)			this->songPositionBar = ((::Conductor_obj::songPosition - this->songLength) / ( (Float)(1000) ));
HXLINE(2617)			this->currentSection = this->getSectionByTime(::Conductor_obj::songPosition);
HXLINE(2619)			if (!(this->paused)) {
HXLINE(2621)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2621)				_hx_tmp->songTime = (_hx_tmp->songTime + (::flixel::FlxG_obj::game->ticks - this->previousFrameTime));
HXLINE(2622)				this->previousFrameTime = ::flixel::FlxG_obj::game->ticks;
HXLINE(2625)				if ((::Conductor_obj::lastSongPos != ::Conductor_obj::songPosition)) {
HXLINE(2627)					this->songTime = ((this->songTime + ::Conductor_obj::songPosition) / ( (Float)(2) ));
HXLINE(2628)					::Conductor_obj::lastSongPos = ::Conductor_obj::songPosition;
            				}
            			}
            		}
HXLINE(2637)		bool _hx_tmp18;
HXDLIN(2637)		if (this->generatedMusic) {
HXLINE(2637)			_hx_tmp18 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(2637)			_hx_tmp18 = false;
            		}
HXDLIN(2637)		if (_hx_tmp18) {
HXLINE(2641)			if (this->allowedToHeadbang) {
HXLINE(2644)				bool _hx_tmp;
HXDLIN(2644)				bool _hx_tmp1;
HXDLIN(2644)				if ((::PlayState_obj::gf->animation->_curAnim->name != HX_("danceLeft",da,cc,f9,df))) {
HXLINE(2644)					_hx_tmp1 = (::PlayState_obj::gf->animation->_curAnim->name == HX_("danceRight",a9,7f,a6,91));
            				}
            				else {
HXLINE(2644)					_hx_tmp1 = true;
            				}
HXDLIN(2644)				if (!(_hx_tmp1)) {
HXLINE(2644)					_hx_tmp = (::PlayState_obj::gf->animation->_curAnim->name == HX_("idle",14,a7,b3,45));
            				}
            				else {
HXLINE(2644)					_hx_tmp = true;
            				}
HXDLIN(2644)				if (_hx_tmp) {
HXLINE(2649)					::String _hx_switch_0 = this->curSong;
            					if (  (_hx_switch_0==HX_("Blammed",76,2a,51,09)) ){
HXLINE(2692)						bool _hx_tmp;
HXDLIN(2692)						if ((this->curBeat > 30)) {
HXLINE(2692)							_hx_tmp = (this->curBeat < 190);
            						}
            						else {
HXLINE(2692)							_hx_tmp = false;
            						}
HXDLIN(2692)						if (_hx_tmp) {
HXLINE(2694)							bool _hx_tmp;
HXDLIN(2694)							if ((this->curBeat >= 90)) {
HXLINE(2694)								_hx_tmp = (this->curBeat > 128);
            							}
            							else {
HXLINE(2694)								_hx_tmp = true;
            							}
HXDLIN(2694)							if (_hx_tmp) {
HXLINE(2696)								if ((::hx::Mod(this->curBeat,4) == 2)) {
HXLINE(2698)									if (!(this->triggeredAlready)) {
HXLINE(2700)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2701)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2705)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2692)						goto _hx_goto_91;
            					}
            					if (  (_hx_switch_0==HX_("Bopeebo",90,29,16,da)) ){
HXLINE(2676)						bool _hx_tmp;
HXDLIN(2676)						if ((this->curBeat > 5)) {
HXLINE(2676)							_hx_tmp = (this->curBeat < 130);
            						}
            						else {
HXLINE(2676)							_hx_tmp = false;
            						}
HXDLIN(2676)						if (_hx_tmp) {
HXLINE(2678)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2680)								if (!(this->triggeredAlready)) {
HXLINE(2682)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2683)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2687)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2676)						goto _hx_goto_91;
            					}
            					if (  (_hx_switch_0==HX_("Cocoa",e9,0c,83,dd)) ){
HXLINE(2711)						if ((this->curBeat < 170)) {
HXLINE(2713)							bool _hx_tmp;
HXDLIN(2713)							if ((this->curBeat >= 65)) {
HXLINE(2713)								if ((this->curBeat > 130)) {
HXLINE(2713)									_hx_tmp = (this->curBeat < 145);
            								}
            								else {
HXLINE(2713)									_hx_tmp = false;
            								}
            							}
            							else {
HXLINE(2713)								_hx_tmp = true;
            							}
HXDLIN(2713)							if (_hx_tmp) {
HXLINE(2715)								if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(2717)									if (!(this->triggeredAlready)) {
HXLINE(2719)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2720)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2724)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2711)						goto _hx_goto_91;
            					}
            					if (  (_hx_switch_0==HX_("Eggnog",81,78,4e,29)) ){
HXLINE(2730)						bool _hx_tmp;
HXDLIN(2730)						bool _hx_tmp1;
HXDLIN(2730)						if ((this->curBeat > 10)) {
HXLINE(2730)							_hx_tmp1 = (this->curBeat != 111);
            						}
            						else {
HXLINE(2730)							_hx_tmp1 = false;
            						}
HXDLIN(2730)						if (_hx_tmp1) {
HXLINE(2730)							_hx_tmp = (this->curBeat < 220);
            						}
            						else {
HXLINE(2730)							_hx_tmp = false;
            						}
HXDLIN(2730)						if (_hx_tmp) {
HXLINE(2732)							if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(2734)								if (!(this->triggeredAlready)) {
HXLINE(2736)									::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2737)									this->triggeredAlready = true;
            								}
            							}
            							else {
HXLINE(2741)								this->triggeredAlready = false;
            							}
            						}
HXLINE(2730)						goto _hx_goto_91;
            					}
            					if (  (_hx_switch_0==HX_("Philly Nice",95,67,fc,96)) ){
HXLINE(2654)						if ((this->curBeat < 250)) {
HXLINE(2657)							bool _hx_tmp;
HXDLIN(2657)							if ((this->curBeat != 184)) {
HXLINE(2657)								_hx_tmp = (this->curBeat != 216);
            							}
            							else {
HXLINE(2657)								_hx_tmp = false;
            							}
HXDLIN(2657)							if (_hx_tmp) {
HXLINE(2659)								if ((::hx::Mod(this->curBeat,16) == 8)) {
HXLINE(2662)									if (!(this->triggeredAlready)) {
HXLINE(2664)										::PlayState_obj::gf->playAnim(HX_("cheer",8d,9a,b6,45),null(),null(),null());
HXLINE(2665)										this->triggeredAlready = true;
            									}
            								}
            								else {
HXLINE(2669)									this->triggeredAlready = false;
            								}
            							}
            						}
HXLINE(2654)						goto _hx_goto_91;
            					}
            					_hx_goto_91:;
            				}
            			}
HXLINE(2749)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2750)				::PlayState_obj::luaModchart->setVar(HX_("mustHit",ca,3b,5d,00), ::Dynamic(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)));
            			}
HXLINE(2753)			bool _hx_tmp;
HXDLIN(2753)			Float _hx_tmp1 = this->camFollow->x;
HXDLIN(2753)			if ((_hx_tmp1 != (::PlayState_obj::dad->getMidpoint(null())->x + 150))) {
HXLINE(2753)				_hx_tmp = !(( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(2753)				_hx_tmp = false;
            			}
HXDLIN(2753)			if (_hx_tmp) {
HXLINE(2755)				int offsetX = 0;
HXLINE(2756)				int offsetY = 0;
HXLINE(2758)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2760)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2761)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2764)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2764)				Float _hx_tmp1 = ((::PlayState_obj::dad->getMidpoint(null())->x + 150) + offsetX);
HXDLIN(2764)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2766)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2767)					::PlayState_obj::luaModchart->executeState(HX_("playerTwoTurn",c8,15,04,05),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2771)				::String _hx_switch_1 = ::PlayState_obj::dad->curCharacter;
            				if (  (_hx_switch_1==HX_("cuz",88,85,4b,00)) ||  (_hx_switch_1==HX_("cuz2",aa,51,c9,41)) ||  (_hx_switch_1==HX_("cuz4",ac,51,c9,41)) ||  (_hx_switch_1==HX_("cuzmad",08,aa,2d,44)) ){
HXLINE(2779)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2779)					_hx_tmp->set_y(::PlayState_obj::dad->getMidpoint(null())->y);
HXLINE(2780)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2780)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x + 350));
HXLINE(2778)					goto _hx_goto_92;
            				}
            				if (  (_hx_switch_1==HX_("mom",cb,16,53,00)) ||  (_hx_switch_1==HX_("mom-car",52,e6,f7,f6)) ){
HXLINE(2774)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2774)					_hx_tmp->set_y(::PlayState_obj::dad->getMidpoint(null())->y);
HXDLIN(2774)					goto _hx_goto_92;
            				}
            				if (  (_hx_switch_1==HX_("senpai",3c,df,8d,6b)) ||  (_hx_switch_1==HX_("senpai-angry",10,7a,b8,25)) ){
HXLINE(2776)					 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2776)					_hx_tmp->set_y((::PlayState_obj::dad->getMidpoint(null())->y - ( (Float)(430) )));
HXLINE(2777)					 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2777)					_hx_tmp1->set_x((::PlayState_obj::dad->getMidpoint(null())->x - ( (Float)(100) )));
HXLINE(2775)					goto _hx_goto_92;
            				}
            				_hx_goto_92:;
            			}
HXLINE(2784)			bool _hx_tmp2;
HXDLIN(2784)			if (( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2784)				Float _hx_tmp = this->camFollow->x;
HXDLIN(2784)				_hx_tmp2 = (_hx_tmp != (::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )));
            			}
            			else {
HXLINE(2784)				_hx_tmp2 = false;
            			}
HXDLIN(2784)			if (_hx_tmp2) {
HXLINE(2786)				int offsetX = 0;
HXLINE(2787)				int offsetY = 0;
HXLINE(2789)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2791)					offsetX = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followXOffset",ba,cc,46,b7),HX_("float",9c,c5,96,02))) );
HXLINE(2792)					offsetY = ( (int)(::PlayState_obj::luaModchart->getVar(HX_("followYOffset",7b,43,dc,e0),HX_("float",9c,c5,96,02))) );
            				}
HXLINE(2795)				 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2795)				Float _hx_tmp1 = ((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(100) )) + offsetX);
HXDLIN(2795)				_hx_tmp->setPosition(_hx_tmp1,((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(100) )) + offsetY));
HXLINE(2798)				if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(2799)					::PlayState_obj::luaModchart->executeState(HX_("playerOneTurn",a2,b7,e0,d9),::cpp::VirtualArray_obj::__new(0));
            				}
HXLINE(2801)				if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(2802)					::String _hx_switch_2 = ::PlayState_obj::Stage->curStage;
            					if (  (_hx_switch_2==HX_("downtown",b4,33,10,97)) ){
HXLINE(2815)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2815)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(350) )));
HXLINE(2816)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2816)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(150) )));
HXLINE(2814)						goto _hx_goto_93;
            					}
            					if (  (_hx_switch_2==HX_("limo",1f,17,b3,47)) ){
HXLINE(2805)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2805)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(300) )));
HXDLIN(2805)						goto _hx_goto_93;
            					}
            					if (  (_hx_switch_2==HX_("mall",d4,3a,56,48)) ){
HXLINE(2807)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2807)						_hx_tmp->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXDLIN(2807)						goto _hx_goto_93;
            					}
            					if (  (_hx_switch_2==HX_("school",74,b8,c8,40)) ){
HXLINE(2809)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2809)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2810)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2810)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2808)						goto _hx_goto_93;
            					}
            					if (  (_hx_switch_2==HX_("schoolEvil",28,a1,f5,f7)) ){
HXLINE(2812)						 ::flixel::FlxObject _hx_tmp = this->camFollow;
HXDLIN(2812)						_hx_tmp->set_x((::PlayState_obj::boyfriend->getMidpoint(null())->x - ( (Float)(200) )));
HXLINE(2813)						 ::flixel::FlxObject _hx_tmp1 = this->camFollow;
HXDLIN(2813)						_hx_tmp1->set_y((::PlayState_obj::boyfriend->getMidpoint(null())->y - ( (Float)(200) )));
HXLINE(2811)						goto _hx_goto_93;
            					}
            					_hx_goto_93:;
            				}
            			}
            		}
HXLINE(2821)		bool _hx_tmp19;
HXDLIN(2821)		if (this->camZooming) {
HXLINE(2821)			_hx_tmp19 = (::Conductor_obj::bpm < 320);
            		}
            		else {
HXLINE(2821)			_hx_tmp19 = false;
            		}
HXDLIN(2821)		if (_hx_tmp19) {
HXLINE(2824)			if ((::Conductor_obj::bpm > 320)) {
HXLINE(2826)				this->camZooming = false;
            			}
HXLINE(2829)			if (::hx::IsLess( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)0.8) )) {
HXLINE(2830)				::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)0.8),::hx::paccDynamic);
            			}
HXLINE(2832)			if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic),((Float)1.2) )) {
HXLINE(2833)				::flixel::FlxG_obj::save->data->__SetField(HX_("zoom",13,a3,f8,50),((Float)1.2),::hx::paccDynamic);
            			}
HXLINE(2835)			if (!(this->executeModchart)) {
HXLINE(2837)				Float a = ::PlayState_obj::Stage->camZoom;
HXDLIN(2837)				::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(2838)				Float a1 = ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("zoom",13,a3,f8,50),::hx::paccDynamic)) );
HXDLIN(2838)				this->camHUD->set_zoom((a1 + (((Float)0.95) * (this->camHUD->zoom - a1))));
HXLINE(2840)				this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2841)				this->camSustains->set_zoom(this->camHUD->zoom);
            			}
            			else {
HXLINE(2845)				Float a = ::PlayState_obj::Stage->camZoom;
HXDLIN(2845)				::flixel::FlxG_obj::camera->set_zoom((a + (((Float)0.95) * (::flixel::FlxG_obj::camera->zoom - a))));
HXLINE(2846)				this->camHUD->set_zoom((1 + (((Float)0.95) * (this->camHUD->zoom - ( (Float)(1) )))));
HXLINE(2848)				this->camNotes->set_zoom(this->camHUD->zoom);
HXLINE(2849)				this->camSustains->set_zoom(this->camHUD->zoom);
            			}
            		}
HXLINE(2857)		if ((this->curSong == HX_("Fresh",4e,f6,b3,99))) {
HXLINE(2859)			switch((int)(this->curBeat)){
            				case (int)16: {
HXLINE(2862)					this->camZooming = true;
HXLINE(2863)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)48: {
HXLINE(2865)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)80: {
HXLINE(2867)					this->gfSpeed = 2;
            				}
            				break;
            				case (int)112: {
HXLINE(2869)					this->gfSpeed = 1;
            				}
            				break;
            				case (int)163: {
            				}
            				break;
            			}
            		}
HXLINE(2876)		if ((this->curSong == HX_("Bopeebo",90,29,16,da))) {
HXLINE(2878)			switch((int)(this->curBeat)){
            				case (int)128: case (int)129: case (int)130: {
HXLINE(2881)					this->vocals->set_volume(( (Float)(0) ));
            				}
            				break;
            			}
            		}
HXLINE(2887)		bool _hx_tmp20;
HXDLIN(2887)		if ((this->health <= 0)) {
HXLINE(2887)			_hx_tmp20 = !(this->cannotDie);
            		}
            		else {
HXLINE(2887)			_hx_tmp20 = false;
            		}
HXDLIN(2887)		if (_hx_tmp20) {
HXLINE(2889)			if (!(this->usedTimeTravel)) {
HXLINE(2891)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(2893)				this->persistentUpdate = false;
HXLINE(2894)				this->persistentDraw = false;
HXLINE(2895)				this->paused = true;
HXLINE(2897)				{
HXLINE(2897)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2897)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2898)				{
HXLINE(2898)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2898)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(2900)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("InstantRespawn",e7,e4,09,0a),::hx::paccDynamic)) )) {
HXLINE(2902)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2902)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2902)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE(2906)					Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2906)					this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            				}
HXLINE(2911)				::String _hx_tmp = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2911)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2917)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2911)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            			}
            			else {
HXLINE(2928)				this->health = ( (Float)(1) );
            			}
            		}
HXLINE(2930)		bool _hx_tmp21;
HXDLIN(2930)		if (!(this->inCutscene)) {
HXLINE(2930)			_hx_tmp21 = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("resetButton",21,e5,f4,79),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2930)			_hx_tmp21 = false;
            		}
HXDLIN(2930)		if (_hx_tmp21) {
HXLINE(2932)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2932)			if (_this->keyManager->checkStatus(82,_this->status)) {
HXLINE(2934)				::PlayState_obj::boyfriend->stunned = true;
HXLINE(2936)				this->persistentUpdate = false;
HXLINE(2937)				this->persistentDraw = false;
HXLINE(2938)				this->paused = true;
HXLINE(2940)				{
HXLINE(2940)					 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2940)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(2941)				{
HXLINE(2941)					 ::flixel::_hx_system::FlxSound _this1 = ::flixel::FlxG_obj::sound->music;
HXDLIN(2941)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(2943)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("InstantRespawn",e7,e4,09,0a),::hx::paccDynamic)) )) {
HXLINE(2945)					 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(2945)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2945)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				else {
HXLINE(2949)					Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(2949)					this->openSubState( ::GameOverSubstate_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            				}
HXLINE(2954)				::String _hx_tmp = ( (::String)(((((HX_("GAME OVER -- ",e2,09,af,80) + ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) + HX_(" (",08,1c,00,00)) + this->storyDifficultyText) + HX_(") ",d7,23,00,00))) );
HXDLIN(2954)				::String _hx_tmp1 = (_hx_tmp + ::Ratings_obj::GenerateLetterRank(this->accuracy));
HXLINE(2960)				::String _hx_tmp2 = ((HX_("\nAcc: ",bd,c1,58,ae) + ::HelperFunctions_obj::truncateFloat(this->accuracy,2)) + HX_("% | Score: ",f9,62,9d,42));
HXLINE(2954)				::DiscordClient_obj::changePresence(_hx_tmp1,(((_hx_tmp2 + this->songScore) + HX_(" | Misses: ",f4,d7,bf,55)) + ::PlayState_obj::misses),this->iconRPC,null(),null());
            			}
            		}
HXLINE(2973)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_2978_update)
HXLINE(2982)				if (!(daNote->modifiedByLua)) {
HXLINE(2984)					if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(2987)						if (daNote->mustPress) {
HXLINE(2989)							 ::Note daNote1 = daNote;
HXDLIN(2989)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(2990)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::rawPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXLINE(2991)							Float _hx_tmp2;
HXDLIN(2991)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(2991)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2991)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(2989)							Float _hx_tmp3 = (_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(2989)							daNote1->set_y((_hx_tmp3 - ( (Float)(daNote->noteYOff) )));
            						}
            						else {
HXLINE(2996)							 ::Note daNote1 = daNote;
HXDLIN(2996)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(2997)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::rawPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(2997)							Float _hx_tmp2;
HXDLIN(2997)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(2997)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(2997)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(2996)							Float _hx_tmp3 = (_hx_tmp + (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(2996)							daNote1->set_y((_hx_tmp3 - ( (Float)(daNote->noteYOff) )));
            						}
HXLINE(2999)						if (daNote->isSustainNote) {
HXLINE(3002)							bool _hx_tmp;
HXDLIN(3002)							if (::StringTools_obj::endsWith(daNote->animation->_curAnim->name,HX_("end",db,03,4d,00))) {
HXLINE(3002)								_hx_tmp = ::hx::IsNotNull( daNote->prevNote );
            							}
            							else {
HXLINE(3002)								_hx_tmp = false;
            							}
HXDLIN(3002)							if (_hx_tmp) {
HXLINE(3004)								 ::Note _g = daNote;
HXDLIN(3004)								Float _g1 = _g->y;
HXDLIN(3004)								_g->set_y((_g1 + daNote->prevNote->get_height()));
            							}
            							else {
HXLINE(3008)								 ::Note _g = daNote;
HXDLIN(3008)								Float _g1 = _g->y;
HXDLIN(3008)								_g->set_y((_g1 + (daNote->get_height() / ( (Float)(2) ))));
            							}
HXLINE(3012)							if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(3014)								bool _hx_tmp;
HXDLIN(3014)								bool _hx_tmp1;
HXDLIN(3014)								bool _hx_tmp2;
HXDLIN(3014)								bool _hx_tmp3;
HXDLIN(3014)								if (daNote->mustPress) {
HXLINE(3014)									_hx_tmp3 = daNote->wasGoodHit;
            								}
            								else {
HXLINE(3014)									_hx_tmp3 = true;
            								}
HXDLIN(3014)								if (!(_hx_tmp3)) {
HXLINE(3014)									_hx_tmp2 = daNote->prevNote->wasGoodHit;
            								}
            								else {
HXLINE(3014)									_hx_tmp2 = true;
            								}
HXDLIN(3014)								if (!(_hx_tmp2)) {
HXLINE(3014)									_hx_tmp1 = holdArray3->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))));
            								}
            								else {
HXLINE(3014)									_hx_tmp1 = true;
            								}
HXDLIN(3014)								if (_hx_tmp1) {
HXLINE(3015)									Float _hx_tmp1 = (daNote->y - (daNote->offset->y * daNote->scale->y));
HXDLIN(3015)									Float _hx_tmp2 = (_hx_tmp1 + daNote->get_height());
HXLINE(3014)									_hx_tmp = (_hx_tmp2 >= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            								}
            								else {
HXLINE(3014)									_hx_tmp = false;
            								}
HXDLIN(3014)								if (_hx_tmp) {
HXLINE(3018)									 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(3019)									swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3022)									swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(3024)									daNote->set_clipRect(swagRect);
            								}
            							}
            							else {
HXLINE(3029)								 ::flixel::math::FlxRect swagRect =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,(daNote->frameWidth * 2),(daNote->frameHeight * 2));
HXLINE(3030)								swagRect->height = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3033)								swagRect->y = (( (Float)(daNote->frameHeight) ) - swagRect->height);
HXLINE(3035)								daNote->set_clipRect(swagRect);
            							}
            						}
            					}
            					else {
HXLINE(3041)						if (daNote->mustPress) {
HXLINE(3042)							 ::Note daNote1 = daNote;
HXDLIN(3042)							Float _hx_tmp = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3043)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::rawPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3043)							Float _hx_tmp2;
HXDLIN(3043)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3043)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3043)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3042)							Float _hx_tmp3 = (_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3042)							daNote1->set_y((_hx_tmp3 + daNote->noteYOff));
            						}
            						else {
HXLINE(3046)							 ::Note daNote1 = daNote;
HXDLIN(3046)							Float _hx_tmp = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y;
HXLINE(3047)							Float _hx_tmp1 = (((Float)0.45) * ((::Conductor_obj::rawPosition - daNote->strumTime) / ::PlayState_obj::songMultiplier));
HXDLIN(3047)							Float _hx_tmp2;
HXDLIN(3047)							if ((::PlayStateChangeables_obj::scrollSpeed == 1)) {
HXLINE(3047)								_hx_tmp2 = ( (Float)(::PlayState_obj::SONG->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) );
            							}
            							else {
HXLINE(3047)								_hx_tmp2 = ::PlayStateChangeables_obj::scrollSpeed;
            							}
HXLINE(3046)							Float _hx_tmp3 = (_hx_tmp - (_hx_tmp1 * ::flixel::math::FlxMath_obj::roundDecimal(_hx_tmp2,2)));
HXDLIN(3046)							daNote1->set_y((_hx_tmp3 + daNote->noteYOff));
            						}
HXLINE(3049)						if (daNote->isSustainNote) {
HXLINE(3051)							{
HXLINE(3051)								 ::Note _g = daNote;
HXDLIN(3051)								Float _g1 = _g->y;
HXDLIN(3051)								_g->set_y((_g1 - (daNote->get_height() / ( (Float)(2) ))));
            							}
HXLINE(3053)							if (!(::PlayStateChangeables_obj::botPlay)) {
HXLINE(3055)								bool _hx_tmp;
HXDLIN(3055)								bool _hx_tmp1;
HXDLIN(3055)								bool _hx_tmp2;
HXDLIN(3055)								bool _hx_tmp3;
HXDLIN(3055)								if (daNote->mustPress) {
HXLINE(3055)									_hx_tmp3 = daNote->wasGoodHit;
            								}
            								else {
HXLINE(3055)									_hx_tmp3 = true;
            								}
HXDLIN(3055)								if (!(_hx_tmp3)) {
HXLINE(3055)									_hx_tmp2 = daNote->prevNote->wasGoodHit;
            								}
            								else {
HXLINE(3055)									_hx_tmp2 = true;
            								}
HXDLIN(3055)								if (!(_hx_tmp2)) {
HXLINE(3055)									_hx_tmp1 = holdArray3->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))));
            								}
            								else {
HXLINE(3055)									_hx_tmp1 = true;
            								}
HXDLIN(3055)								if (_hx_tmp1) {
HXLINE(3055)									_hx_tmp = ((daNote->y + (daNote->offset->y * daNote->scale->y)) <= (_gthis->strumLine->y + (::Note_obj::swagWidth / ( (Float)(2) ))));
            								}
            								else {
HXLINE(3055)									_hx_tmp = false;
            								}
HXDLIN(3055)								if (_hx_tmp) {
HXLINE(3059)									Float swagRect = daNote->get_width();
HXDLIN(3059)									Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(3059)									Float swagRect2 = daNote->get_height();
HXDLIN(3059)									 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(3060)									swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3063)									 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(3063)									swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(3065)									daNote->set_clipRect(swagRect3);
            								}
            							}
            							else {
HXLINE(3070)								Float swagRect = daNote->get_width();
HXDLIN(3070)								Float swagRect1 = (swagRect / daNote->scale->x);
HXDLIN(3070)								Float swagRect2 = daNote->get_height();
HXDLIN(3070)								 ::flixel::math::FlxRect swagRect3 =  ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,0,0,swagRect1,(swagRect2 / daNote->scale->y));
HXLINE(3071)								swagRect3->y = (((Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->y + (::Note_obj::swagWidth / ( (Float)(2) ))) - daNote->y) / daNote->scale->y);
HXLINE(3074)								 ::flixel::math::FlxRect swagRect4 = swagRect3;
HXDLIN(3074)								swagRect4->height = (swagRect4->height - swagRect3->y);
HXLINE(3076)								daNote->set_clipRect(swagRect3);
            							}
            						}
            					}
            				}
HXLINE(3082)				bool _hx_tmp;
HXDLIN(3082)				if (!(daNote->mustPress)) {
HXLINE(3082)					_hx_tmp = daNote->wasGoodHit;
            				}
            				else {
HXLINE(3082)					_hx_tmp = false;
            				}
HXDLIN(3082)				if (_hx_tmp) {
HXLINE(3084)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) )) {
HXLINE(3085)						_gthis->camZooming = true;
            					}
HXLINE(3087)					::String altAnim = HX_("",00,00,00,00);
HXLINE(3089)					if (::hx::IsNotNull( _gthis->currentSection )) {
HXLINE(3091)						if (( (bool)(_gthis->currentSection->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) )) {
HXLINE(3092)							altAnim = HX_("-alt",1c,93,08,1e);
            						}
            					}
HXLINE(3095)					if (daNote->isAlt) {
HXLINE(3097)						altAnim = HX_("-alt",1c,93,08,1e);
            					}
HXLINE(3102)					bool _hx_tmp;
HXDLIN(3102)					if (!(daNote->isParent)) {
HXLINE(3102)						_hx_tmp = ::hx::IsNotNull( daNote->parent );
            					}
            					else {
HXLINE(3102)						_hx_tmp = false;
            					}
HXDLIN(3102)					if (_hx_tmp) {
HXLINE(3104)						if ((daNote->spotInLine != (daNote->parent->children->length - 1))) {
HXLINE(3106)							int singData = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )));
HXLINE(3107)							::PlayState_obj::dad->playAnim(((HX_("sing",4f,96,53,4c) + _gthis->dataSuffix->__get(singData)) + altAnim),true,null(),null());
HXLINE(3109)							_gthis->stabcounter = 1;
HXLINE(3111)							if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            								void _hx_run( ::StaticArrow spr){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3115_update)
HXLINE(3115)									_gthis->pressArrow(spr,spr->ID,daNote);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(3113)								::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_0(_gthis,daNote)),null());
            							}
HXLINE(3130)							if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3131)								::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            							}
HXLINE(3134)							::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(3136)							if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3137)								_gthis->vocals->set_volume(( (Float)(1) ));
            							}
            						}
            					}
            					else {
HXLINE(3142)						int singData = ::Std_obj::_hx_int(::Math_obj::abs(( (Float)(daNote->noteData) )));
HXLINE(3143)						::PlayState_obj::dad->playAnim(((HX_("sing",4f,96,53,4c) + _gthis->dataSuffix->__get(singData)) + altAnim),true,null(),null());
HXLINE(3145)						_gthis->stabcounter = 1;
HXLINE(3147)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            							void _hx_run( ::StaticArrow spr){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3151_update)
HXLINE(3151)								_gthis->pressArrow(spr,spr->ID,daNote);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(3149)							::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_1(_gthis,daNote)),null());
            						}
HXLINE(3166)						if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3167)							::PlayState_obj::luaModchart->executeState(HX_("playerTwoSing",9a,c0,51,04),::cpp::VirtualArray_obj::__new(2)->init(0,::Math_obj::abs(( (Float)(daNote->noteData) )))->init(1,::Conductor_obj::songPosition));
            						}
HXLINE(3170)						::PlayState_obj::dad->holdTimer = ( (Float)(0) );
HXLINE(3172)						if (( (bool)(::PlayState_obj::SONG->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) )) {
HXLINE(3173)							_gthis->vocals->set_volume(( (Float)(1) ));
            						}
            					}
HXLINE(3175)					daNote->set_active(false);
HXLINE(3177)					daNote->kill();
HXLINE(3178)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3179)					daNote->destroy();
            				}
HXLINE(3182)				bool _hx_tmp1;
HXDLIN(3182)				if (daNote->mustPress) {
HXLINE(3182)					_hx_tmp1 = !(daNote->modifiedByLua);
            				}
            				else {
HXLINE(3182)					_hx_tmp1 = false;
            				}
HXDLIN(3182)				if (_hx_tmp1) {
HXLINE(3184)					daNote->set_visible(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->visible);
HXLINE(3185)					daNote->set_x(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->x);
HXLINE(3186)					if (!(daNote->isSustainNote)) {
HXLINE(3187)						daNote->modAngle = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            					}
HXLINE(3188)					if (daNote->sustainActive) {
HXLINE(3190)						if (_gthis->executeModchart) {
HXLINE(3191)							daNote->set_alpha(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->alpha);
            						}
            					}
HXLINE(3193)					daNote->modAngle = Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            				}
            				else {
HXLINE(3195)					bool _hx_tmp;
HXDLIN(3195)					if (!(daNote->wasGoodHit)) {
HXLINE(3195)						_hx_tmp = !(daNote->modifiedByLua);
            					}
            					else {
HXLINE(3195)						_hx_tmp = false;
            					}
HXDLIN(3195)					if (_hx_tmp) {
HXLINE(3197)						daNote->set_visible(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->visible);
HXLINE(3198)						daNote->set_x(Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->x);
HXLINE(3199)						if (!(daNote->isSustainNote)) {
HXLINE(3200)							daNote->modAngle = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            						}
HXLINE(3201)						if (daNote->sustainActive) {
HXLINE(3203)							if (_gthis->executeModchart) {
HXLINE(3204)								daNote->set_alpha(Dynamic( ::PlayState_obj::playerStrums->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->alpha);
            							}
            						}
HXLINE(3206)						daNote->modAngle = Dynamic( ::PlayState_obj::strumLineNotes->members->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(daNote->noteData) ))))).StaticCast<  ::StaticArrow >()->modAngle;
            					}
            				}
HXLINE(3209)				if (daNote->isSustainNote) {
HXLINE(3211)					{
HXLINE(3211)						 ::Note _g = daNote;
HXDLIN(3211)						Float _g1 = _g->x;
HXDLIN(3211)						_g->set_x((_g1 + ((daNote->get_width() / ( (Float)(2) )) + 20)));
            					}
HXLINE(3212)					if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3213)						 ::Note _g = daNote;
HXDLIN(3213)						_g->set_x((_g->x - ( (Float)(11) )));
            					}
            				}
HXLINE(3220)				bool _hx_tmp2;
HXDLIN(3220)				bool _hx_tmp3;
HXDLIN(3220)				if (daNote->isSustainNote) {
HXLINE(3220)					_hx_tmp3 = daNote->wasGoodHit;
            				}
            				else {
HXLINE(3220)					_hx_tmp3 = false;
            				}
HXDLIN(3220)				if (_hx_tmp3) {
HXLINE(3220)					_hx_tmp2 = (::Conductor_obj::songPosition >= daNote->strumTime);
            				}
            				else {
HXLINE(3220)					_hx_tmp2 = false;
            				}
HXDLIN(3220)				if (_hx_tmp2) {
HXLINE(3222)					daNote->kill();
HXLINE(3223)					_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
HXLINE(3224)					daNote->destroy();
            				}
            				else {
HXLINE(3226)					bool _hx_tmp;
HXDLIN(3226)					bool _hx_tmp1;
HXDLIN(3226)					bool _hx_tmp2;
HXDLIN(3226)					bool _hx_tmp3;
HXDLIN(3226)					bool _hx_tmp4;
HXDLIN(3226)					if (daNote->mustPress) {
HXLINE(3226)						_hx_tmp4 = !(::PlayStateChangeables_obj::useDownscroll);
            					}
            					else {
HXLINE(3226)						_hx_tmp4 = false;
            					}
HXDLIN(3226)					if (!(_hx_tmp4)) {
HXLINE(3226)						if (daNote->mustPress) {
HXLINE(3226)							_hx_tmp3 = ::PlayStateChangeables_obj::useDownscroll;
            						}
            						else {
HXLINE(3226)							_hx_tmp3 = false;
            						}
            					}
            					else {
HXLINE(3226)						_hx_tmp3 = true;
            					}
HXDLIN(3226)					if (_hx_tmp3) {
HXLINE(3226)						_hx_tmp2 = daNote->mustPress;
            					}
            					else {
HXLINE(3226)						_hx_tmp2 = false;
            					}
HXDLIN(3226)					if (_hx_tmp2) {
HXLINE(3226)						_hx_tmp1 = (((daNote->strumTime / ::PlayState_obj::songMultiplier) - (::Conductor_obj::songPosition / ::PlayState_obj::songMultiplier)) < -((( (Float)(166) ) * ::Conductor_obj::timeScale)));
            					}
            					else {
HXLINE(3226)						_hx_tmp1 = false;
            					}
HXDLIN(3226)					if (_hx_tmp1) {
HXLINE(3226)						_hx_tmp = _gthis->songStarted;
            					}
            					else {
HXLINE(3226)						_hx_tmp = false;
            					}
HXDLIN(3226)					if (_hx_tmp) {
HXLINE(3230)						bool _hx_tmp;
HXDLIN(3230)						if (daNote->isSustainNote) {
HXLINE(3230)							_hx_tmp = daNote->wasGoodHit;
            						}
            						else {
HXLINE(3230)							_hx_tmp = false;
            						}
HXDLIN(3230)						if (_hx_tmp) {
HXLINE(3232)							daNote->kill();
HXLINE(3233)							_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            						}
            						else {
HXLINE(3238)							bool _hx_tmp;
HXDLIN(3238)							if (::PlayState_obj::loadRep) {
HXLINE(3238)								_hx_tmp = daNote->isSustainNote;
            							}
            							else {
HXLINE(3238)								_hx_tmp = false;
            							}
HXDLIN(3238)							if (_hx_tmp) {
HXLINE(3241)								if (::hx::IsNotNull( _gthis->findByTime(daNote->strumTime) )) {
HXLINE(3242)									 ::PlayState _gthis1 = _gthis;
HXDLIN(3242)									_gthis1->totalNotesHit = (_gthis1->totalNotesHit + 1);
            								}
            								else {
HXLINE(3245)									_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(3246)									bool _hx_tmp;
HXDLIN(3246)									if (::PlayState_obj::theFunne) {
HXLINE(3246)										_hx_tmp = !(daNote->isSustainNote);
            									}
            									else {
HXLINE(3246)										_hx_tmp = false;
            									}
HXDLIN(3246)									if (_hx_tmp) {
HXLINE(3248)										_gthis->noteMiss(daNote->noteData,daNote);
            									}
HXLINE(3250)									if (daNote->isParent) {
HXLINE(3252)										if ((daNote->noteType != 1)) {
HXLINE(3252)											 ::PlayState _gthis1 = _gthis;
HXDLIN(3252)											_gthis1->health = (_gthis1->health - ((Float)0.15));
            										}
HXLINE(3254)										{
HXLINE(3254)											int _g = 0;
HXDLIN(3254)											::Array< ::Dynamic> _g1 = daNote->children;
HXDLIN(3254)											while((_g < _g1->length)){
HXLINE(3254)												 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3254)												_g = (_g + 1);
HXLINE(3256)												i->set_alpha(((Float)0.3));
HXLINE(3257)												i->sustainActive = false;
            											}
            										}
            									}
            									else {
HXLINE(3262)										bool _hx_tmp;
HXDLIN(3262)										bool _hx_tmp1;
HXDLIN(3262)										bool _hx_tmp2;
HXDLIN(3262)										if (!(daNote->wasGoodHit)) {
HXLINE(3262)											_hx_tmp2 = daNote->isSustainNote;
            										}
            										else {
HXLINE(3262)											_hx_tmp2 = false;
            										}
HXDLIN(3262)										if (_hx_tmp2) {
HXLINE(3262)											_hx_tmp1 = daNote->sustainActive;
            										}
            										else {
HXLINE(3262)											_hx_tmp1 = false;
            										}
HXDLIN(3262)										if (_hx_tmp1) {
HXLINE(3262)											_hx_tmp = (daNote->spotInLine != daNote->parent->children->length);
            										}
            										else {
HXLINE(3262)											_hx_tmp = false;
            										}
HXDLIN(3262)										if (_hx_tmp) {
HXLINE(3269)											{
HXLINE(3269)												int _g = 0;
HXDLIN(3269)												::Array< ::Dynamic> _g1 = daNote->parent->children;
HXDLIN(3269)												while((_g < _g1->length)){
HXLINE(3269)													 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3269)													_g = (_g + 1);
HXLINE(3271)													i->set_alpha(((Float)0.3));
HXLINE(3272)													i->sustainActive = false;
            												}
            											}
HXLINE(3274)											if (daNote->parent->wasGoodHit) {
HXLINE(3275)												::PlayState_obj::misses++;
            											}
HXLINE(3276)											_gthis->updateAccuracy();
            										}
            										else {
HXLINE(3278)											bool _hx_tmp;
HXDLIN(3278)											if (!(daNote->wasGoodHit)) {
HXLINE(3278)												_hx_tmp = !(daNote->isSustainNote);
            											}
            											else {
HXLINE(3278)												_hx_tmp = false;
            											}
HXDLIN(3278)											if (_hx_tmp) {
HXLINE(3281)												if ((daNote->noteType != 1)) {
HXLINE(3281)													 ::PlayState _gthis1 = _gthis;
HXDLIN(3281)													_gthis1->health = (_gthis1->health - ((Float)0.15));
            												}
            											}
            										}
            									}
            								}
            							}
            							else {
HXLINE(3288)								_gthis->vocals->set_volume(( (Float)(0) ));
HXLINE(3289)								bool _hx_tmp;
HXDLIN(3289)								if (::PlayState_obj::theFunne) {
HXLINE(3289)									_hx_tmp = !(daNote->isSustainNote);
            								}
            								else {
HXLINE(3289)									_hx_tmp = false;
            								}
HXDLIN(3289)								if (_hx_tmp) {
HXLINE(3291)									if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3293)										daNote->rating = HX_("bad",c5,b1,4a,00);
HXLINE(3294)										_gthis->goodNoteHit(daNote,null());
            									}
            									else {
HXLINE(3297)										_gthis->noteMiss(daNote->noteData,daNote);
            									}
            								}
HXLINE(3300)								bool _hx_tmp1;
HXDLIN(3300)								if (daNote->isParent) {
HXLINE(3300)									_hx_tmp1 = daNote->visible;
            								}
            								else {
HXLINE(3300)									_hx_tmp1 = false;
            								}
HXDLIN(3300)								if (_hx_tmp1) {
HXLINE(3302)									if ((daNote->noteType != 1)) {
HXLINE(3302)										 ::PlayState _gthis1 = _gthis;
HXDLIN(3302)										_gthis1->health = (_gthis1->health - ((Float)0.15));
            									}
HXLINE(3304)									{
HXLINE(3304)										int _g = 0;
HXDLIN(3304)										::Array< ::Dynamic> _g1 = daNote->children;
HXDLIN(3304)										while((_g < _g1->length)){
HXLINE(3304)											 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3304)											_g = (_g + 1);
HXLINE(3306)											i->set_alpha(((Float)0.3));
HXLINE(3307)											i->sustainActive = false;
            										}
            									}
            								}
            								else {
HXLINE(3312)									bool _hx_tmp;
HXDLIN(3312)									bool _hx_tmp1;
HXDLIN(3312)									bool _hx_tmp2;
HXDLIN(3312)									if (!(daNote->wasGoodHit)) {
HXLINE(3312)										_hx_tmp2 = daNote->isSustainNote;
            									}
            									else {
HXLINE(3312)										_hx_tmp2 = false;
            									}
HXDLIN(3312)									if (_hx_tmp2) {
HXLINE(3312)										_hx_tmp1 = daNote->sustainActive;
            									}
            									else {
HXLINE(3312)										_hx_tmp1 = false;
            									}
HXDLIN(3312)									if (_hx_tmp1) {
HXLINE(3312)										_hx_tmp = (daNote->spotInLine != daNote->parent->children->length);
            									}
            									else {
HXLINE(3312)										_hx_tmp = false;
            									}
HXDLIN(3312)									if (_hx_tmp) {
HXLINE(3319)										{
HXLINE(3319)											int _g = 0;
HXDLIN(3319)											::Array< ::Dynamic> _g1 = daNote->parent->children;
HXDLIN(3319)											while((_g < _g1->length)){
HXLINE(3319)												 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(3319)												_g = (_g + 1);
HXLINE(3321)												i->set_alpha(((Float)0.3));
HXLINE(3322)												i->sustainActive = false;
            											}
            										}
HXLINE(3324)										if (daNote->parent->wasGoodHit) {
HXLINE(3325)											::PlayState_obj::misses++;
            										}
HXLINE(3326)										_gthis->updateAccuracy();
            									}
            									else {
HXLINE(3328)										bool _hx_tmp;
HXDLIN(3328)										if (!(daNote->wasGoodHit)) {
HXLINE(3328)											_hx_tmp = !(daNote->isSustainNote);
            										}
            										else {
HXLINE(3328)											_hx_tmp = false;
            										}
HXDLIN(3328)										if (_hx_tmp) {
HXLINE(3331)											if ((daNote->noteType != 1)) {
HXLINE(3331)												 ::PlayState _gthis1 = _gthis;
HXDLIN(3331)												_gthis1->health = (_gthis1->health - ((Float)0.15));
            											}
            										}
            									}
            								}
            							}
            						}
HXLINE(3337)						daNote->set_visible(false);
HXLINE(3338)						daNote->kill();
HXLINE(3339)						_gthis->notes->remove(daNote,true).StaticCast<  ::Note >();
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(2975)			bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(2975)			bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(2975)			bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(2975)			::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(2977)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_2(_gthis,holdArray3)),null());
            		}
HXLINE(3344)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            			void _hx_run( ::StaticArrow spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3348_update)
HXLINE(3348)				if (spr->animation->get_finished()) {
HXLINE(3350)					spr->playAnim(HX_("static",ae,dc,fb,05),null());
HXLINE(3351)					spr->centerOffsets(null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3346)			::PlayState_obj::cpuStrums->forEach( ::Dynamic(new _hx_Closure_3()),null());
HXLINE(3354)			if (::PlayStateChangeables_obj::botPlay) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            				void _hx_run( ::StaticArrow spr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3358_update)
HXLINE(3358)					if (spr->animation->get_finished()) {
HXLINE(3360)						spr->playAnim(HX_("static",ae,dc,fb,05),null());
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3356)				::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_4()),null());
            			}
            		}
HXLINE(3367)		bool _hx_tmp22;
HXDLIN(3367)		if (!(this->inCutscene)) {
HXLINE(3367)			_hx_tmp22 = this->songStarted;
            		}
            		else {
HXLINE(3367)			_hx_tmp22 = false;
            		}
HXDLIN(3367)		if (_hx_tmp22) {
HXLINE(3368)			this->keyShit();
            		}
HXLINE(3375)		this->super::update(elapsed);
HXLINE(3378)		bool _hx_tmp23;
HXDLIN(3378)		if (this->missedStab) {
HXLINE(3378)			_hx_tmp23 = ::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("stab",c2,e3,5b,4c));
            		}
            		else {
HXLINE(3378)			_hx_tmp23 = false;
            		}
HXDLIN(3378)		if (_hx_tmp23) {
HXLINE(3381)			if ((::PlayState_obj::dad->animation->_curAnim->curFrame == 5)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3386_update)
HXLINE(3386)					 ::PlayState _gthis1 = _gthis;
HXDLIN(3386)					_gthis1->health = (_gthis1->health - ((Float)0.1));
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(3384)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.01), ::Dynamic(new _hx_Closure_5(_gthis)),10);
HXLINE(3388)				this->missedStab = false;
            			}
            		}
            	}


 ::Dynamic PlayState_obj::getSectionByTime(Float ms){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3395_getSectionByTime)
HXLINE(3397)		{
HXLINE(3397)			int _g = 0;
HXDLIN(3397)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3397)			while((_g < _g1->length)){
HXLINE(3397)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3397)				_g = (_g + 1);
HXLINE(3399)				Float start = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) )));
HXLINE(3400)				Float end = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(i->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic)) )));
HXLINE(3403)				bool _hx_tmp;
HXDLIN(3403)				if ((ms >= start)) {
HXLINE(3403)					_hx_tmp = (ms < end);
            				}
            				else {
HXLINE(3403)					_hx_tmp = false;
            				}
HXDLIN(3403)				if (_hx_tmp) {
HXLINE(3405)					return i;
            				}
            			}
            		}
HXLINE(3410)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getSectionByTime,return )

void PlayState_obj::recalculateAllSectionTimes(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3418_recalculateAllSectionTimes)
HXDLIN(3418)		int _g = 0;
HXDLIN(3418)		int _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3418)		while((_g < _g1)){
HXDLIN(3418)			_g = (_g + 1);
HXDLIN(3418)			int i = (_g - 1);
HXLINE(3420)			 ::Dynamic section =  ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE(3422)			int currentBeat = (4 * i);
HXLINE(3424)			 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE(3426)			if (::hx::IsNull( currentSeg )) {
HXLINE(3427)				return;
            			}
HXLINE(3429)			Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3431)			section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE(3433)			if ((i != 0)) {
HXLINE(3434)				 ::Dynamic(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(3435)			section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,recalculateAllSectionTimes,(void))

void PlayState_obj::endSong(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3441_endSong)
HXLINE(3443)		::PlayState_obj::gf2 = null();
HXLINE(3444)		this->endingSong = true;
HXLINE(3445)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyDown",a1,69,47,9c),this->handleInput_dyn(),null());
HXLINE(3446)		::openfl::Lib_obj::get_current()->stage->removeEventListener(HX_("keyUp",da,b9,fe,de),this->releaseInput_dyn(),null());
HXLINE(3447)		if (this->useVideo) {
HXLINE(3449)			::GlobalVideo_obj::get()->__Field(HX_("stop",02,f0,5b,4c),::hx::paccDynamic)();
HXLINE(3450)			::openfl::Lib_obj::get_current()->stage->window->onFocusOut->remove(this->focusOut_dyn());
HXLINE(3451)			::openfl::Lib_obj::get_current()->stage->window->onFocusIn->remove(this->focusIn_dyn());
HXLINE(3452)			::PlayState_obj::instance->remove(::PlayState_obj::instance->videoSprite,null()).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(3456)		if (!(::PlayState_obj::loadRep)) {
HXLINE(3457)			::PlayState_obj::rep->SaveReplay(this->saveNotes,this->saveJudge,this->replayAna);
            		}
            		else {
HXLINE(3460)			::PlayStateChangeables_obj::botPlay = false;
HXLINE(3461)			::PlayStateChangeables_obj::scrollSpeed = ( (Float)(1) );
HXLINE(3462)			::PlayStateChangeables_obj::useDownscroll = false;
            		}
HXLINE(3465)		if (::hx::IsGreater( ::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic),290 )) {
HXLINE(3466)			::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->setFPSCap(( (Float)(290) ));
            		}
HXLINE(3469)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3471)			::PlayState_obj::luaModchart->die();
HXLINE(3472)			::PlayState_obj::luaModchart = null();
            		}
HXLINE(3476)		this->canPause = false;
HXLINE(3477)		::flixel::FlxG_obj::sound->music->set_volume(( (Float)(0) ));
HXLINE(3478)		this->vocals->set_volume(( (Float)(0) ));
HXLINE(3479)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(3480)		this->vocals->pause();
HXLINE(3481)		if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3485)			::String songHighscore = ::StringTools_obj::replace(( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(3486)			::String _hx_switch_0 = songHighscore;
            			if (  (_hx_switch_0==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(3489)				songHighscore = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(3489)				goto _hx_goto_109;
            			}
            			if (  (_hx_switch_0==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(3491)				songHighscore = HX_("Philly",48,eb,f2,23);
HXDLIN(3491)				goto _hx_goto_109;
            			}
            			_hx_goto_109:;
HXLINE(3495)			::Highscore_obj::saveScore(songHighscore,::Math_obj::round(( (Float)(this->songScore) )),::PlayState_obj::storyDifficulty);
HXLINE(3496)			::String _hx_tmp = ::Ratings_obj::GenerateLetterRank(this->accuracy);
HXDLIN(3496)			::Highscore_obj::saveCombo(songHighscore,_hx_tmp,::PlayState_obj::storyDifficulty);
            		}
HXLINE(3500)		if (::PlayState_obj::offsetTesting) {
HXLINE(3502)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3502)			::String library = null();
HXDLIN(3502)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(3503)			::PlayState_obj::offsetTesting = false;
HXLINE(3504)			{
HXLINE(3504)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::OptionsMenu_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3504)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3504)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(3505)			this->clean();
HXLINE(3506)			::flixel::FlxG_obj::save->data->__SetField(HX_("offset",93,97,3f,60),this->offsetTest,::hx::paccDynamic);
            		}
            		else {
HXLINE(3510)			if (::PlayState_obj::isStoryMode) {
HXLINE(3512)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN(3512)				::PlayState_obj::campaignScore = (::PlayState_obj::campaignScore + ::Math_obj::round(( (Float)(this->songScore) )));
HXLINE(3513)				 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3513)				::PlayState_obj::campaignMisses = (::PlayState_obj::campaignMisses + ::PlayState_obj::misses);
HXLINE(3514)				 ::Dynamic _hx_tmp2 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3514)				::PlayState_obj::campaignSicks = (::PlayState_obj::campaignSicks + ::PlayState_obj::sicks);
HXLINE(3515)				 ::Dynamic _hx_tmp3 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3515)				::PlayState_obj::campaignGoods = (::PlayState_obj::campaignGoods + ::PlayState_obj::goods);
HXLINE(3516)				 ::Dynamic _hx_tmp4 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3516)				::PlayState_obj::campaignBads = (::PlayState_obj::campaignBads + ::PlayState_obj::bads);
HXLINE(3517)				 ::Dynamic _hx_tmp5 = ::hx::ClassOf< ::PlayState >();
HXDLIN(3517)				::PlayState_obj::campaignShits = (::PlayState_obj::campaignShits + ::PlayState_obj::shits);
HXLINE(3519)				::PlayState_obj::storyPlaylist->remove(::PlayState_obj::storyPlaylist->__get(0));
HXLINE(3521)				if ((::PlayState_obj::storyPlaylist->length <= 0)) {
HXLINE(3523)					this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE(3524)					this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE(3526)					this->paused = true;
HXLINE(3528)					{
HXLINE(3528)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3528)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(3529)					{
HXLINE(3529)						 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3529)						_this1->cleanup(_this1->autoDestroy,true);
            					}
HXLINE(3530)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            						void _hx_run( ::flixel::util::FlxTimer tmr){
            							HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3535_endSong)
HXLINE(3535)							::PlayState_obj::inResults = true;
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(3532)						this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
HXLINE(3533)						 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_0()),null());
            					}
            					else {
HXLINE(3540)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3540)						::String library = null();
HXDLIN(3540)						_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
HXLINE(3541)						::Conductor_obj::changeBPM(( (Float)(102) ),null());
HXLINE(3542)						{
HXLINE(3542)							 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3542)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3542)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
HXLINE(3543)						this->clean();
            					}
HXLINE(3547)					if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3549)						::PlayState_obj::luaModchart->die();
HXLINE(3550)						::PlayState_obj::luaModchart = null();
            					}
HXLINE(3554)					if (( (bool)(::PlayState_obj::SONG->__Field(HX_("validScore",b6,dc,18,c7),::hx::paccDynamic)) )) {
HXLINE(3556)						if (::NGio_obj::isLoggedIn) {
HXLINE(3556)							 ::io::newgrounds::objects::Medal medal = ( ( ::io::newgrounds::objects::Medal)(::io::newgrounds::NG_obj::core->medals->get(60961)) );
HXDLIN(3556)							if (!(( (bool)(medal->_data->__Field(HX_("unlocked",23,34,0e,5c),::hx::paccDynamic)) ))) {
HXLINE(3556)								medal->sendUnlock();
            							}
            						}
HXLINE(3557)						::Highscore_obj::saveWeekScore(::PlayState_obj::storyWeek,::PlayState_obj::campaignScore,::PlayState_obj::storyDifficulty);
            					}
HXLINE(3560)					::StoryMenuState_obj::unlockNextWeek(::PlayState_obj::storyWeek);
            				}
            				else {
HXLINE(3565)					::String songFormat = ::StringTools_obj::replace(::PlayState_obj::storyPlaylist->__get(0),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00));
HXLINE(3566)					::String _hx_switch_1 = songFormat;
            					if (  (_hx_switch_1==HX_("Dad-Battle",fe,4d,ac,32)) ){
HXLINE(3569)						songFormat = HX_("Dadbattle",9f,4a,7c,48);
HXDLIN(3569)						goto _hx_goto_110;
            					}
            					if (  (_hx_switch_1==HX_("Philly-Nice",22,f2,31,13)) ){
HXLINE(3571)						songFormat = HX_("Philly",48,eb,f2,23);
HXDLIN(3571)						goto _hx_goto_110;
            					}
            					_hx_goto_110:;
HXLINE(3574)					::String poop = ::Highscore_obj::formatSong(songFormat,::PlayState_obj::storyDifficulty);
HXLINE(3579)					if ((::StringTools_obj::replace(::PlayState_obj::storyPlaylist->__get(0),HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase() == HX_("eggnog",61,04,ba,f4))) {
HXLINE(3581)						 ::flixel::FlxSprite blackShit =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(-(::flixel::FlxG_obj::width)) ) * ::flixel::FlxG_obj::camera->zoom),(( (Float)(-(::flixel::FlxG_obj::height)) ) * ::flixel::FlxG_obj::camera->zoom),null());
HXDLIN(3581)						 ::flixel::FlxSprite blackShit1 = blackShit->makeGraphic((::flixel::FlxG_obj::width * 3),(::flixel::FlxG_obj::height * 3),-16777216,null(),null());
HXLINE(3583)						blackShit1->scrollFactor->set(null(),null());
HXLINE(3584)						this->add(blackShit1);
HXLINE(3585)						this->camHUD->set_visible(false);
HXLINE(3587)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(3587)						_hx_tmp->play(::Paths_obj::sound(HX_("Lights_Shut_off",86,a9,43,29),null()),null(),null(),null(),null(),null());
            					}
HXLINE(3590)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransIn = true;
HXLINE(3591)					::flixel::addons::transition::FlxTransitionableState_obj::skipNextTransOut = true;
HXLINE(3592)					::PlayState_obj::prevCamFollow = this->camFollow;
HXLINE(3594)					::PlayState_obj::SONG = ::Song_obj::loadFromJson(poop,::PlayState_obj::storyPlaylist->__get(0));
HXLINE(3595)					{
HXLINE(3595)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3595)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(3597)					{
HXLINE(3597)						 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(3597)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3597)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
HXLINE(3598)					this->clean();
            				}
            			}
            			else {
HXLINE(3605)				this->paused = true;
HXLINE(3607)				{
HXLINE(3607)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(3607)					_this->cleanup(_this->autoDestroy,true);
            				}
HXLINE(3608)				{
HXLINE(3608)					 ::flixel::_hx_system::FlxSound _this1 = this->vocals;
HXDLIN(3608)					_this1->cleanup(_this1->autoDestroy,true);
            				}
HXLINE(3610)				if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("scoreScreen",5e,6c,c3,13),::hx::paccDynamic)) )) {
            					HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3615_endSong)
HXLINE(3615)						::PlayState_obj::inResults = true;
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(3612)					this->openSubState( ::ResultsScreen_obj::__alloc( HX_CTX ,null()));
HXLINE(3613)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1()),null());
            				}
            				else {
HXLINE(3620)					{
HXLINE(3620)						 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(3620)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3620)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
HXLINE(3621)					this->clean();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,endSong,(void))

Float PlayState_obj::getRatesScore(Float rate,Float score){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3633_getRatesScore)
HXLINE(3634)		Float rateX = ( (Float)(1) );
HXLINE(3635)		Float lastScore = score;
HXLINE(3636)		Float pr = (rate - ((Float)0.05));
HXLINE(3637)		if ((pr < ((Float)1.00))) {
HXLINE(3638)			pr = ( (Float)(1) );
            		}
HXLINE(3640)		while((rateX <= pr)){
HXLINE(3642)			if ((rateX > pr)) {
HXLINE(3643)				goto _hx_goto_114;
            			}
HXLINE(3644)			lastScore = (score + ((lastScore * rateX) * ((Float)0.022)));
HXLINE(3645)			rateX = (rateX + ((Float)0.05));
            		}
            		_hx_goto_114:;
HXLINE(3648)		int actualScore = ::Math_obj::round((score + (( (Float)(::Math_obj::floor((lastScore * pr))) ) * ((Float)0.022))));
HXLINE(3650)		return ( (Float)(actualScore) );
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getRatesScore,return )

void PlayState_obj::popUpScore( ::Note daNote){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3658_popUpScore)
HXLINE(3657)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3659)		Float noteDiff = -((daNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(3660)		Float wife = ::EtternaFunctions_obj::wife3(-(noteDiff),::Conductor_obj::timeScale);
HXLINE(3662)		this->vocals->set_volume(( (Float)(1) ));
HXLINE(3663)		::String placement = ::Std_obj::string(this->combo);
HXLINE(3665)		 ::flixel::text::FlxText coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,placement,32,null());
HXLINE(3666)		coolText->screenCenter(null());
HXLINE(3667)		coolText->set_x((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.55)));
HXLINE(3668)		{
HXLINE(3668)			 ::flixel::text::FlxText _g = coolText;
HXDLIN(3668)			_g->set_y((_g->y - ( (Float)(350) )));
            		}
HXLINE(3669)		coolText->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3672)		 ::flixel::FlxSprite rating =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(3673)		Float score = ( (Float)(350) );
HXLINE(3675)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(3676)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3676)			_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + wife);
            		}
HXLINE(3678)		::String daRating = ::Ratings_obj::judgeNote(daNote);
HXLINE(3680)		::String _hx_switch_0 = daRating;
            		if (  (_hx_switch_0==HX_("bad",c5,b1,4a,00)) ){
HXLINE(3692)			daRating = HX_("bad",c5,b1,4a,00);
HXLINE(3693)			score = ( (Float)(0) );
HXLINE(3694)			if ((daNote->noteType != 1)) {
HXLINE(3694)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3694)				_hx_tmp->health = (_hx_tmp->health - ((Float)0.06));
            			}
HXLINE(3695)			this->ss = false;
HXLINE(3696)			::PlayState_obj::bads++;
HXLINE(3697)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3698)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3698)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.50));
            			}
HXLINE(3691)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("good",3d,95,69,44)) ){
HXLINE(3700)			daRating = HX_("good",3d,95,69,44);
HXLINE(3701)			score = ( (Float)(200) );
HXLINE(3702)			this->ss = false;
HXLINE(3703)			::PlayState_obj::goods++;
HXLINE(3704)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3705)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3705)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + ((Float)0.75));
            			}
HXLINE(3699)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("shit",c0,cf,52,4c)) ){
HXLINE(3683)			score = ( (Float)(-300) );
HXLINE(3684)			this->combo = 0;
HXLINE(3685)			::PlayState_obj::misses++;
HXLINE(3686)			if ((daNote->noteType != 1)) {
HXLINE(3686)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3686)				_hx_tmp->health = (_hx_tmp->health - ((Float)0.1));
            			}
HXLINE(3687)			this->ss = false;
HXLINE(3688)			::PlayState_obj::shits++;
HXLINE(3689)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3690)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3690)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit - ( (Float)(1) ));
            			}
HXLINE(3682)			goto _hx_goto_116;
            		}
            		if (  (_hx_switch_0==HX_("sick",be,8c,53,4c)) ){
HXLINE(3707)			if ((this->health < 2)) {
HXLINE(3708)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3708)				_hx_tmp->health = (_hx_tmp->health + ((Float)0.04));
            			}
HXLINE(3709)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),0 )) {
HXLINE(3710)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3710)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit + 1);
            			}
HXLINE(3711)			::PlayState_obj::sicks++;
HXLINE(3706)			goto _hx_goto_116;
            		}
            		_hx_goto_116:;
HXLINE(3714)		if ((::PlayState_obj::songMultiplier >= ((Float)1.05))) {
HXLINE(3715)			score = this->getRatesScore(::PlayState_obj::songMultiplier,score);
            		}
HXLINE(3720)		bool _hx_tmp;
HXDLIN(3720)		if ((daRating == HX_("shit",c0,cf,52,4c))) {
HXLINE(3720)			_hx_tmp = (daRating != HX_("bad",c5,b1,4a,00));
            		}
            		else {
HXLINE(3720)			_hx_tmp = true;
            		}
HXDLIN(3720)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3936_popUpScore)
HXLINE(3937)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(3938)					 ::flixel::text::FlxText _g = _gthis->currentTimingShown;
HXDLIN(3938)					_g->set_alpha((_g->alpha - ((Float)0.02)));
            				}
HXLINE(3939)				_gthis->timeShown++;
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::flixel::text::FlxText,coolText, ::flixel::FlxSprite,comboSpr1, ::flixel::FlxSprite,rating) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween tween){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3945_popUpScore)
HXLINE(3946)				coolText->destroy();
HXLINE(3947)				comboSpr1->destroy();
HXLINE(3948)				bool _hx_tmp;
HXDLIN(3948)				if (::hx::IsNotNull( _gthis->currentTimingShown )) {
HXLINE(3948)					_hx_tmp = (_gthis->timeShown >= 20);
            				}
            				else {
HXLINE(3948)					_hx_tmp = false;
            				}
HXDLIN(3948)				if (_hx_tmp) {
HXLINE(3950)					_gthis->remove(_gthis->currentTimingShown,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(3951)					_gthis->currentTimingShown = null();
            				}
HXLINE(3953)				rating->destroy();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(3722)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3722)			_hx_tmp->songScore = (_hx_tmp->songScore + ::Math_obj::round(score));
HXLINE(3732)			::String pixelShitPart1 = HX_("",00,00,00,00);
HXLINE(3733)			::String pixelShitPart2 = HX_("",00,00,00,00);
HXLINE(3734)			::String pixelShitPart3 = null();
HXLINE(3736)			if (::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3738)				pixelShitPart1 = HX_("weeb/pixelUI/",79,62,e4,09);
HXLINE(3739)				pixelShitPart2 = HX_("-pixel",39,03,b3,c0);
HXLINE(3740)				pixelShitPart3 = HX_("week6",c2,95,be,c7);
            			}
HXLINE(3743)			 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3743)			rating1->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + daRating) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(3744)			rating->screenCenter(null());
HXLINE(3745)			{
HXLINE(3745)				 ::flixel::FlxSprite _g = rating;
HXDLIN(3745)				_g->set_y((_g->y - ( (Float)(50) )));
            			}
HXLINE(3746)			rating->set_x((coolText->x - ( (Float)(125) )));
HXLINE(3748)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHit",bf,5d,c0,31),::hx::paccDynamic)) )) {
HXLINE(3750)				rating->set_x(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitX",b9,a9,91,56),::hx::paccDynamic)) ));
HXLINE(3751)				rating->set_y(( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("changedHitY",ba,a9,91,56),::hx::paccDynamic)) ));
            			}
HXLINE(3753)			rating->acceleration->set_y(( (Float)(550) ));
HXLINE(3754)			{
HXLINE(3754)				 ::flixel::math::FlxPoint _g1 = rating->velocity;
HXDLIN(3754)				Float _g2 = _g1->y;
HXDLIN(3754)				_g1->set_y((_g2 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,175,null())) )));
            			}
HXLINE(3755)			{
HXLINE(3755)				 ::flixel::math::FlxPoint _g3 = rating->velocity;
HXDLIN(3755)				Float _g4 = _g3->x;
HXDLIN(3755)				_g3->set_x((_g4 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(0,10,null())) )));
            			}
HXLINE(3757)			Float msTiming = ::HelperFunctions_obj::truncateFloat((noteDiff / ::PlayState_obj::songMultiplier),3);
HXLINE(3758)			bool _hx_tmp1;
HXDLIN(3758)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3758)				_hx_tmp1 = !(::PlayState_obj::loadRep);
            			}
            			else {
HXLINE(3758)				_hx_tmp1 = false;
            			}
HXDLIN(3758)			if (_hx_tmp1) {
HXLINE(3759)				msTiming = ( (Float)(0) );
            			}
HXLINE(3761)			if (::PlayState_obj::loadRep) {
HXLINE(3762)				msTiming = ::HelperFunctions_obj::truncateFloat(( (Float)(this->findByTime(daNote->strumTime)->__get(3)) ),3);
            			}
HXLINE(3764)			if (::hx::IsNotNull( this->currentTimingShown )) {
HXLINE(3765)				this->remove(this->currentTimingShown,null());
            			}
HXLINE(3767)			this->currentTimingShown =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("0ms",96,cb,24,00),null(),null());
HXLINE(3768)			this->timeShown = 0;
HXLINE(3769)			::String _hx_switch_1 = daRating;
            			if (  (_hx_switch_1==HX_("good",3d,95,69,44)) ){
HXLINE(3774)				this->currentTimingShown->set_color(-16744448);
HXDLIN(3774)				goto _hx_goto_117;
            			}
            			if (  (_hx_switch_1==HX_("bad",c5,b1,4a,00)) ||  (_hx_switch_1==HX_("shit",c0,cf,52,4c)) ){
HXLINE(3772)				this->currentTimingShown->set_color(-65536);
HXDLIN(3772)				goto _hx_goto_117;
            			}
            			if (  (_hx_switch_1==HX_("sick",be,8c,53,4c)) ){
HXLINE(3776)				this->currentTimingShown->set_color(-16711681);
HXDLIN(3776)				goto _hx_goto_117;
            			}
            			_hx_goto_117:;
HXLINE(3778)			this->currentTimingShown->set_borderStyle(::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn());
HXLINE(3779)			this->currentTimingShown->set_borderSize(( (Float)(1) ));
HXLINE(3780)			this->currentTimingShown->set_borderColor(-16777216);
HXLINE(3781)			this->currentTimingShown->set_text((msTiming + HX_("ms",66,5f,00,00)));
HXLINE(3782)			this->currentTimingShown->set_size(20);
HXLINE(3784)			bool _hx_tmp2;
HXDLIN(3784)			if ((msTiming >= ((Float)0.03))) {
HXLINE(3784)				_hx_tmp2 = ::PlayState_obj::offsetTesting;
            			}
            			else {
HXLINE(3784)				_hx_tmp2 = false;
            			}
HXDLIN(3784)			if (_hx_tmp2) {
HXLINE(3787)				this->hits->shift();
HXLINE(3788)				this->hits->shift();
HXLINE(3789)				this->hits->shift();
HXLINE(3790)				this->hits->pop();
HXLINE(3791)				this->hits->pop();
HXLINE(3792)				this->hits->pop();
HXLINE(3793)				this->hits->push(msTiming);
HXLINE(3795)				Float total = ((Float)0.0);
HXLINE(3797)				{
HXLINE(3797)					int _g = 0;
HXDLIN(3797)					::Array< Float > _g1 = this->hits;
HXDLIN(3797)					while((_g < _g1->length)){
HXLINE(3797)						Float i = _g1->__get(_g);
HXDLIN(3797)						_g = (_g + 1);
HXLINE(3798)						total = (total + i);
            					}
            				}
HXLINE(3800)				this->offsetTest = ::HelperFunctions_obj::truncateFloat((total / ( (Float)(this->hits->length) )),2);
            			}
HXLINE(3803)			if ((this->currentTimingShown->alpha != 1)) {
HXLINE(3804)				this->currentTimingShown->set_alpha(( (Float)(1) ));
            			}
HXLINE(3806)			bool _hx_tmp3;
HXDLIN(3806)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3806)				_hx_tmp3 = ::PlayState_obj::loadRep;
            			}
            			else {
HXLINE(3806)				_hx_tmp3 = true;
            			}
HXDLIN(3806)			if (_hx_tmp3) {
HXLINE(3807)				this->add(this->currentTimingShown);
            			}
HXLINE(3809)			 ::flixel::FlxSprite comboSpr =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(3809)			 ::flixel::FlxSprite comboSpr1 = comboSpr->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + ((pixelShitPart1 + HX_("combo",4e,28,5d,4a)) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(3810)			comboSpr1->screenCenter(null());
HXLINE(3811)			comboSpr1->set_x(rating->x);
HXLINE(3812)			comboSpr1->set_y((rating->y + 100));
HXLINE(3813)			comboSpr1->acceleration->set_y(( (Float)(600) ));
HXLINE(3814)			{
HXLINE(3814)				 ::flixel::math::FlxPoint _g5 = comboSpr1->velocity;
HXDLIN(3814)				_g5->set_y((_g5->y - ( (Float)(150) )));
            			}
HXLINE(3816)			this->currentTimingShown->screenCenter(null());
HXLINE(3817)			this->currentTimingShown->set_x((comboSpr1->x + 100));
HXLINE(3818)			this->currentTimingShown->set_y((rating->y + 100));
HXLINE(3819)			this->currentTimingShown->acceleration->set_y(( (Float)(600) ));
HXLINE(3820)			{
HXLINE(3820)				 ::flixel::math::FlxPoint _g6 = this->currentTimingShown->velocity;
HXDLIN(3820)				_g6->set_y((_g6->y - ( (Float)(150) )));
            			}
HXLINE(3822)			{
HXLINE(3822)				 ::flixel::math::FlxPoint _g7 = comboSpr1->velocity;
HXDLIN(3822)				Float _g8 = _g7->x;
HXDLIN(3822)				_g7->set_x((_g8 + ::flixel::FlxG_obj::random->_hx_int(1,10,null())));
            			}
HXLINE(3823)			{
HXLINE(3823)				 ::flixel::math::FlxPoint _g9 = this->currentTimingShown->velocity;
HXDLIN(3823)				_g9->set_x((_g9->x + comboSpr1->velocity->x));
            			}
HXLINE(3824)			bool _hx_tmp4;
HXDLIN(3824)			if (::PlayStateChangeables_obj::botPlay) {
HXLINE(3824)				_hx_tmp4 = ::PlayState_obj::loadRep;
            			}
            			else {
HXLINE(3824)				_hx_tmp4 = true;
            			}
HXDLIN(3824)			if (_hx_tmp4) {
HXLINE(3825)				this->add(rating);
            			}
HXLINE(3827)			if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3829)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3829)				rating1->setGraphicSize(::Std_obj::_hx_int((rating->get_width() * ((Float)0.7))),null());
HXLINE(3830)				rating->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(3831)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(3831)				comboSpr->setGraphicSize(::Std_obj::_hx_int((comboSpr1->get_width() * ((Float)0.7))),null());
HXLINE(3832)				comboSpr1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
            			}
            			else {
HXLINE(3836)				 ::flixel::FlxSprite rating1 = rating;
HXDLIN(3836)				Float _hx_tmp = rating->get_width();
HXDLIN(3836)				rating1->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
HXLINE(3837)				 ::flixel::FlxSprite comboSpr = comboSpr1;
HXDLIN(3837)				Float _hx_tmp1 = comboSpr1->get_width();
HXDLIN(3837)				comboSpr->setGraphicSize(::Std_obj::_hx_int(((_hx_tmp1 * ::PlayState_obj::daPixelZoom) * ((Float)0.7))),null());
            			}
HXLINE(3840)			this->currentTimingShown->updateHitbox();
HXLINE(3841)			comboSpr1->updateHitbox();
HXLINE(3842)			rating->updateHitbox();
HXLINE(3844)			this->currentTimingShown->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3845)			comboSpr1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3846)			rating->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3848)			::Array< int > seperatedScore = ::Array_obj< int >::__new(0);
HXLINE(3850)			::Array< ::String > comboSplit = (this->combo + HX_("",00,00,00,00)).split(HX_("",00,00,00,00));
HXLINE(3852)			if ((this->combo > ::PlayState_obj::highestCombo)) {
HXLINE(3853)				::PlayState_obj::highestCombo = this->combo;
            			}
HXLINE(3856)			if ((comboSplit->length == 1)) {
HXLINE(3858)				seperatedScore->push(0);
HXLINE(3859)				seperatedScore->push(0);
            			}
            			else {
HXLINE(3861)				if ((comboSplit->length == 2)) {
HXLINE(3862)					seperatedScore->push(0);
            				}
            			}
HXLINE(3864)			{
HXLINE(3864)				int _g10 = 0;
HXDLIN(3864)				int _g11 = comboSplit->length;
HXDLIN(3864)				while((_g10 < _g11)){
HXLINE(3864)					_g10 = (_g10 + 1);
HXDLIN(3864)					int i = (_g10 - 1);
HXLINE(3866)					::String str = comboSplit->__get(i);
HXLINE(3867)					seperatedScore->push(::Std_obj::parseInt(str));
            				}
            			}
HXLINE(3870)			int daLoop = 0;
HXLINE(3871)			{
HXLINE(3871)				int _g12 = 0;
HXDLIN(3871)				while((_g12 < seperatedScore->length)){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3900_popUpScore)
HXLINE(3901)						_gthis->visibleCombos->remove(numScore1);
HXLINE(3902)						numScore1->destroy();
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis, ::flixel::FlxSprite,numScore1) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween tween){
            						HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3906_popUpScore)
HXLINE(3906)						if (!(_gthis->visibleCombos->contains(numScore1))) {
HXLINE(3908)							tween->cancel();
HXLINE(3909)							numScore1->destroy();
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(3871)					int i = seperatedScore->__get(_g12);
HXDLIN(3871)					_g12 = (_g12 + 1);
HXLINE(3873)					 ::flixel::FlxSprite numScore =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(3873)					 ::flixel::FlxSprite numScore1 = numScore->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (((pixelShitPart1 + HX_("num",46,de,53,00)) + ::Std_obj::_hx_int(( (Float)(i) ))) + pixelShitPart2)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),pixelShitPart3),null(),null(),null(),null(),null());
HXLINE(3874)					numScore1->screenCenter(null());
HXLINE(3875)					numScore1->set_x(((rating->x + (43 * daLoop)) - ( (Float)(50) )));
HXLINE(3876)					numScore1->set_y((rating->y + 100));
HXLINE(3877)					numScore1->set_cameras(::Array_obj< ::Dynamic>::__new(1)->init(0,this->camHUD));
HXLINE(3879)					if (::hx::IsNotEq( ::PlayState_obj::SONG->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic),HX_("pixel",86,c6,a3,c2) )) {
HXLINE(3881)						numScore1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(3882)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(3882)						numScore->setGraphicSize(::Std_obj::_hx_int((numScore1->get_width() * ((Float)0.5))),null());
            					}
            					else {
HXLINE(3886)						 ::flixel::FlxSprite numScore = numScore1;
HXDLIN(3886)						Float _hx_tmp = numScore1->get_width();
HXDLIN(3886)						numScore->setGraphicSize(::Std_obj::_hx_int((_hx_tmp * ::PlayState_obj::daPixelZoom)),null());
            					}
HXLINE(3888)					numScore1->updateHitbox();
HXLINE(3890)					 ::flixel::math::FlxPoint numScore2 = numScore1->acceleration;
HXDLIN(3890)					numScore2->set_y(( (Float)(::flixel::FlxG_obj::random->_hx_int(200,300,null())) ));
HXLINE(3891)					{
HXLINE(3891)						 ::flixel::math::FlxPoint _g = numScore1->velocity;
HXDLIN(3891)						Float _g1 = _g->y;
HXDLIN(3891)						_g->set_y((_g1 - ( (Float)(::flixel::FlxG_obj::random->_hx_int(140,160,null())) )));
            					}
HXLINE(3892)					 ::flixel::math::FlxPoint numScore3 = numScore1->velocity;
HXDLIN(3892)					numScore3->set_x(::flixel::FlxG_obj::random->_hx_float(-5,5,null()));
HXLINE(3894)					this->add(numScore1);
HXLINE(3896)					this->visibleCombos->push(numScore1);
HXLINE(3898)					::flixel::tweens::FlxTween_obj::tween(numScore1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.002)))
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis,numScore1)))
            						->setFixed(2,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_1(_gthis,numScore1)))));
HXLINE(3915)					if ((this->visibleCombos->length > (seperatedScore->length + 20))) {
HXLINE(3917)						int _g = 0;
HXDLIN(3917)						int _g1 = (seperatedScore->length - 1);
HXDLIN(3917)						while((_g < _g1)){
HXLINE(3917)							_g = (_g + 1);
HXDLIN(3917)							int i = (_g - 1);
HXLINE(3919)							this->visibleCombos->remove(this->visibleCombos->__get((this->visibleCombos->length - 1)).StaticCast<  ::flixel::FlxSprite >());
            						}
            					}
HXLINE(3923)					daLoop = (daLoop + 1);
            				}
            			}
HXLINE(3930)			 ::flixel::text::FlxText coolText1 = coolText;
HXDLIN(3930)			coolText1->set_text(::Std_obj::string(seperatedScore));
HXLINE(3933)			::flixel::tweens::FlxTween_obj::tween(rating, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onUpdate",88,7c,b2,66), ::Dynamic(new _hx_Closure_2(_gthis)))));
HXLINE(3943)			::flixel::tweens::FlxTween_obj::tween(comboSpr1, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)0.2), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("startDelay",c1,af,3d,f3),(::Conductor_obj::crochet * ((Float)0.001)))
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_3(_gthis,coolText,comboSpr1,rating)))));
HXLINE(3958)			 ::PlayState _hx_tmp5 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(3958)			_hx_tmp5->curSection = (_hx_tmp5->curSection + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,popUpScore,(void))

bool PlayState_obj::NearlyEquals(Float value1,Float value2,::hx::Null< Float >  __o_unimportantDifference){
            		Float unimportantDifference = __o_unimportantDifference.Default(10);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_3964_NearlyEquals)
HXDLIN(3964)		Float _hx_tmp = ::flixel::math::FlxMath_obj::roundDecimal(value1,1);
HXDLIN(3964)		return (::Math_obj::abs((_hx_tmp - ::flixel::math::FlxMath_obj::roundDecimal(value2,1))) < unimportantDifference);
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,NearlyEquals,return )

void PlayState_obj::keyShit(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_3975_keyShit)
HXLINE(3974)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(3977)		bool holdArray = ::PlayerSettings_obj::player1->controls->_left->check();
HXDLIN(3977)		bool holdArray1 = ::PlayerSettings_obj::player1->controls->_down->check();
HXDLIN(3977)		bool holdArray2 = ::PlayerSettings_obj::player1->controls->_up->check();
HXDLIN(3977)		::Array< bool > holdArray3 = ::Array_obj< bool >::__new(4)->init(0,holdArray)->init(1,holdArray1)->init(2,holdArray2)->init(3,::PlayerSettings_obj::player1->controls->_right->check());
HXLINE(3978)		bool pressArray = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXDLIN(3978)		bool pressArray1 = ::PlayerSettings_obj::player1->controls->_downP->check();
HXDLIN(3978)		bool pressArray2 = ::PlayerSettings_obj::player1->controls->_upP->check();
HXDLIN(3978)		::Array< bool > pressArray3 = ::Array_obj< bool >::__new(4)->init(0,pressArray)->init(1,pressArray1)->init(2,pressArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightP->check());
HXLINE(3979)		bool releaseArray = ::PlayerSettings_obj::player1->controls->_leftR->check();
HXDLIN(3979)		bool releaseArray1 = ::PlayerSettings_obj::player1->controls->_downR->check();
HXDLIN(3979)		bool releaseArray2 = ::PlayerSettings_obj::player1->controls->_upR->check();
HXDLIN(3979)		::Array< bool > releaseArray3 = ::Array_obj< bool >::__new(4)->init(0,releaseArray)->init(1,releaseArray1)->init(2,releaseArray2)->init(3,::PlayerSettings_obj::player1->controls->_rightR->check());
HXLINE(3980)		::Array< ::String > keynameArray = ::Array_obj< ::String >::fromData( _hx_array_data_46c2835d_138,4);
HXLINE(3982)		if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(3984)			{
HXLINE(3984)				int _g = 0;
HXDLIN(3984)				int _g1 = pressArray3->length;
HXDLIN(3984)				while((_g < _g1)){
HXLINE(3984)					_g = (_g + 1);
HXDLIN(3984)					int i = (_g - 1);
HXLINE(3985)					if ((pressArray3->__get(i) == true)) {
HXLINE(3986)						::PlayState_obj::luaModchart->executeState(HX_("keyPressed",c3,72,6e,a8),::cpp::VirtualArray_obj::__new(1)->init(0,keynameArray->__get(i)));
            					}
            				}
            			}
HXLINE(3990)			{
HXLINE(3990)				int _g2 = 0;
HXDLIN(3990)				int _g3 = releaseArray3->length;
HXDLIN(3990)				while((_g2 < _g3)){
HXLINE(3990)					_g2 = (_g2 + 1);
HXDLIN(3990)					int i = (_g2 - 1);
HXLINE(3991)					if ((releaseArray3->__get(i) == true)) {
HXLINE(3992)						::PlayState_obj::luaModchart->executeState(HX_("keyReleased",7c,05,0c,bf),::cpp::VirtualArray_obj::__new(1)->init(0,keynameArray->__get(i)));
            					}
            				}
            			}
            		}
HXLINE(4000)		if (::PlayStateChangeables_obj::botPlay) {
HXLINE(4002)			holdArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_139,4);
HXLINE(4003)			pressArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_140,4);
HXLINE(4004)			releaseArray3 = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_141,4);
            		}
HXLINE(4007)		::Array< ::Dynamic> anas = ::Array_obj< ::Dynamic>::__new(4)->init(0,null())->init(1,null())->init(2,null())->init(3,null());
HXLINE(4009)		{
HXLINE(4009)			int _g = 0;
HXDLIN(4009)			int _g1 = pressArray3->length;
HXDLIN(4009)			while((_g < _g1)){
HXLINE(4009)				_g = (_g + 1);
HXDLIN(4009)				int i = (_g - 1);
HXLINE(4010)				if (pressArray3->__get(i)) {
HXLINE(4011)					anas[i] =  ::Ana_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,null(),false,HX_("miss",fc,52,5c,48),i);
            				}
            			}
            		}
HXLINE(4014)		bool _hx_tmp;
HXDLIN(4014)		if (holdArray3->contains(true)) {
HXLINE(4014)			_hx_tmp = this->generatedMusic;
            		}
            		else {
HXLINE(4014)			_hx_tmp = false;
            		}
HXDLIN(4014)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis,::Array< bool >,holdArray3) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4018_keyShit)
HXLINE(4018)				bool _hx_tmp;
HXDLIN(4018)				bool _hx_tmp1;
HXDLIN(4018)				bool _hx_tmp2;
HXDLIN(4018)				bool _hx_tmp3;
HXDLIN(4018)				if (daNote->isSustainNote) {
HXLINE(4018)					_hx_tmp3 = daNote->canBeHit;
            				}
            				else {
HXLINE(4018)					_hx_tmp3 = false;
            				}
HXDLIN(4018)				if (_hx_tmp3) {
HXLINE(4018)					_hx_tmp2 = daNote->mustPress;
            				}
            				else {
HXLINE(4018)					_hx_tmp2 = false;
            				}
HXDLIN(4018)				if (_hx_tmp2) {
HXLINE(4018)					_hx_tmp1 = holdArray3->__get(daNote->noteData);
            				}
            				else {
HXLINE(4018)					_hx_tmp1 = false;
            				}
HXDLIN(4018)				if (_hx_tmp1) {
HXLINE(4018)					_hx_tmp = daNote->sustainActive;
            				}
            				else {
HXLINE(4018)					_hx_tmp = false;
            				}
HXDLIN(4018)				if (_hx_tmp) {
HXLINE(4020)					_gthis->goodNoteHit(daNote,null());
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4016)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_0(_gthis,holdArray3)),null());
            		}
HXLINE(4025)		bool _hx_tmp1;
HXDLIN(4025)		if (::KeyBinds_obj::gamepad) {
HXLINE(4025)			_hx_tmp1 = !(( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY());
            		}
            		else {
HXLINE(4025)			_hx_tmp1 = false;
            		}
HXDLIN(4025)		if (_hx_tmp1) {
HXLINE(4028)			bool _hx_tmp;
HXDLIN(4028)			if (pressArray3->contains(true)) {
HXLINE(4028)				_hx_tmp = this->generatedMusic;
            			}
            			else {
HXLINE(4028)				_hx_tmp = false;
            			}
HXDLIN(4028)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes,::Array< ::Dynamic>,dumbNotes,::Array< int >,directionList,::Array< bool >,directionsAccounted) HXARGC(1)
            				void _hx_run( ::Note daNote){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4039_keyShit)
HXLINE(4039)					bool _hx_tmp;
HXDLIN(4039)					bool _hx_tmp1;
HXDLIN(4039)					bool _hx_tmp2;
HXDLIN(4039)					if (daNote->canBeHit) {
HXLINE(4039)						_hx_tmp2 = daNote->mustPress;
            					}
            					else {
HXLINE(4039)						_hx_tmp2 = false;
            					}
HXDLIN(4039)					if (_hx_tmp2) {
HXLINE(4039)						_hx_tmp1 = !(daNote->wasGoodHit);
            					}
            					else {
HXLINE(4039)						_hx_tmp1 = false;
            					}
HXDLIN(4039)					if (_hx_tmp1) {
HXLINE(4039)						_hx_tmp = !(directionsAccounted->__get(daNote->noteData));
            					}
            					else {
HXLINE(4039)						_hx_tmp = false;
            					}
HXDLIN(4039)					if (_hx_tmp) {
HXLINE(4041)						if (directionList->contains(daNote->noteData)) {
HXLINE(4043)							directionsAccounted[daNote->noteData] = true;
HXLINE(4044)							{
HXLINE(4044)								int _g = 0;
HXDLIN(4044)								while((_g < possibleNotes->length)){
HXLINE(4044)									 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4044)									_g = (_g + 1);
HXLINE(4046)									bool _hx_tmp;
HXDLIN(4046)									if ((coolNote->noteData == daNote->noteData)) {
HXLINE(4046)										_hx_tmp = (::Math_obj::abs((daNote->strumTime - coolNote->strumTime)) < 10);
            									}
            									else {
HXLINE(4046)										_hx_tmp = false;
            									}
HXDLIN(4046)									if (_hx_tmp) {
HXLINE(4049)										dumbNotes->push(daNote);
HXLINE(4050)										goto _hx_goto_131;
            									}
            									else {
HXLINE(4052)										bool _hx_tmp;
HXDLIN(4052)										if ((coolNote->noteData == daNote->noteData)) {
HXLINE(4052)											_hx_tmp = (daNote->strumTime < coolNote->strumTime);
            										}
            										else {
HXLINE(4052)											_hx_tmp = false;
            										}
HXDLIN(4052)										if (_hx_tmp) {
HXLINE(4054)											possibleNotes->remove(coolNote);
HXLINE(4055)											possibleNotes->push(daNote);
HXLINE(4056)											goto _hx_goto_131;
            										}
            									}
            								}
            								_hx_goto_131:;
            							}
            						}
            						else {
HXLINE(4062)							directionsAccounted[daNote->noteData] = true;
HXLINE(4063)							possibleNotes->push(daNote);
HXLINE(4064)							directionList->push(daNote->noteData);
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4077_keyShit)
HXLINE(4077)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(4030)				::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(4032)				::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4033)				::Array< int > directionList = ::Array_obj< int >::__new(0);
HXLINE(4034)				::Array< ::Dynamic> dumbNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4035)				::Array< bool > directionsAccounted = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_145,4);
HXLINE(4037)				this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes,dumbNotes,directionList,directionsAccounted)),null());
HXLINE(4069)				{
HXLINE(4069)					int _g = 0;
HXDLIN(4069)					while((_g < dumbNotes->length)){
HXLINE(4069)						 ::Note note = dumbNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4069)						_g = (_g + 1);
HXLINE(4072)						note->kill();
HXLINE(4073)						this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4074)						note->destroy();
            					}
            				}
HXLINE(4077)				possibleNotes->sort( ::Dynamic(new _hx_Closure_2()));
HXLINE(4079)				::Array< bool > hit = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_146,4);
HXLINE(4081)				if (this->perfectMode) {
HXLINE(4082)					this->goodNoteHit(possibleNotes->__get(0).StaticCast<  ::Note >(),null());
            				}
            				else {
HXLINE(4083)					if ((possibleNotes->length > 0)) {
HXLINE(4085)						if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(4087)							int _g = 0;
HXDLIN(4087)							int _g1 = pressArray3->length;
HXDLIN(4087)							while((_g < _g1)){
HXLINE(4087)								_g = (_g + 1);
HXDLIN(4087)								int shit = (_g - 1);
HXLINE(4089)								bool _hx_tmp;
HXDLIN(4089)								if (pressArray3->__get(shit)) {
HXLINE(4089)									_hx_tmp = !(directionList->contains(shit));
            								}
            								else {
HXLINE(4089)									_hx_tmp = false;
            								}
HXDLIN(4089)								if (_hx_tmp) {
HXLINE(4090)									this->noteMiss(shit,null());
            								}
            							}
            						}
HXLINE(4093)						{
HXLINE(4093)							int _g = 0;
HXDLIN(4093)							while((_g < possibleNotes->length)){
HXLINE(4093)								 ::Note coolNote = possibleNotes->__get(_g).StaticCast<  ::Note >();
HXDLIN(4093)								_g = (_g + 1);
HXLINE(4095)								bool _hx_tmp;
HXDLIN(4095)								if (pressArray3->__get(coolNote->noteData)) {
HXLINE(4095)									_hx_tmp = !(hit->__get(coolNote->noteData));
            								}
            								else {
HXLINE(4095)									_hx_tmp = false;
            								}
HXDLIN(4095)								if (_hx_tmp) {
HXLINE(4097)									if ((this->mashViolations != 0)) {
HXLINE(4098)										this->mashViolations--;
            									}
HXLINE(4099)									hit[coolNote->noteData] = true;
HXLINE(4100)									this->scoreTxt->set_color(-1);
HXLINE(4101)									Float noteDiff = -((coolNote->strumTime - ::Conductor_obj::songPosition));
HXLINE(4102)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->hit = true;
HXLINE(4103)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->hitJudge = ::Ratings_obj::judgeNote(coolNote);
HXLINE(4104)									anas->__get(coolNote->noteData).StaticCast<  ::Ana >()->nearestNote = ::cpp::VirtualArray_obj::__new(3)->init(0,coolNote->strumTime)->init(1,coolNote->noteData)->init(2,coolNote->sustainLength);
HXLINE(4105)									this->goodNoteHit(coolNote,null());
            								}
            							}
            						}
            					}
            				}
HXLINE(4110)				bool _hx_tmp;
HXDLIN(4110)				if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(4110)					if (holdArray3->contains(true)) {
HXLINE(4110)						_hx_tmp = ::PlayStateChangeables_obj::botPlay;
            					}
            					else {
HXLINE(4110)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(4110)					_hx_tmp = false;
            				}
HXDLIN(4110)				if (_hx_tmp) {
HXLINE(4112)					bool _hx_tmp;
HXDLIN(4112)					bool _hx_tmp1;
HXDLIN(4112)					if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(4112)						_hx_tmp1 = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            					}
            					else {
HXLINE(4112)						_hx_tmp1 = false;
            					}
HXDLIN(4112)					if (_hx_tmp1) {
HXLINE(4112)						if ((::PlayState_obj::boyfriend->animation->_curAnim->curFrame < 10)) {
HXLINE(4112)							_hx_tmp = ::PlayState_obj::boyfriend->animation->_curAnim->finished;
            						}
            						else {
HXLINE(4112)							_hx_tmp = true;
            						}
            					}
            					else {
HXLINE(4112)						_hx_tmp = false;
            					}
HXDLIN(4112)					if (_hx_tmp) {
HXLINE(4113)						::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            					}
            				}
            				else {
HXLINE(4115)					if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("ghost",4f,8f,58,93),::hx::paccDynamic)) ))) {
HXLINE(4117)						int _g = 0;
HXDLIN(4117)						int _g1 = pressArray3->length;
HXDLIN(4117)						while((_g < _g1)){
HXLINE(4117)							_g = (_g + 1);
HXDLIN(4117)							int shit = (_g - 1);
HXLINE(4118)							if (pressArray3->__get(shit)) {
HXLINE(4119)								this->noteMiss(shit,null());
            							}
            						}
            					}
            				}
            			}
HXLINE(4123)			if (!(::PlayState_obj::loadRep)) {
HXLINE(4124)				int _g = 0;
HXDLIN(4124)				while((_g < anas->length)){
HXLINE(4124)					 ::Ana i = anas->__get(_g).StaticCast<  ::Ana >();
HXDLIN(4124)					_g = (_g + 1);
HXLINE(4125)					if (::hx::IsNotNull( i )) {
HXLINE(4126)						this->replayAna->anaArray->push(i);
            					}
            				}
            			}
            		}
HXLINE(4128)		if (::PlayStateChangeables_obj::botPlay) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::Note daNote){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4130_keyShit)
HXLINE(4131)				Float diff = -(((daNote->strumTime - ::Conductor_obj::songPosition) / ::PlayState_obj::songMultiplier));
HXLINE(4133)				daNote->rating = ::Ratings_obj::judgeNote(daNote);
HXLINE(4134)				bool _hx_tmp;
HXDLIN(4134)				bool _hx_tmp1;
HXDLIN(4134)				if (daNote->mustPress) {
HXLINE(4134)					_hx_tmp1 = (daNote->rating == HX_("sick",be,8c,53,4c));
            				}
            				else {
HXLINE(4134)					_hx_tmp1 = false;
            				}
HXDLIN(4134)				if (!(_hx_tmp1)) {
HXLINE(4134)					if ((diff > 0)) {
HXLINE(4134)						_hx_tmp = daNote->mustPress;
            					}
            					else {
HXLINE(4134)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE(4134)					_hx_tmp = true;
            				}
HXDLIN(4134)				if (_hx_tmp) {
HXLINE(4137)					if (::PlayState_obj::loadRep) {
HXLINE(4140)						::cpp::VirtualArray n = _gthis->findByTime(daNote->strumTime);
HXLINE(4142)						if (::hx::IsNotNull( n )) {
HXLINE(4144)							_gthis->goodNoteHit(daNote,null());
HXLINE(4145)							::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(4146)							if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            								void _hx_run( ::StaticArrow spr){
            									HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4150_keyShit)
HXLINE(4150)									_gthis->pressArrow(spr,spr->ID,daNote);
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE(4148)								::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_3(_gthis,daNote)),null());
            							}
            						}
            					}
            					else {
HXLINE(4167)						_gthis->goodNoteHit(daNote,null());
HXLINE(4168)						::PlayState_obj::boyfriend->holdTimer = ( (Float)(0) );
HXLINE(4169)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cpuStrums",52,86,8a,e0),::hx::paccDynamic)) )) {
            							HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_4, ::PlayState,_gthis, ::Note,daNote) HXARGC(1)
            							void _hx_run( ::StaticArrow spr){
            								HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4173_keyShit)
HXLINE(4173)								_gthis->pressArrow(spr,spr->ID,daNote);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(4171)							::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_4(_gthis,daNote)),null());
            						}
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4129)			this->notes->forEachAlive( ::Dynamic(new _hx_Closure_5(_gthis)),null());
            		}
HXLINE(4190)		bool _hx_tmp2;
HXDLIN(4190)		if ((::PlayState_obj::boyfriend->holdTimer > ((::Conductor_obj::stepCrochet * ( (Float)(4) )) * ((Float)0.001)))) {
HXLINE(4190)			if (holdArray3->contains(true)) {
HXLINE(4190)				_hx_tmp2 = ::PlayStateChangeables_obj::botPlay;
            			}
            			else {
HXLINE(4190)				_hx_tmp2 = true;
            			}
            		}
            		else {
HXLINE(4190)			_hx_tmp2 = false;
            		}
HXDLIN(4190)		if (_hx_tmp2) {
HXLINE(4192)			bool _hx_tmp;
HXDLIN(4192)			bool _hx_tmp1;
HXDLIN(4192)			if (::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c))) {
HXLINE(4192)				_hx_tmp1 = !(::StringTools_obj::endsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("miss",fc,52,5c,48)));
            			}
            			else {
HXLINE(4192)				_hx_tmp1 = false;
            			}
HXDLIN(4192)			if (_hx_tmp1) {
HXLINE(4192)				if ((::PlayState_obj::boyfriend->animation->_curAnim->curFrame < 10)) {
HXLINE(4192)					_hx_tmp = ::PlayState_obj::boyfriend->animation->_curAnim->finished;
            				}
            				else {
HXLINE(4192)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(4192)				_hx_tmp = false;
            			}
HXDLIN(4192)			if (_hx_tmp) {
HXLINE(4193)				::PlayState_obj::boyfriend->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
            			}
            		}
HXLINE(4196)		if (!(::PlayStateChangeables_obj::botPlay)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_6, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::StaticArrow spr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4199_keyShit)
HXLINE(4200)				bool _hx_tmp;
HXDLIN(4200)				bool _hx_tmp1;
HXDLIN(4200)				bool _hx_tmp2;
HXDLIN(4200)				if (_gthis->keys->__get(spr->ID)) {
HXLINE(4200)					_hx_tmp2 = (spr->animation->_curAnim->name != HX_("confirm",00,9d,39,10));
            				}
            				else {
HXLINE(4200)					_hx_tmp2 = false;
            				}
HXDLIN(4200)				if (_hx_tmp2) {
HXLINE(4200)					_hx_tmp1 = (spr->animation->_curAnim->name != HX_("pressed",a2,d2,e6,39));
            				}
            				else {
HXLINE(4200)					_hx_tmp1 = false;
            				}
HXDLIN(4200)				if (_hx_tmp1) {
HXLINE(4200)					_hx_tmp = !(::StringTools_obj::startsWith(spr->animation->_curAnim->name,HX_("dirCon",f5,88,50,bc)));
            				}
            				else {
HXLINE(4200)					_hx_tmp = false;
            				}
HXDLIN(4200)				if (_hx_tmp) {
HXLINE(4201)					spr->playAnim(HX_("pressed",a2,d2,e6,39),false);
            				}
HXLINE(4202)				if (!(_gthis->keys->__get(spr->ID))) {
HXLINE(4203)					spr->playAnim(HX_("static",ae,dc,fb,05),false);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4198)			::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_6(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,keyShit,(void))

::cpp::VirtualArray PlayState_obj::findByTime(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4209_findByTime)
HXLINE(4210)		{
HXLINE(4210)			int _g = 0;
HXDLIN(4210)			::cpp::VirtualArray _g1 = ( (::cpp::VirtualArray)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) );
HXDLIN(4210)			while((_g < _g1->get_length())){
HXLINE(4210)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(4210)				_g = (_g + 1);
HXLINE(4213)				if (::hx::IsEq( i->__GetItem(0),time )) {
HXLINE(4214)					return ( (::cpp::VirtualArray)(i) );
            				}
            			}
            		}
HXLINE(4216)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,findByTime,return )

int PlayState_obj::findByTimeIndex(Float time){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4220_findByTimeIndex)
HXLINE(4221)		{
HXLINE(4221)			int _g = 0;
HXDLIN(4221)			int _g1 = ( (::cpp::VirtualArray)(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic)) )->get_length();
HXDLIN(4221)			while((_g < _g1)){
HXLINE(4221)				_g = (_g + 1);
HXDLIN(4221)				int i = (_g - 1);
HXLINE(4224)				if (::hx::IsEq(  ::Dynamic(::PlayState_obj::rep->replay->__Field(HX_("songNotes",2c,24,45,cf),::hx::paccDynamic))->__GetItem(i)->__GetItem(0),time )) {
HXLINE(4225)					return i;
            				}
            			}
            		}
HXLINE(4227)		return -1;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,findByTimeIndex,return )

void PlayState_obj::focusOut(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4240_focusOut)
HXLINE(4241)		if (this->paused) {
HXLINE(4242)			return;
            		}
HXLINE(4243)		this->persistentUpdate = false;
HXLINE(4244)		this->persistentDraw = true;
HXLINE(4245)		this->paused = true;
HXLINE(4247)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(4249)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(4250)			this->vocals->pause();
            		}
HXLINE(4253)		Float _hx_tmp = ::PlayState_obj::boyfriend->getScreenPosition(null(),null())->x;
HXDLIN(4253)		this->openSubState( ::PauseSubState_obj::__alloc( HX_CTX ,_hx_tmp,::PlayState_obj::boyfriend->getScreenPosition(null(),null())->y));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,focusOut,(void))

void PlayState_obj::focusIn(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4257_focusIn)
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,focusIn,(void))

void PlayState_obj::backgroundVideo(::String source){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4262_backgroundVideo)
HXLINE(4264)		this->useVideo = true;
HXLINE(4266)		::openfl::Lib_obj::get_current()->stage->window->onFocusOut->add(this->focusOut_dyn(),null(),null());
HXLINE(4267)		::openfl::Lib_obj::get_current()->stage->window->onFocusIn->add(this->focusIn_dyn(),null(),null());
HXLINE(4269)		::String ourSource = HX_("assets/videos/daWeirdVid/dontDelete.webm",08,bc,66,81);
HXLINE(4271)		::String str1 = HX_("WEBM SHIT",e7,ff,8c,40);
HXLINE(4272)		::PlayState_obj::webmHandler =  ::WebmHandler_obj::__alloc( HX_CTX );
HXLINE(4273)		::PlayState_obj::webmHandler->source(ourSource);
HXLINE(4274)		::PlayState_obj::webmHandler->makePlayer();
HXLINE(4275)		::PlayState_obj::webmHandler->webm->set_name(str1);
HXLINE(4277)		::GlobalVideo_obj::setWebm(::PlayState_obj::webmHandler);
HXLINE(4279)		::GlobalVideo_obj::get()->__Field(HX_("source",db,b0,31,32),::hx::paccDynamic)(source);
HXLINE(4280)		::GlobalVideo_obj::get()->__Field(HX_("clearPause",29,16,62,92),::hx::paccDynamic)();
HXLINE(4281)		if (::GlobalVideo_obj::isWebm) {
HXLINE(4283)			::GlobalVideo_obj::get()->__Field(HX_("updatePlayer",4a,92,7c,37),::hx::paccDynamic)();
            		}
HXLINE(4285)		::GlobalVideo_obj::get()->__Field(HX_("show",fd,d4,52,4c),::hx::paccDynamic)();
HXLINE(4287)		if (::GlobalVideo_obj::isWebm) {
HXLINE(4289)			::GlobalVideo_obj::get()->__Field(HX_("restart",cf,c7,a5,6a),::hx::paccDynamic)();
            		}
            		else {
HXLINE(4293)			::GlobalVideo_obj::get()->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)();
            		}
HXLINE(4296)		 ::openfl::display::BitmapData data = ::PlayState_obj::webmHandler->webm->get_bitmapData();
HXLINE(4298)		this->videoSprite =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-470,-30,null())->loadGraphic(data,null(),null(),null(),null(),null());
HXLINE(4300)		 ::flixel::FlxSprite _hx_tmp = this->videoSprite;
HXDLIN(4300)		_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->videoSprite->get_width() * ((Float)1.2))),null());
HXLINE(4302)		this->remove(::PlayState_obj::gf,null());
HXLINE(4303)		this->remove(::PlayState_obj::boyfriend,null());
HXLINE(4304)		this->remove(::PlayState_obj::dad,null());
HXLINE(4305)		this->add(this->videoSprite);
HXLINE(4306)		this->add(::PlayState_obj::gf);
HXLINE(4307)		this->add(::PlayState_obj::boyfriend);
HXLINE(4308)		this->add(::PlayState_obj::dad);
HXLINE(4312)		if (!(this->songStarted)) {
HXLINE(4313)			::PlayState_obj::webmHandler->pause();
            		}
            		else {
HXLINE(4315)			::PlayState_obj::webmHandler->resume();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,backgroundVideo,(void))

void PlayState_obj::noteMiss(::hx::Null< int >  __o_direction, ::Note daNote){
            		int direction = __o_direction.Default(1);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4321_noteMiss)
HXDLIN(4321)		if (!(::PlayState_obj::boyfriend->stunned)) {
HXLINE(4323)			bool _hx_tmp;
HXDLIN(4323)			if ((this->combo > 5)) {
HXLINE(4323)				_hx_tmp = ::PlayState_obj::gf->animOffsets->exists(HX_("sad",16,98,57,00));
            			}
            			else {
HXLINE(4323)				_hx_tmp = false;
            			}
HXDLIN(4323)			if (_hx_tmp) {
HXLINE(4325)				::PlayState_obj::gf->playAnim(HX_("sad",16,98,57,00),null(),null(),null());
            			}
HXLINE(4327)			this->combo = 0;
HXLINE(4328)			::PlayState_obj::misses++;
HXLINE(4330)			if (::hx::IsNotNull( daNote )) {
HXLINE(4332)				if (!(::PlayState_obj::loadRep)) {
HXLINE(4334)					this->saveNotes->push(::cpp::VirtualArray_obj::__new(4)->init(0,daNote->strumTime)->init(1,0)->init(2,direction)->init(3,-((( (Float)((166 * ::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))))) ) / ( (Float)(166) )))));
HXLINE(4340)					this->saveJudge->push(HX_("miss",fc,52,5c,48));
            				}
            			}
            			else {
HXLINE(4343)				if (!(::PlayState_obj::loadRep)) {
HXLINE(4345)					this->saveNotes->push(::cpp::VirtualArray_obj::__new(4)->init(0,::Conductor_obj::songPosition)->init(1,0)->init(2,direction)->init(3,-((( (Float)((166 * ::Math_obj::floor(((( (Float)(::PlayState_obj::rep->replay->__Field(HX_("sf",93,64,00,00),::hx::paccDynamic)) ) / ( (Float)(60) )) * ( (Float)(1000) ))))) ) / ( (Float)(166) )))));
HXLINE(4351)					this->saveJudge->push(HX_("miss",fc,52,5c,48));
            				}
            			}
HXLINE(4357)			if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("accuracyMod",09,b2,8a,86),::hx::paccDynamic),1 )) {
HXLINE(4358)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4358)				_hx_tmp->totalNotesHit = (_hx_tmp->totalNotesHit - ( (Float)(1) ));
            			}
HXLINE(4360)			if (::hx::IsNotNull( daNote )) {
HXLINE(4362)				if (!(daNote->isSustainNote)) {
HXLINE(4363)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4363)					_hx_tmp->songScore = (_hx_tmp->songScore - 10);
            				}
            			}
            			else {
HXLINE(4366)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4366)				_hx_tmp->songScore = (_hx_tmp->songScore - 10);
            			}
HXLINE(4368)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("missSounds",e0,d4,49,2b),::hx::paccDynamic)) )) {
HXLINE(4370)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4370)				::String library = null();
HXDLIN(4370)				::String _hx_tmp1 = ::Paths_obj::sound((HX_("missnote",ee,98,f1,e3) + ::flixel::FlxG_obj::random->_hx_int(1,3,null())),library);
HXDLIN(4370)				_hx_tmp->play(_hx_tmp1,::flixel::FlxG_obj::random->_hx_float(((Float)0.1),((Float)0.2),null()),null(),null(),null(),null());
            			}
HXLINE(4377)			switch((int)(daNote->noteType)){
            				case (int)1: {
HXLINE(4380)					::PlayState_obj::dad->playAnim((HX_("stab",c2,e3,5b,4c) + this->stabcounter),true,null(),null());
HXLINE(4384)					this->stabcounter = (::hx::Mod(this->stabcounter,2) + 1);
HXLINE(4387)					::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(direction)) + HX_("miss",fc,52,5c,48)),true,null(),null());
HXLINE(4389)					this->missedStab = true;
            				}
            				break;
            				case (int)2: {
HXLINE(4394)					::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(direction)) + HX_("miss",fc,52,5c,48)),true,null(),null());
            				}
            				break;
            				default:{
HXLINE(4396)					::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(direction)) + HX_("miss",fc,52,5c,48)),true,null(),null());
HXLINE(4397)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4397)					_hx_tmp->health = (_hx_tmp->health - ((Float)0.2));
            				}
            			}
HXLINE(4403)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4404)				::PlayState_obj::luaModchart->executeState(HX_("playerOneMiss",21,1f,37,d5),::cpp::VirtualArray_obj::__new(2)->init(0,direction)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(4407)			this->updateAccuracy();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteMiss,(void))

void PlayState_obj::updateAccuracy(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4432_updateAccuracy)
HXLINE(4433)		 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4433)		_hx_tmp->totalPlayed = (_hx_tmp->totalPlayed + 1);
HXLINE(4434)		this->accuracy = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHit / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(4435)		this->accuracyDefault = ::Math_obj::max(( (Float)(0) ),((this->totalNotesHitDefault / ( (Float)(this->totalPlayed) )) * ( (Float)(100) )));
HXLINE(4437)		 ::flixel::text::FlxText _hx_tmp1 = this->scoreTxt;
HXDLIN(4437)		_hx_tmp1->set_text(::Ratings_obj::CalculateRanking(this->songScore,this->songScoreDef,this->nps,this->maxNPS,this->accuracy));
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateAccuracy,(void))

int PlayState_obj::getKeyPresses( ::Note note){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1,::Array< ::Dynamic>,possibleNotes) HXARGC(1)
            		void _hx_run( ::Note daNote){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4446_getKeyPresses)
HXLINE(4446)			bool _hx_tmp;
HXDLIN(4446)			if (daNote->canBeHit) {
HXLINE(4446)				_hx_tmp = daNote->mustPress;
            			}
            			else {
HXLINE(4446)				_hx_tmp = false;
            			}
HXDLIN(4446)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            				int _hx_run( ::Note a, ::Note b){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4449_getKeyPresses)
HXLINE(4449)					return ::Std_obj::_hx_int((a->strumTime - b->strumTime));
            				}
            				HX_END_LOCAL_FUNC2(return)

HXLINE(4448)				possibleNotes->push(daNote);
HXLINE(4449)				possibleNotes->sort( ::Dynamic(new _hx_Closure_0()));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4441_getKeyPresses)
HXLINE(4442)		::Array< ::Dynamic> possibleNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(4444)		this->notes->forEachAlive( ::Dynamic(new _hx_Closure_1(possibleNotes)),null());
HXLINE(4452)		if ((possibleNotes->length == 1)) {
HXLINE(4453)			return (possibleNotes->length + 1);
            		}
HXLINE(4454)		return possibleNotes->length;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,getKeyPresses,return )

void PlayState_obj::noteCheck(::Array< bool > controlArray, ::Note note){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4463_noteCheck)
HXLINE(4464)		Float noteDiff = -((note->strumTime - ::Conductor_obj::songPosition));
HXLINE(4466)		note->rating = ::Ratings_obj::judgeNote(note);
HXLINE(4481)		if (controlArray->__get(note->noteData)) {
HXLINE(4483)			int _hx_tmp = this->mashing;
HXDLIN(4483)			this->goodNoteHit(note,(_hx_tmp > this->getKeyPresses(note)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,noteCheck,(void))

void PlayState_obj::goodNoteHit( ::Note note,::hx::Null< bool >  __o_resetMashViolation){
            		bool resetMashViolation = __o_resetMashViolation.Default(true);
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4509_goodNoteHit)
HXLINE(4508)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4510)		if ((this->mashing != 0)) {
HXLINE(4511)			this->mashing = 0;
            		}
HXLINE(4513)		Float noteDiff = -(((note->strumTime - ::Conductor_obj::songPosition) / ::PlayState_obj::songMultiplier));
HXLINE(4516)		if (::PlayState_obj::loadRep) {
HXLINE(4518)			noteDiff = ( (Float)(this->findByTime(note->strumTime)->__get(3)) );
HXLINE(4519)			::Array< ::String > _hx_tmp = ( (::Array< ::String >)(::PlayState_obj::rep->replay->__Field(HX_("songJudgements",53,36,93,44),::hx::paccDynamic)) );
HXDLIN(4519)			int _hx_tmp1 = this->findByTimeIndex(note->strumTime);
HXDLIN(4519)			note->rating = _hx_tmp->__get(_hx_tmp1);
            		}
            		else {
HXLINE(4522)			note->rating = ::Ratings_obj::judgeNote(note);
            		}
HXLINE(4524)		if ((note->rating == HX_("miss",fc,52,5c,48))) {
HXLINE(4525)			return;
            		}
HXLINE(4529)		if (!(note->isSustainNote)) {
HXLINE(4530)			::Array< ::Dynamic> _hx_tmp = this->notesHitArray;
HXDLIN(4530)			_hx_tmp->unshift(::Date_obj::now());
            		}
HXLINE(4532)		bool _hx_tmp;
HXDLIN(4532)		if (!(resetMashViolation)) {
HXLINE(4532)			_hx_tmp = (this->mashViolations >= 1);
            		}
            		else {
HXLINE(4532)			_hx_tmp = false;
            		}
HXDLIN(4532)		if (_hx_tmp) {
HXLINE(4533)			this->mashViolations--;
            		}
HXLINE(4535)		if ((this->mashViolations < 0)) {
HXLINE(4536)			this->mashViolations = 0;
            		}
HXLINE(4538)		if (!(note->wasGoodHit)) {
HXLINE(4540)			if (!(note->isSustainNote)) {
HXLINE(4542)				this->popUpScore(note);
HXLINE(4543)				 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4543)				_hx_tmp->combo = (_hx_tmp->combo + 1);
            			}
HXLINE(4546)			::String altAnim = HX_("",00,00,00,00);
HXLINE(4547)			if (note->isAlt) {
HXLINE(4549)				altAnim = HX_("-alt",1c,93,08,1e);
            			}
HXLINE(4554)			switch((int)(note->noteType)){
            				case (int)1: {
HXLINE(4558)					::PlayState_obj::dad->playAnim((HX_("stab",c2,e3,5b,4c) + this->stabcounter),true,null(),null());
HXLINE(4559)					::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(note->noteData)) + altAnim),true,null(),null());
HXLINE(4560)					this->stabcounter = (::hx::Mod(this->stabcounter,2) + 1);
            				}
            				break;
            				case (int)2: {
HXLINE(4563)					::PlayState_obj::boyfriend->playAnim(HX_("screech",e7,b9,36,2a),true,null(),null());
HXLINE(4564)					::flixel::FlxG_obj::camera->shake(((Float)0.01),((Float)1.5),null(),null(),null());
HXLINE(4565)					::PlayState_obj::dad->playAnim(HX_("screamReact",10,b5,8e,91),true,null(),null());
            				}
            				break;
            				default:{
HXLINE(4567)					::PlayState_obj::boyfriend->playAnim(((HX_("sing",4f,96,53,4c) + this->dataSuffix->__get(note->noteData)) + altAnim),true,null(),null());
            				}
            			}
HXLINE(4572)			if (::hx::IsNotNull( ::PlayState_obj::luaModchart )) {
HXLINE(4573)				::PlayState_obj::luaModchart->executeState(HX_("playerOneSing",74,62,2e,d9),::cpp::VirtualArray_obj::__new(2)->init(0,note->noteData)->init(1,::Conductor_obj::songPosition));
            			}
HXLINE(4576)			bool _hx_tmp;
HXDLIN(4576)			if (!(::PlayState_obj::loadRep)) {
HXLINE(4576)				_hx_tmp = note->mustPress;
            			}
            			else {
HXLINE(4576)				_hx_tmp = false;
            			}
HXDLIN(4576)			if (_hx_tmp) {
HXLINE(4578)				::Array< Float > array = ::Array_obj< Float >::__new(4)->init(0,note->strumTime)->init(1,note->sustainLength)->init(2,note->noteData)->init(3,noteDiff);
HXLINE(4579)				if (note->isSustainNote) {
HXLINE(4580)					array[1] = ( (Float)(-1) );
            				}
HXLINE(4581)				this->saveNotes->push(array);
HXLINE(4582)				this->saveJudge->push(note->rating);
            			}
HXLINE(4585)			if (!(::PlayStateChangeables_obj::botPlay)) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis, ::Note,note) HXARGC(1)
            				void _hx_run( ::StaticArrow spr){
            					HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4589_goodNoteHit)
HXLINE(4589)					_gthis->pressArrow(spr,spr->ID,note);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(4587)				::PlayState_obj::playerStrums->forEach( ::Dynamic(new _hx_Closure_0(_gthis,note)),null());
            			}
HXLINE(4593)			if (!(note->isSustainNote)) {
HXLINE(4595)				note->kill();
HXLINE(4596)				this->notes->remove(note,true).StaticCast<  ::Note >();
HXLINE(4597)				note->destroy();
            			}
            			else {
HXLINE(4601)				note->wasGoodHit = true;
            			}
HXLINE(4603)			if (!(note->isSustainNote)) {
HXLINE(4604)				this->updateAccuracy();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,goodNoteHit,(void))

void PlayState_obj::pressArrow( ::StaticArrow spr,int idCheck, ::Note daNote){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4610_pressArrow)
HXDLIN(4610)		if ((::Math_obj::abs(( (Float)(daNote->noteData) )) == idCheck)) {
HXLINE(4612)			if (!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("stepMania",06,56,8a,73),::hx::paccDynamic)) ))) {
HXLINE(4614)				spr->playAnim(HX_("confirm",00,9d,39,10),true);
            			}
            			else {
HXLINE(4618)				spr->playAnim((HX_("dirCon",f5,88,50,bc) + daNote->originColor),true);
HXLINE(4619)				spr->localAngle = daNote->originAngle;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(PlayState_obj,pressArrow,(void))

void PlayState_obj::resetFastCar(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4627_resetFastCar)
HXDLIN(4627)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4629)			 ::Dynamic fastCar = ::PlayState_obj::Stage->swagBacks->get(HX_("fastCar",d8,f2,1f,de));
HXLINE(4630)			fastCar->__SetField(HX_("x",78,00,00,00),-12600,::hx::paccDynamic);
HXLINE(4631)			fastCar->__SetField(HX_("y",79,00,00,00),::flixel::FlxG_obj::random->_hx_int(140,250,null()),::hx::paccDynamic);
HXLINE(4632)			 ::Dynamic(fastCar->__Field(HX_("velocity",1d,02,fe,1e),::hx::paccDynamic))->__SetField(HX_("x",78,00,00,00),0,::hx::paccDynamic);
HXLINE(4633)			this->fastCarCanDrive = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,resetFastCar,(void))

void PlayState_obj::fastCarDrive(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4638_fastCarDrive)
HXLINE(4637)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(4639)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_4647_fastCarDrive)
HXLINE(4647)				_gthis->resetFastCar();
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE(4641)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4641)			::String library = null();
HXDLIN(4641)			_hx_tmp->play(::Paths_obj::sound((HX_("carPass",05,1f,44,b6) + ::flixel::FlxG_obj::random->_hx_int(0,1,null())),library),((Float)0.7),null(),null(),null(),null());
HXLINE(4643)			 ::Dynamic _hx_tmp1 = ::PlayState_obj::Stage->swagBacks->get(HX_("fastCar",d8,f2,1f,de));
HXDLIN(4643)			int _hx_tmp2 = ::flixel::FlxG_obj::random->_hx_int(170,220,null());
HXDLIN(4643)			 ::Dynamic(_hx_tmp1->__Field(HX_("velocity",1d,02,fe,1e),::hx::paccDynamic))->__SetField(HX_("x",78,00,00,00),((( (Float)(_hx_tmp2) ) / ::flixel::FlxG_obj::elapsed) * ( (Float)(3) )),::hx::paccDynamic);
HXLINE(4644)			this->fastCarCanDrive = false;
HXLINE(4645)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,fastCarDrive,(void))

void PlayState_obj::trainStart(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4661_trainStart)
HXDLIN(4661)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4663)			this->trainMoving = true;
HXLINE(4664)			if (::hx::IsNull( ::PlayState_obj::trainSound->_channel )) {
HXLINE(4665)				::PlayState_obj::trainSound->play(true,null(),null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainStart,(void))

void PlayState_obj::updateTrainPos(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4673_updateTrainPos)
HXDLIN(4673)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4675)			if ((::PlayState_obj::trainSound->_time >= 4700)) {
HXLINE(4677)				this->startedMoving = true;
HXLINE(4678)				::PlayState_obj::gf->playAnim(HX_("hairBlow",b4,c9,39,c9),null(),null(),null());
            			}
HXLINE(4681)			if (this->startedMoving) {
HXLINE(4683)				 ::Dynamic phillyTrain = ::PlayState_obj::Stage->swagBacks->get(HX_("phillyTrain",80,9b,65,bb));
HXLINE(4684)				 ::Dynamic phillyTrain1 = phillyTrain;
HXDLIN(4684)				phillyTrain1->__SetField(HX_("x",78,00,00,00),( ::Dynamic(phillyTrain1->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) - 400),::hx::paccDynamic);
HXLINE(4686)				bool _hx_tmp;
HXDLIN(4686)				if (::hx::IsLess( phillyTrain->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),-2000 )) {
HXLINE(4686)					_hx_tmp = !(this->trainFinishing);
            				}
            				else {
HXLINE(4686)					_hx_tmp = false;
            				}
HXDLIN(4686)				if (_hx_tmp) {
HXLINE(4688)					phillyTrain->__SetField(HX_("x",78,00,00,00),-1150,::hx::paccDynamic);
HXLINE(4689)					 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4689)					_hx_tmp->trainCars = (_hx_tmp->trainCars - 1);
HXLINE(4691)					if ((this->trainCars <= 0)) {
HXLINE(4692)						this->trainFinishing = true;
            					}
            				}
HXLINE(4695)				bool _hx_tmp1;
HXDLIN(4695)				if (::hx::IsLess( phillyTrain->__Field(HX_("x",78,00,00,00),::hx::paccDynamic),-4000 )) {
HXLINE(4695)					_hx_tmp1 = this->trainFinishing;
            				}
            				else {
HXLINE(4695)					_hx_tmp1 = false;
            				}
HXDLIN(4695)				if (_hx_tmp1) {
HXLINE(4696)					this->trainReset();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateTrainPos,(void))

void PlayState_obj::trainReset(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4703_trainReset)
HXDLIN(4703)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4705)			::PlayState_obj::gf->playAnim(HX_("hairFall",bd,48,d6,cb),null(),null(),null());
HXLINE(4706)			::PlayState_obj::Stage->swagBacks->get(HX_("phillyTrain",80,9b,65,bb))->__SetField(HX_("x",78,00,00,00),(::flixel::FlxG_obj::width + 200),::hx::paccDynamic);
HXLINE(4707)			this->trainMoving = false;
HXLINE(4710)			this->trainCars = 8;
HXLINE(4711)			this->trainFinishing = false;
HXLINE(4712)			this->startedMoving = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,trainReset,(void))

void PlayState_obj::lightningStrikeShit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4717_lightningStrikeShit)
HXLINE(4718)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(4718)		::String library = null();
HXDLIN(4718)		_hx_tmp->play(::Paths_obj::sound((HX_("thunder_",bb,58,cf,2f) + ::flixel::FlxG_obj::random->_hx_int(1,2,null())),library),null(),null(),null(),null(),null());
HXLINE(4719)		 ::Dynamic(::PlayState_obj::Stage->swagBacks->get(HX_("halloweenBG",92,b2,88,5c))->__Field(HX_("animation",04,ef,34,4b),::hx::paccDynamic))->__Field(HX_("play",f4,2d,5a,4a),::hx::paccDynamic)(HX_("lightning",0a,39,4a,d7));
HXLINE(4721)		this->lightningStrikeBeat = this->curBeat;
HXLINE(4722)		this->lightningOffset = ::flixel::FlxG_obj::random->_hx_int(8,24,null());
HXLINE(4724)		::PlayState_obj::boyfriend->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
HXLINE(4725)		::PlayState_obj::gf->playAnim(HX_("scared",20,78,2a,3c),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,lightningStrikeShit,(void))

void PlayState_obj::stepHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4731_stepHit)
HXLINE(4732)		this->super::stepHit();
HXLINE(4733)		bool _hx_tmp;
HXDLIN(4733)		if (!((::flixel::FlxG_obj::sound->music->_time > (::Conductor_obj::songPosition + 20)))) {
HXLINE(4733)			_hx_tmp = (::flixel::FlxG_obj::sound->music->_time < (::Conductor_obj::songPosition - ( (Float)(20) )));
            		}
            		else {
HXLINE(4733)			_hx_tmp = true;
            		}
HXDLIN(4733)		if (_hx_tmp) {
HXLINE(4735)			this->resyncVocals();
            		}
HXLINE(4738)		if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(4739)			 ::Dynamic step = ::PlayState_obj::Stage->slowBacks->keys();
HXDLIN(4739)			while(( (bool)(step->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(4739)				int step1 = ( (int)(step->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(4741)				if ((step1 == this->curStep)) {
HXLINE(4743)					if (::PlayState_obj::Stage->hideLastBG) {
HXLINE(4745)						{
HXLINE(4745)							 ::Dynamic bg = ::PlayState_obj::Stage->swagBacks->iterator();
HXDLIN(4745)							while(( (bool)(bg->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(4745)								 ::flixel::FlxSprite bg1 = ( ( ::flixel::FlxSprite)(bg->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(4747)								if (!(( (::Array< ::Dynamic>)(::PlayState_obj::Stage->slowBacks->get(step1)) )->contains(bg1))) {
HXLINE(4748)									::flixel::tweens::FlxTween_obj::tween(bg1, ::Dynamic(::hx::Anon_obj::Create(1)
            										->setFixed(0,HX_("alpha",5e,a7,96,21),0)),::PlayState_obj::Stage->tweenDuration,null());
            								}
            							}
            						}
HXLINE(4750)						{
HXLINE(4750)							int _g = 0;
HXDLIN(4750)							::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::Stage->slowBacks->get(step1)) );
HXDLIN(4750)							while((_g < _g1->length)){
HXLINE(4750)								 ::flixel::FlxSprite bg = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(4750)								_g = (_g + 1);
HXLINE(4752)								::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),1)),::PlayState_obj::Stage->tweenDuration,null());
            							}
            						}
            					}
            					else {
HXLINE(4757)						int _g = 0;
HXDLIN(4757)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::Stage->slowBacks->get(step1)) );
HXDLIN(4757)						while((_g < _g1->length)){
HXLINE(4757)							 ::flixel::FlxSprite bg = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(4757)							_g = (_g + 1);
HXLINE(4758)							bg->set_visible(!(bg->visible));
            						}
            					}
            				}
            			}
            		}
HXLINE(4764)		bool _hx_tmp1;
HXDLIN(4764)		if (this->executeModchart) {
HXLINE(4764)			_hx_tmp1 = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(4764)			_hx_tmp1 = false;
            		}
HXDLIN(4764)		if (_hx_tmp1) {
HXLINE(4766)			::PlayState_obj::luaModchart->setVar(HX_("curStep",ec,58,71,b7),this->curStep);
HXLINE(4767)			::PlayState_obj::luaModchart->executeState(HX_("stepHit",67,ae,41,81),::cpp::VirtualArray_obj::__new(1)->init(0,this->curStep));
            		}
            	}


void PlayState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4780_beatHit)
HXLINE(4781)		this->super::beatHit();
HXLINE(4783)		if (this->generatedMusic) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0,int,a1, ::Dynamic,_g) HXARGC(2)
            			int _hx_run( ::Note a2, ::Note a3){
            				HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4785_beatHit)
HXLINE(4785)				return ( (int)(_g(a1,a2,a3)) );
            			}
            			HX_END_LOCAL_FUNC2(return)

HXLINE(4785)			int Order;
HXDLIN(4785)			if (::PlayStateChangeables_obj::useDownscroll) {
HXLINE(4785)				Order = -1;
            			}
            			else {
HXLINE(4785)				Order = 1;
            			}
HXDLIN(4785)			 ::Dynamic _g = ::flixel::util::FlxSort_obj::byY_dyn();
HXDLIN(4785)			int a1 = Order;
HXDLIN(4785)			 ::Dynamic _hx_tmp =  ::Dynamic(new _hx_Closure_0(a1,_g));
HXDLIN(4785)			this->notes->members->sort(_hx_tmp);
            		}
HXLINE(4789)		bool _hx_tmp;
HXDLIN(4789)		if (this->executeModchart) {
HXLINE(4789)			_hx_tmp = ::hx::IsNotNull( ::PlayState_obj::luaModchart );
            		}
            		else {
HXLINE(4789)			_hx_tmp = false;
            		}
HXDLIN(4789)		if (_hx_tmp) {
HXLINE(4791)			::PlayState_obj::luaModchart->executeState(HX_("beatHit",7d,ea,04,74),::cpp::VirtualArray_obj::__new(1)->init(0,this->curBeat));
            		}
HXLINE(4795)		bool _hx_tmp1;
HXDLIN(4795)		bool _hx_tmp2;
HXDLIN(4795)		if ((this->curSong == HX_("Tutorial",be,4b,67,5c))) {
HXLINE(4795)			_hx_tmp2 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            		}
            		else {
HXLINE(4795)			_hx_tmp2 = false;
            		}
HXDLIN(4795)		if (_hx_tmp2) {
HXLINE(4795)			_hx_tmp1 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(4795)			_hx_tmp1 = false;
            		}
HXDLIN(4795)		if (_hx_tmp1) {
HXLINE(4797)			if (( (bool)(this->currentSection->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(4798)				::PlayState_obj::dad->dance(null(),null());
            			}
            			else {
HXLINE(4801)				bool _hx_tmp;
HXDLIN(4801)				bool _hx_tmp1;
HXDLIN(4801)				if ((this->curBeat != 73)) {
HXLINE(4801)					_hx_tmp1 = (::hx::Mod(this->curBeat,4) == 0);
            				}
            				else {
HXLINE(4801)					_hx_tmp1 = true;
            				}
HXDLIN(4801)				if (!(_hx_tmp1)) {
HXLINE(4801)					_hx_tmp = (::hx::Mod(this->curBeat,4) == 1);
            				}
            				else {
HXLINE(4801)					_hx_tmp = true;
            				}
HXDLIN(4801)				if (_hx_tmp) {
HXLINE(4802)					::PlayState_obj::dad->playAnim(HX_("danceLeft",da,cc,f9,df),true,null(),null());
            				}
            				else {
HXLINE(4804)					::PlayState_obj::dad->playAnim(HX_("danceRight",a9,7f,a6,91),true,null(),null());
            				}
            			}
            		}
HXLINE(4808)		if (::hx::IsNotNull( this->currentSection )) {
HXLINE(4815)			bool _hx_tmp;
HXDLIN(4815)			bool _hx_tmp1;
HXDLIN(4815)			if (!(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(4815)				_hx_tmp1 = (::PlayState_obj::dad->curCharacter != HX_("gf",1f,5a,00,00));
            			}
            			else {
HXLINE(4815)				_hx_tmp1 = false;
            			}
HXDLIN(4815)			if (_hx_tmp1) {
HXLINE(4815)				_hx_tmp = !(::StringTools_obj::startsWith(::PlayState_obj::dad->animation->_curAnim->name,HX_("stab",c2,e3,5b,4c)));
            			}
            			else {
HXLINE(4815)				_hx_tmp = false;
            			}
HXDLIN(4815)			if (_hx_tmp) {
HXLINE(4816)				bool _hx_tmp;
HXDLIN(4816)				bool _hx_tmp1;
HXDLIN(4816)				if ((::hx::Mod(this->curBeat,this->idleBeat) != 0)) {
HXLINE(4816)					_hx_tmp1 = !(this->idleToBeat);
            				}
            				else {
HXLINE(4816)					_hx_tmp1 = true;
            				}
HXDLIN(4816)				if (!(_hx_tmp1)) {
HXLINE(4816)					_hx_tmp = (::PlayState_obj::dad->curCharacter == HX_("spooky",eb,bd,9e,c1));
            				}
            				else {
HXLINE(4816)					_hx_tmp = true;
            				}
HXDLIN(4816)				if (_hx_tmp) {
HXLINE(4817)					::PlayState_obj::dad->dance(this->idleToBeat,this->currentSection->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic));
            				}
            			}
            		}
HXLINE(4820)		this->wiggleShit->update(::Conductor_obj::crochet);
HXLINE(4822)		bool _hx_tmp3;
HXDLIN(4822)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("camzoom",a2,ca,10,f1),::hx::paccDynamic)) )) {
HXLINE(4822)			_hx_tmp3 = (::Conductor_obj::bpm < 340);
            		}
            		else {
HXLINE(4822)			_hx_tmp3 = false;
            		}
HXDLIN(4822)		if (_hx_tmp3) {
HXLINE(4825)			bool _hx_tmp;
HXDLIN(4825)			bool _hx_tmp1;
HXDLIN(4825)			bool _hx_tmp2;
HXDLIN(4825)			bool _hx_tmp3;
HXDLIN(4825)			if ((this->curSong.toLowerCase() == HX_("milf",d6,4c,5c,48))) {
HXLINE(4825)				_hx_tmp3 = (this->curBeat >= 168);
            			}
            			else {
HXLINE(4825)				_hx_tmp3 = false;
            			}
HXDLIN(4825)			if (_hx_tmp3) {
HXLINE(4825)				_hx_tmp2 = (this->curBeat < 200);
            			}
            			else {
HXLINE(4825)				_hx_tmp2 = false;
            			}
HXDLIN(4825)			if (_hx_tmp2) {
HXLINE(4825)				_hx_tmp1 = this->camZooming;
            			}
            			else {
HXLINE(4825)				_hx_tmp1 = false;
            			}
HXDLIN(4825)			if (_hx_tmp1) {
HXLINE(4825)				_hx_tmp = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4825)				_hx_tmp = false;
            			}
HXDLIN(4825)			if (_hx_tmp) {
HXLINE(4827)				{
HXLINE(4827)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(4827)					_g->set_zoom((_g->zoom + (((Float)0.015) / ::PlayState_obj::songMultiplier)));
            				}
HXLINE(4828)				{
HXLINE(4828)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(4828)					_g1->set_zoom((_g1->zoom + (((Float)0.03) / ::PlayState_obj::songMultiplier)));
            				}
            			}
HXLINE(4831)			bool _hx_tmp4;
HXDLIN(4831)			bool _hx_tmp5;
HXDLIN(4831)			if (this->camZooming) {
HXLINE(4831)				_hx_tmp5 = (::flixel::FlxG_obj::camera->zoom < ((Float)1.35));
            			}
            			else {
HXLINE(4831)				_hx_tmp5 = false;
            			}
HXDLIN(4831)			if (_hx_tmp5) {
HXLINE(4831)				_hx_tmp4 = (::hx::Mod(this->curBeat,4) == 0);
            			}
            			else {
HXLINE(4831)				_hx_tmp4 = false;
            			}
HXDLIN(4831)			if (_hx_tmp4) {
HXLINE(4833)				{
HXLINE(4833)					 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN(4833)					_g->set_zoom((_g->zoom + (((Float)0.015) / ::PlayState_obj::songMultiplier)));
            				}
HXLINE(4834)				{
HXLINE(4834)					 ::flixel::FlxCamera _g1 = this->camHUD;
HXDLIN(4834)					_g1->set_zoom((_g1->zoom + (((Float)0.03) / ::PlayState_obj::songMultiplier)));
            				}
            			}
            		}
HXLINE(4837)		if ((::Conductor_obj::bpm < 340)) {
HXLINE(4839)			 ::HealthIcon _hx_tmp = this->iconP1;
HXDLIN(4839)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 30)),null());
HXLINE(4840)			 ::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN(4840)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 30)),null());
            		}
            		else {
HXLINE(4848)			 ::HealthIcon _hx_tmp = this->iconP1;
HXDLIN(4848)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->iconP1->get_width() + 4)),null());
HXLINE(4849)			 ::HealthIcon _hx_tmp1 = this->iconP2;
HXDLIN(4849)			_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->iconP2->get_width() + 4)),null());
            		}
HXLINE(4855)		bool _hx_tmp4;
HXDLIN(4855)		if (!(this->endingSong)) {
HXLINE(4855)			_hx_tmp4 = ::hx::IsNotNull( this->currentSection );
            		}
            		else {
HXLINE(4855)			_hx_tmp4 = false;
            		}
HXDLIN(4855)		if (_hx_tmp4) {
HXLINE(4857)			if ((::hx::Mod(this->curBeat,this->gfSpeed) == 0)) {
HXLINE(4859)				::PlayState_obj::gf->dance(null(),null());
HXLINE(4860)				if (::hx::IsNotNull( ::PlayState_obj::gf2 )) {
HXLINE(4860)					::PlayState_obj::gf2->dance(null(),null());
            				}
            			}
HXLINE(4863)			bool _hx_tmp;
HXDLIN(4863)			if (!(::StringTools_obj::startsWith(::PlayState_obj::boyfriend->animation->_curAnim->name,HX_("sing",4f,96,53,4c)))) {
HXLINE(4863)				if ((::hx::Mod(this->curBeat,this->idleBeat) != 0)) {
HXLINE(4863)					_hx_tmp = !(this->idleToBeat);
            				}
            				else {
HXLINE(4863)					_hx_tmp = true;
            				}
            			}
            			else {
HXLINE(4863)				_hx_tmp = false;
            			}
HXDLIN(4863)			if (_hx_tmp) {
HXLINE(4865)				 ::Boyfriend _hx_tmp = ::PlayState_obj::boyfriend;
HXDLIN(4865)				::String _hx_tmp1;
HXDLIN(4865)				bool _hx_tmp2;
HXDLIN(4865)				if (( (bool)(this->currentSection->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) )) {
HXLINE(4865)					_hx_tmp2 = ::hx::IsNotNull( ::PlayState_obj::boyfriend->animation->_animations->get(HX_("idle-alt",30,54,1f,28)) );
            				}
            				else {
HXLINE(4865)					_hx_tmp2 = false;
            				}
HXDLIN(4865)				if (_hx_tmp2) {
HXLINE(4865)					_hx_tmp1 = HX_("-alt",1c,93,08,1e);
            				}
            				else {
HXLINE(4865)					_hx_tmp1 = HX_("",00,00,00,00);
            				}
HXDLIN(4865)				_hx_tmp->playAnim((HX_("idle",14,a7,b3,45) + _hx_tmp1),this->idleToBeat,null(),null());
            			}
HXLINE(4873)			bool _hx_tmp1;
HXDLIN(4873)			if ((::hx::Mod(this->curBeat,8) == 7)) {
HXLINE(4873)				_hx_tmp1 = (this->curSong == HX_("Bopeebo",90,29,16,da));
            			}
            			else {
HXLINE(4873)				_hx_tmp1 = false;
            			}
HXDLIN(4873)			if (_hx_tmp1) {
HXLINE(4875)				::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            			}
HXLINE(4878)			bool _hx_tmp2;
HXDLIN(4878)			if ((this->curBeat == 15)) {
HXLINE(4878)				_hx_tmp2 = (this->curSong == HX_("Grappler",63,b2,65,f1));
            			}
            			else {
HXLINE(4878)				_hx_tmp2 = false;
            			}
HXDLIN(4878)			if (_hx_tmp2) {
HXLINE(4880)				::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
            			}
HXLINE(4884)			bool _hx_tmp3;
HXDLIN(4884)			bool _hx_tmp4;
HXDLIN(4884)			bool _hx_tmp5;
HXDLIN(4884)			bool _hx_tmp6;
HXDLIN(4884)			if ((::hx::Mod(this->curBeat,16) == 15)) {
HXLINE(4884)				_hx_tmp6 = ::hx::IsEq( ::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic),HX_("Tutorial",be,4b,67,5c) );
            			}
            			else {
HXLINE(4884)				_hx_tmp6 = false;
            			}
HXDLIN(4884)			if (_hx_tmp6) {
HXLINE(4884)				_hx_tmp5 = (::PlayState_obj::dad->curCharacter == HX_("gf",1f,5a,00,00));
            			}
            			else {
HXLINE(4884)				_hx_tmp5 = false;
            			}
HXDLIN(4884)			if (_hx_tmp5) {
HXLINE(4884)				_hx_tmp4 = (this->curBeat > 16);
            			}
            			else {
HXLINE(4884)				_hx_tmp4 = false;
            			}
HXDLIN(4884)			if (_hx_tmp4) {
HXLINE(4884)				_hx_tmp3 = (this->curBeat < 48);
            			}
            			else {
HXLINE(4884)				_hx_tmp3 = false;
            			}
HXDLIN(4884)			if (_hx_tmp3) {
HXLINE(4886)				::PlayState_obj::boyfriend->playAnim(HX_("hey",dc,42,4f,00),true,null(),null());
HXLINE(4887)				::PlayState_obj::dad->playAnim(HX_("cheer",8d,9a,b6,45),true,null(),null());
            			}
HXLINE(4890)			if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(4891)				::String _hx_switch_0 = ::PlayState_obj::Stage->curStage;
            				if (  (_hx_switch_0==HX_("downtown",b4,33,10,97)) ){
HXLINE(4949)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4952)						 ::flixel::group::FlxTypedGroup downtownWindows = ( ( ::flixel::group::FlxTypedGroup)(::PlayState_obj::Stage->swagGroup->get(HX_("downtownWindows",2f,71,ea,64))) );
HXLINE(4954)						downtownWindows->members->__get(0)->__SetField(HX_("visible",72,78,24,a3),true,::hx::paccDynamic);
HXLINE(4956)						if ((::hx::Mod(this->curBeat,4) == 0)) {
            							HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            							void _hx_run( ::flixel::FlxSprite windows){
            								HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4961_beatHit)
HXLINE(4961)								windows->set_visible(false);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(4959)							downtownWindows->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE(4964)							::PlayState_obj::lastWindow = ::PlayState_obj::curWindow;
HXLINE(4965)							while((::PlayState_obj::curWindow == ::PlayState_obj::lastWindow)){
HXLINE(4968)								::PlayState_obj::curWindow = ::flixel::FlxG_obj::random->_hx_int(0,(downtownWindows->length - 1),null());
            							}
HXLINE(4973)							downtownWindows->members->__get(::PlayState_obj::curWindow)->__SetField(HX_("visible",72,78,24,a3),true,::hx::paccDynamic);
            						}
            					}
HXLINE(4977)					if ((this->curSong == HX_("Imminence",59,26,98,ca))) {
HXLINE(4979)						switch((int)(this->curBeat)){
            							case (int)152: {
HXLINE(4983)								::flixel::FlxG_obj::camera->flash(-5832688,((Float)0.5),null(),true);
HXLINE(4984)								::PlayState_obj::Stage->swagBacks->get(HX_("shade",ad,d8,1c,7c))->__SetField(HX_("visible",72,78,24,a3),true,::hx::paccDynamic);
HXLINE(4991)								::PlayState_obj::gf2->set_x(::PlayState_obj::gf->x);
HXLINE(4992)								::PlayState_obj::gf2->set_y(::PlayState_obj::gf->y);
HXLINE(4993)								::PlayState_obj::gf2->set_visible(true);
HXLINE(4994)								::PlayState_obj::gf->set_visible(false);
            							}
            							break;
            							case (int)216: {
HXLINE(5008)								::flixel::FlxG_obj::camera->flash((int)-1358951257,((Float)0.5),null(),true);
HXLINE(5009)								::PlayState_obj::Stage->swagBacks->get(HX_("shade",ad,d8,1c,7c))->__SetField(HX_("visible",72,78,24,a3),false,::hx::paccDynamic);
HXLINE(5010)								::PlayState_obj::gf2->set_visible(false);
HXLINE(5011)								::PlayState_obj::gf->set_visible(true);
            							}
            							break;
            							default:{
            							}
            						}
            					}
HXLINE(4947)					goto _hx_goto_179;
            				}
            				if (  (_hx_switch_0==HX_("liminalHell",3d,fa,dc,88)) ){
HXLINE(5024)					if ((this->curBeat == 288)) {
HXLINE(5028)						::PlayState_obj::Stage->swagBacks->get(HX_("Hill",e1,67,e7,2f))->__SetField(HX_("visible",72,78,24,a3),false,::hx::paccDynamic);
HXLINE(5029)						::PlayState_obj::Stage->swagBacks->get(HX_("Hell",dd,5e,e4,2f))->__SetField(HX_("visible",72,78,24,a3),true,::hx::paccDynamic);
HXLINE(5030)						::flixel::FlxG_obj::camera->flash(-65536,2,null(),null());
            					}
HXLINE(5024)					goto _hx_goto_179;
            				}
            				if (  (_hx_switch_0==HX_("limo",1f,17,b3,47)) ){
HXLINE(4907)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
            						HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            						void _hx_run( ::BackgroundDancer dancer){
            							HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4911_beatHit)
HXLINE(4911)							dancer->dance();
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE(4909)						( ( ::flixel::group::FlxTypedGroup)(::PlayState_obj::Stage->swagGroup->get(HX_("grpLimoDancers",70,18,93,51))) )->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE(4914)						bool _hx_tmp;
HXDLIN(4914)						if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 10)) {
HXLINE(4914)							_hx_tmp = this->fastCarCanDrive;
            						}
            						else {
HXLINE(4914)							_hx_tmp = false;
            						}
HXDLIN(4914)						if (_hx_tmp) {
HXLINE(4915)							this->fastCarDrive();
            						}
            					}
HXLINE(4907)					goto _hx_goto_179;
            				}
            				if (  (_hx_switch_0==HX_("mall",d4,3a,56,48)) ){
HXLINE(4900)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4902)						int _g = 0;
HXDLIN(4902)						::Array< ::Dynamic> _g1 = ::PlayState_obj::Stage->animatedBacks;
HXDLIN(4902)						while((_g < _g1->length)){
HXLINE(4902)							 ::flixel::FlxSprite bg = _g1->__get(_g).StaticCast<  ::flixel::FlxSprite >();
HXDLIN(4902)							_g = (_g + 1);
HXLINE(4903)							bg->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
            						}
            					}
HXLINE(4900)					goto _hx_goto_179;
            				}
            				if (  (_hx_switch_0==HX_("philly",28,77,5e,ef)) ){
HXLINE(4918)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4920)						if (!(this->trainMoving)) {
HXLINE(4921)							 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(4921)							_hx_tmp->trainCooldown = (_hx_tmp->trainCooldown + 1);
            						}
HXLINE(4923)						if ((::hx::Mod(this->curBeat,4) == 0)) {
            							HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            							void _hx_run( ::flixel::FlxSprite light){
            								HX_STACKFRAME(&_hx_pos_af23706db05c7feb_4928_beatHit)
HXLINE(4928)								light->set_visible(false);
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE(4925)							 ::flixel::group::FlxTypedGroup phillyCityLights = ( ( ::flixel::group::FlxTypedGroup)(::PlayState_obj::Stage->swagGroup->get(HX_("phillyCityLights",30,e0,12,1f))) );
HXLINE(4926)							phillyCityLights->forEach( ::Dynamic(new _hx_Closure_3()),null());
HXLINE(4931)							this->curLight = ::flixel::FlxG_obj::random->_hx_int(0,(phillyCityLights->length - 1),null());
HXLINE(4933)							phillyCityLights->members->__get(this->curLight)->__SetField(HX_("visible",72,78,24,a3),true,::hx::paccDynamic);
            						}
            					}
HXLINE(4938)					bool _hx_tmp;
HXDLIN(4938)					bool _hx_tmp1;
HXDLIN(4938)					bool _hx_tmp2;
HXDLIN(4938)					if ((::hx::Mod(this->curBeat,8) == 4)) {
HXLINE(4938)						Float Chance;
HXDLIN(4938)						if ((::Conductor_obj::bpm > 320)) {
HXLINE(4938)							Chance = ( (Float)(150) );
            						}
            						else {
HXLINE(4938)							Chance = ( (Float)(30) );
            						}
HXDLIN(4938)						_hx_tmp2 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < Chance);
            					}
            					else {
HXLINE(4938)						_hx_tmp2 = false;
            					}
HXDLIN(4938)					if (_hx_tmp2) {
HXLINE(4938)						_hx_tmp1 = !(this->trainMoving);
            					}
            					else {
HXLINE(4938)						_hx_tmp1 = false;
            					}
HXDLIN(4938)					if (_hx_tmp1) {
HXLINE(4938)						_hx_tmp = (this->trainCooldown > 8);
            					}
            					else {
HXLINE(4938)						_hx_tmp = false;
            					}
HXDLIN(4938)					if (_hx_tmp) {
HXLINE(4940)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4942)							this->trainCooldown = ::flixel::FlxG_obj::random->_hx_int(-4,0,null());
HXLINE(4943)							this->trainStart();
            						}
            					}
HXLINE(4917)					goto _hx_goto_179;
            				}
            				if (  (_hx_switch_0==HX_("school",74,b8,c8,40)) ){
HXLINE(4894)					bool _hx_tmp;
HXDLIN(4894)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(4894)						_hx_tmp = ::hx::IsNotNull( ::PlayState_obj::Stage->swagBacks->get(HX_("bgGirls",92,16,2b,41)) );
            					}
            					else {
HXLINE(4894)						_hx_tmp = false;
            					}
HXDLIN(4894)					if (_hx_tmp) {
HXLINE(4896)						::PlayState_obj::Stage->swagBacks->get(HX_("bgGirls",92,16,2b,41))->__Field(HX_("dance",33,83,83,d4),::hx::paccDynamic)();
            					}
HXLINE(4894)					goto _hx_goto_179;
            				}
            				_hx_goto_179:;
            			}
HXLINE(5036)			if (!(::PlayStateChangeables_obj::Optimize)) {
HXLINE(5037)				bool _hx_tmp;
HXDLIN(5037)				bool _hx_tmp1;
HXDLIN(5037)				if (::PlayState_obj::Stage->halloweenLevel) {
HXLINE(5037)					Float Chance;
HXDLIN(5037)					if ((::Conductor_obj::bpm > 320)) {
HXLINE(5037)						Chance = ( (Float)(100) );
            					}
            					else {
HXLINE(5037)						Chance = ( (Float)(10) );
            					}
HXDLIN(5037)					_hx_tmp1 = (::flixel::FlxG_obj::random->_hx_float(0,100,null()) < Chance);
            				}
            				else {
HXLINE(5037)					_hx_tmp1 = false;
            				}
HXDLIN(5037)				if (_hx_tmp1) {
HXLINE(5037)					_hx_tmp = (this->curBeat > (this->lightningStrikeBeat + this->lightningOffset));
            				}
            				else {
HXLINE(5037)					_hx_tmp = false;
            				}
HXDLIN(5037)				if (_hx_tmp) {
HXLINE(5039)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("distractions",31,13,7d,60),::hx::paccDynamic)) )) {
HXLINE(5041)						this->lightningStrikeShit();
            					}
            				}
            			}
            		}
            	}


void PlayState_obj::poggers( ::Dynamic __o_cleanTheSong){
            		 ::Dynamic cleanTheSong = __o_cleanTheSong;
            		if (::hx::IsNull(__o_cleanTheSong)) cleanTheSong = false;
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_5050_poggers)
HXLINE(5051)		::Array< ::Dynamic> notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5053)		if (( (bool)(cleanTheSong) )) {
HXLINE(5055)			this->cleanedSong = ::PlayState_obj::SONG;
HXLINE(5057)			{
HXLINE(5057)				int _g = 0;
HXDLIN(5057)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(this->cleanedSong->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5057)				while((_g < _g1->length)){
HXLINE(5057)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(5057)					_g = (_g + 1);
HXLINE(5060)					::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5062)					{
HXLINE(5062)						int _g2 = 0;
HXDLIN(5062)						::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(5062)						while((_g2 < _g3->length)){
HXLINE(5062)							::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(5062)							_g2 = (_g2 + 1);
HXLINE(5065)							 ::Dynamic old = note->__get(0);
HXLINE(5066)							if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5068)								notes->push(note);
HXLINE(5069)								removed->push(note);
            							}
HXLINE(5071)							if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(5073)								notes->push(note);
HXLINE(5074)								removed->push(note);
            							}
            						}
            					}
HXLINE(5078)					{
HXLINE(5078)						int _g4 = 0;
HXDLIN(5078)						while((_g4 < removed->length)){
HXLINE(5078)							::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(5078)							_g4 = (_g4 + 1);
HXLINE(5080)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5084)			{
HXLINE(5084)				int _g2 = 0;
HXDLIN(5084)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(this->cleanedSong->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5084)				while((_g2 < _g3->length)){
HXLINE(5084)					 ::Dynamic section = _g3->__get(_g2);
HXDLIN(5084)					_g2 = (_g2 + 1);
HXLINE(5087)					::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5089)					{
HXLINE(5089)						int _g = 0;
HXDLIN(5089)						while((_g < notes->length)){
HXLINE(5089)							::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(5089)							_g = (_g + 1);
HXLINE(5091)							bool _hx_tmp;
HXDLIN(5091)							if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5091)								_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            							}
            							else {
HXLINE(5091)								_hx_tmp = false;
            							}
HXDLIN(5091)							if (_hx_tmp) {
HXLINE(5093)								saveRemove->push(i);
HXLINE(5094)								( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            							}
            						}
            					}
HXLINE(5098)					{
HXLINE(5098)						int _g1 = 0;
HXDLIN(5098)						while((_g1 < saveRemove->length)){
HXLINE(5098)							::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(5098)							_g1 = (_g1 + 1);
HXLINE(5099)							notes->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5107)			::PlayState_obj::SONG = this->cleanedSong;
            		}
            		else {
HXLINE(5112)			{
HXLINE(5112)				int _g = 0;
HXDLIN(5112)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5112)				while((_g < _g1->length)){
HXLINE(5112)					 ::Dynamic section = _g1->__get(_g);
HXDLIN(5112)					_g = (_g + 1);
HXLINE(5115)					::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5117)					{
HXLINE(5117)						int _g2 = 0;
HXDLIN(5117)						::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(5117)						while((_g2 < _g3->length)){
HXLINE(5117)							::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(5117)							_g2 = (_g2 + 1);
HXLINE(5120)							 ::Dynamic old = note->__get(0);
HXLINE(5121)							if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5123)								notes->push(note);
HXLINE(5124)								removed->push(note);
            							}
HXLINE(5126)							if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(5128)								notes->push(note);
HXLINE(5129)								removed->push(note);
            							}
            						}
            					}
HXLINE(5133)					{
HXLINE(5133)						int _g4 = 0;
HXDLIN(5133)						while((_g4 < removed->length)){
HXLINE(5133)							::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(5133)							_g4 = (_g4 + 1);
HXLINE(5135)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5139)			{
HXLINE(5139)				int _g2 = 0;
HXDLIN(5139)				::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(::PlayState_obj::SONG->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(5139)				while((_g2 < _g3->length)){
HXLINE(5139)					 ::Dynamic section = _g3->__get(_g2);
HXDLIN(5139)					_g2 = (_g2 + 1);
HXLINE(5142)					::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(5144)					{
HXLINE(5144)						int _g = 0;
HXDLIN(5144)						while((_g < notes->length)){
HXLINE(5144)							::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(5144)							_g = (_g + 1);
HXLINE(5146)							bool _hx_tmp;
HXDLIN(5146)							if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(5146)								_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            							}
            							else {
HXLINE(5146)								_hx_tmp = false;
            							}
HXDLIN(5146)							if (_hx_tmp) {
HXLINE(5148)								saveRemove->push(i);
HXLINE(5149)								( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            							}
            						}
            					}
HXLINE(5153)					{
HXLINE(5153)						int _g1 = 0;
HXDLIN(5153)						while((_g1 < saveRemove->length)){
HXLINE(5153)							::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(5153)							_g1 = (_g1 + 1);
HXLINE(5154)							notes->remove(i);
            						}
            					}
            				}
            			}
HXLINE(5162)			::PlayState_obj::SONG = this->cleanedSong;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,poggers,(void))

 ::PlayState PlayState_obj::instance;

 ::Dynamic PlayState_obj::SONG;

bool PlayState_obj::isStoryMode;

int PlayState_obj::storyWeek;

::Array< ::String > PlayState_obj::storyPlaylist;

int PlayState_obj::storyDifficulty;

int PlayState_obj::weekSong;

int PlayState_obj::weekScore;

int PlayState_obj::shits;

int PlayState_obj::bads;

int PlayState_obj::goods;

int PlayState_obj::sicks;

 ::flixel::FlxSprite PlayState_obj::songPosBG;

 ::flixel::ui::FlxBar PlayState_obj::songPosBar;

 ::Replay PlayState_obj::rep;

bool PlayState_obj::loadRep;

bool PlayState_obj::inResults;

::Array< bool > PlayState_obj::noteBools;

bool PlayState_obj::isSM;

 ::smTools::SMFile PlayState_obj::sm;

::String PlayState_obj::pathToSm;

 ::Character PlayState_obj::dad;

 ::Character PlayState_obj::gf;

 ::Character PlayState_obj::gf2;

 ::Boyfriend PlayState_obj::boyfriend;

 ::flixel::FlxObject PlayState_obj::prevCamFollow;

 ::flixel::group::FlxTypedGroup PlayState_obj::strumLineNotes;

 ::flixel::group::FlxTypedGroup PlayState_obj::playerStrums;

 ::flixel::group::FlxTypedGroup PlayState_obj::cpuStrums;

int PlayState_obj::misses;

int PlayState_obj::campaignMisses;

int PlayState_obj::campaignSicks;

int PlayState_obj::campaignGoods;

int PlayState_obj::campaignBads;

int PlayState_obj::campaignShits;

bool PlayState_obj::offsetTesting;

 ::flixel::_hx_system::FlxSound PlayState_obj::trainSound;

int PlayState_obj::campaignScore;

Float PlayState_obj::daPixelZoom;

bool PlayState_obj::theFunne;

 ::Stage PlayState_obj::Stage;

int PlayState_obj::repPresses;

int PlayState_obj::repReleases;

Float PlayState_obj::timeCurrently;

Float PlayState_obj::timeCurrentlyR;

int PlayState_obj::curWindow;

int PlayState_obj::lastWindow;

Float PlayState_obj::songOffset;

int PlayState_obj::highestCombo;

Float PlayState_obj::startTime;

 ::ModchartState PlayState_obj::luaModchart;

Float PlayState_obj::songMultiplier;

Float PlayState_obj::songRate;

 ::WebmHandler PlayState_obj::webmHandler;


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(visibleCombos,"visibleCombos");
	HX_MARK_MEMBER_NAME(visibleNotes,"visibleNotes");
	HX_MARK_MEMBER_NAME(songLength,"songLength");
	HX_MARK_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_MARK_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_MARK_MEMBER_NAME(iconRPC,"iconRPC");
	HX_MARK_MEMBER_NAME(detailsText,"detailsText");
	HX_MARK_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(originalX,"originalX");
	HX_MARK_MEMBER_NAME(notes,"notes");
	HX_MARK_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camZooming,"camZooming");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_MARK_MEMBER_NAME(health,"health");
	HX_MARK_MEMBER_NAME(combo,"combo");
	HX_MARK_MEMBER_NAME(accuracy,"accuracy");
	HX_MARK_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_MARK_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_MARK_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_MARK_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_MARK_MEMBER_NAME(ss,"ss");
	HX_MARK_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_MARK_MEMBER_NAME(healthBar,"healthBar");
	HX_MARK_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_MARK_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_MARK_MEMBER_NAME(startingSong,"startingSong");
	HX_MARK_MEMBER_NAME(iconP1,"iconP1");
	HX_MARK_MEMBER_NAME(iconP2,"iconP2");
	HX_MARK_MEMBER_NAME(camHUD,"camHUD");
	HX_MARK_MEMBER_NAME(camSustains,"camSustains");
	HX_MARK_MEMBER_NAME(camNotes,"camNotes");
	HX_MARK_MEMBER_NAME(camGame,"camGame");
	HX_MARK_MEMBER_NAME(cannotDie,"cannotDie");
	HX_MARK_MEMBER_NAME(isSMFile,"isSMFile");
	HX_MARK_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_MARK_MEMBER_NAME(currentFrames,"currentFrames");
	HX_MARK_MEMBER_NAME(idleToBeat,"idleToBeat");
	HX_MARK_MEMBER_NAME(idleBeat,"idleBeat");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(songName,"songName");
	HX_MARK_MEMBER_NAME(currentSection,"currentSection");
	HX_MARK_MEMBER_NAME(fc,"fc");
	HX_MARK_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_MARK_MEMBER_NAME(talking,"talking");
	HX_MARK_MEMBER_NAME(songScore,"songScore");
	HX_MARK_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_MARK_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_MARK_MEMBER_NAME(replayTxt,"replayTxt");
	HX_MARK_MEMBER_NAME(funneEffect,"funneEffect");
	HX_MARK_MEMBER_NAME(inCutscene,"inCutscene");
	HX_MARK_MEMBER_NAME(usedTimeTravel,"usedTimeTravel");
	HX_MARK_MEMBER_NAME(randomVar,"randomVar");
	HX_MARK_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_MARK_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_MARK_MEMBER_NAME(botPlayState,"botPlayState");
	HX_MARK_MEMBER_NAME(saveNotes,"saveNotes");
	HX_MARK_MEMBER_NAME(saveJudge,"saveJudge");
	HX_MARK_MEMBER_NAME(replayAna,"replayAna");
	HX_MARK_MEMBER_NAME(executeModchart,"executeModchart");
	HX_MARK_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_MARK_MEMBER_NAME(dataColor,"dataColor");
	HX_MARK_MEMBER_NAME(stabcounter,"stabcounter");
	HX_MARK_MEMBER_NAME(missedStab,"missedStab");
	HX_MARK_MEMBER_NAME(startTimer,"startTimer");
	HX_MARK_MEMBER_NAME(perfectMode,"perfectMode");
	HX_MARK_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_MARK_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_MARK_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_MARK_MEMBER_NAME(songTime,"songTime");
	HX_MARK_MEMBER_NAME(keys,"keys");
	HX_MARK_MEMBER_NAME(closestNotes,"closestNotes");
	HX_MARK_MEMBER_NAME(songStarted,"songStarted");
	HX_MARK_MEMBER_NAME(doAnything,"doAnything");
	HX_MARK_MEMBER_NAME(previousRate,"previousRate");
	HX_MARK_MEMBER_NAME(debugNum,"debugNum");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_MARK_MEMBER_NAME(canPause,"canPause");
	HX_MARK_MEMBER_NAME(nps,"nps");
	HX_MARK_MEMBER_NAME(maxNPS,"maxNPS");
	HX_MARK_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_MARK_MEMBER_NAME(removedVideo,"removedVideo");
	HX_MARK_MEMBER_NAME(currentBPM,"currentBPM");
	HX_MARK_MEMBER_NAME(updateFrame,"updateFrame");
	HX_MARK_MEMBER_NAME(pastScrollChanges,"pastScrollChanges");
	HX_MARK_MEMBER_NAME(currentLuaIndex,"currentLuaIndex");
	HX_MARK_MEMBER_NAME(endingSong,"endingSong");
	HX_MARK_MEMBER_NAME(hits,"hits");
	HX_MARK_MEMBER_NAME(offsetTest,"offsetTest");
	HX_MARK_MEMBER_NAME(timeShown,"timeShown");
	HX_MARK_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_MARK_MEMBER_NAME(upHold,"upHold");
	HX_MARK_MEMBER_NAME(downHold,"downHold");
	HX_MARK_MEMBER_NAME(rightHold,"rightHold");
	HX_MARK_MEMBER_NAME(leftHold,"leftHold");
	HX_MARK_MEMBER_NAME(fuckingVolume,"fuckingVolume");
	HX_MARK_MEMBER_NAME(useVideo,"useVideo");
	HX_MARK_MEMBER_NAME(playingDathing,"playingDathing");
	HX_MARK_MEMBER_NAME(videoSprite,"videoSprite");
	HX_MARK_MEMBER_NAME(mashing,"mashing");
	HX_MARK_MEMBER_NAME(mashViolations,"mashViolations");
	HX_MARK_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_MARK_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_MARK_MEMBER_NAME(trainMoving,"trainMoving");
	HX_MARK_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_MARK_MEMBER_NAME(trainCars,"trainCars");
	HX_MARK_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_MARK_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_MARK_MEMBER_NAME(startedMoving,"startedMoving");
	HX_MARK_MEMBER_NAME(danced,"danced");
	HX_MARK_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_MARK_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_MARK_MEMBER_NAME(cleanedSong,"cleanedSong");
	HX_MARK_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(visibleCombos,"visibleCombos");
	HX_VISIT_MEMBER_NAME(visibleNotes,"visibleNotes");
	HX_VISIT_MEMBER_NAME(songLength,"songLength");
	HX_VISIT_MEMBER_NAME(kadeEngineWatermark,"kadeEngineWatermark");
	HX_VISIT_MEMBER_NAME(storyDifficultyText,"storyDifficultyText");
	HX_VISIT_MEMBER_NAME(iconRPC,"iconRPC");
	HX_VISIT_MEMBER_NAME(detailsText,"detailsText");
	HX_VISIT_MEMBER_NAME(detailsPausedText,"detailsPausedText");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(originalX,"originalX");
	HX_VISIT_MEMBER_NAME(notes,"notes");
	HX_VISIT_MEMBER_NAME(unspawnNotes,"unspawnNotes");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camZooming,"camZooming");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(gfSpeed,"gfSpeed");
	HX_VISIT_MEMBER_NAME(health,"health");
	HX_VISIT_MEMBER_NAME(combo,"combo");
	HX_VISIT_MEMBER_NAME(accuracy,"accuracy");
	HX_VISIT_MEMBER_NAME(accuracyDefault,"accuracyDefault");
	HX_VISIT_MEMBER_NAME(totalNotesHit,"totalNotesHit");
	HX_VISIT_MEMBER_NAME(totalNotesHitDefault,"totalNotesHitDefault");
	HX_VISIT_MEMBER_NAME(totalPlayed,"totalPlayed");
	HX_VISIT_MEMBER_NAME(ss,"ss");
	HX_VISIT_MEMBER_NAME(healthBarBG,"healthBarBG");
	HX_VISIT_MEMBER_NAME(healthBar,"healthBar");
	HX_VISIT_MEMBER_NAME(songPositionBar,"songPositionBar");
	HX_VISIT_MEMBER_NAME(generatedMusic,"generatedMusic");
	HX_VISIT_MEMBER_NAME(startingSong,"startingSong");
	HX_VISIT_MEMBER_NAME(iconP1,"iconP1");
	HX_VISIT_MEMBER_NAME(iconP2,"iconP2");
	HX_VISIT_MEMBER_NAME(camHUD,"camHUD");
	HX_VISIT_MEMBER_NAME(camSustains,"camSustains");
	HX_VISIT_MEMBER_NAME(camNotes,"camNotes");
	HX_VISIT_MEMBER_NAME(camGame,"camGame");
	HX_VISIT_MEMBER_NAME(cannotDie,"cannotDie");
	HX_VISIT_MEMBER_NAME(isSMFile,"isSMFile");
	HX_VISIT_MEMBER_NAME(notesHitArray,"notesHitArray");
	HX_VISIT_MEMBER_NAME(currentFrames,"currentFrames");
	HX_VISIT_MEMBER_NAME(idleToBeat,"idleToBeat");
	HX_VISIT_MEMBER_NAME(idleBeat,"idleBeat");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(songName,"songName");
	HX_VISIT_MEMBER_NAME(currentSection,"currentSection");
	HX_VISIT_MEMBER_NAME(fc,"fc");
	HX_VISIT_MEMBER_NAME(wiggleShit,"wiggleShit");
	HX_VISIT_MEMBER_NAME(talking,"talking");
	HX_VISIT_MEMBER_NAME(songScore,"songScore");
	HX_VISIT_MEMBER_NAME(songScoreDef,"songScoreDef");
	HX_VISIT_MEMBER_NAME(scoreTxt,"scoreTxt");
	HX_VISIT_MEMBER_NAME(replayTxt,"replayTxt");
	HX_VISIT_MEMBER_NAME(funneEffect,"funneEffect");
	HX_VISIT_MEMBER_NAME(inCutscene,"inCutscene");
	HX_VISIT_MEMBER_NAME(usedTimeTravel,"usedTimeTravel");
	HX_VISIT_MEMBER_NAME(randomVar,"randomVar");
	HX_VISIT_MEMBER_NAME(triggeredAlready,"triggeredAlready");
	HX_VISIT_MEMBER_NAME(allowedToHeadbang,"allowedToHeadbang");
	HX_VISIT_MEMBER_NAME(botPlayState,"botPlayState");
	HX_VISIT_MEMBER_NAME(saveNotes,"saveNotes");
	HX_VISIT_MEMBER_NAME(saveJudge,"saveJudge");
	HX_VISIT_MEMBER_NAME(replayAna,"replayAna");
	HX_VISIT_MEMBER_NAME(executeModchart,"executeModchart");
	HX_VISIT_MEMBER_NAME(dataSuffix,"dataSuffix");
	HX_VISIT_MEMBER_NAME(dataColor,"dataColor");
	HX_VISIT_MEMBER_NAME(stabcounter,"stabcounter");
	HX_VISIT_MEMBER_NAME(missedStab,"missedStab");
	HX_VISIT_MEMBER_NAME(startTimer,"startTimer");
	HX_VISIT_MEMBER_NAME(perfectMode,"perfectMode");
	HX_VISIT_MEMBER_NAME(luaWiggles,"luaWiggles");
	HX_VISIT_MEMBER_NAME(previousFrameTime,"previousFrameTime");
	HX_VISIT_MEMBER_NAME(lastReportedPlayheadPosition,"lastReportedPlayheadPosition");
	HX_VISIT_MEMBER_NAME(songTime,"songTime");
	HX_VISIT_MEMBER_NAME(keys,"keys");
	HX_VISIT_MEMBER_NAME(closestNotes,"closestNotes");
	HX_VISIT_MEMBER_NAME(songStarted,"songStarted");
	HX_VISIT_MEMBER_NAME(doAnything,"doAnything");
	HX_VISIT_MEMBER_NAME(previousRate,"previousRate");
	HX_VISIT_MEMBER_NAME(debugNum,"debugNum");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(startedCountdown,"startedCountdown");
	HX_VISIT_MEMBER_NAME(canPause,"canPause");
	HX_VISIT_MEMBER_NAME(nps,"nps");
	HX_VISIT_MEMBER_NAME(maxNPS,"maxNPS");
	HX_VISIT_MEMBER_NAME(stopUpdate,"stopUpdate");
	HX_VISIT_MEMBER_NAME(removedVideo,"removedVideo");
	HX_VISIT_MEMBER_NAME(currentBPM,"currentBPM");
	HX_VISIT_MEMBER_NAME(updateFrame,"updateFrame");
	HX_VISIT_MEMBER_NAME(pastScrollChanges,"pastScrollChanges");
	HX_VISIT_MEMBER_NAME(currentLuaIndex,"currentLuaIndex");
	HX_VISIT_MEMBER_NAME(endingSong,"endingSong");
	HX_VISIT_MEMBER_NAME(hits,"hits");
	HX_VISIT_MEMBER_NAME(offsetTest,"offsetTest");
	HX_VISIT_MEMBER_NAME(timeShown,"timeShown");
	HX_VISIT_MEMBER_NAME(currentTimingShown,"currentTimingShown");
	HX_VISIT_MEMBER_NAME(upHold,"upHold");
	HX_VISIT_MEMBER_NAME(downHold,"downHold");
	HX_VISIT_MEMBER_NAME(rightHold,"rightHold");
	HX_VISIT_MEMBER_NAME(leftHold,"leftHold");
	HX_VISIT_MEMBER_NAME(fuckingVolume,"fuckingVolume");
	HX_VISIT_MEMBER_NAME(useVideo,"useVideo");
	HX_VISIT_MEMBER_NAME(playingDathing,"playingDathing");
	HX_VISIT_MEMBER_NAME(videoSprite,"videoSprite");
	HX_VISIT_MEMBER_NAME(mashing,"mashing");
	HX_VISIT_MEMBER_NAME(mashViolations,"mashViolations");
	HX_VISIT_MEMBER_NAME(etternaModeScore,"etternaModeScore");
	HX_VISIT_MEMBER_NAME(fastCarCanDrive,"fastCarCanDrive");
	HX_VISIT_MEMBER_NAME(trainMoving,"trainMoving");
	HX_VISIT_MEMBER_NAME(trainFrameTiming,"trainFrameTiming");
	HX_VISIT_MEMBER_NAME(trainCars,"trainCars");
	HX_VISIT_MEMBER_NAME(trainFinishing,"trainFinishing");
	HX_VISIT_MEMBER_NAME(trainCooldown,"trainCooldown");
	HX_VISIT_MEMBER_NAME(startedMoving,"startedMoving");
	HX_VISIT_MEMBER_NAME(danced,"danced");
	HX_VISIT_MEMBER_NAME(lightningStrikeBeat,"lightningStrikeBeat");
	HX_VISIT_MEMBER_NAME(lightningOffset,"lightningOffset");
	HX_VISIT_MEMBER_NAME(cleanedSong,"cleanedSong");
	HX_VISIT_MEMBER_NAME(curLight,"curLight");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { return ::hx::Val( ss ); }
		if (HX_FIELD_EQ(inName,"fc") ) { return ::hx::Val( fc ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"nps") ) { return ::hx::Val( nps ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { return ::hx::Val( keys ); }
		if (HX_FIELD_EQ(inName,"hits") ) { return ::hx::Val( hits ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { return ::hx::Val( notes ); }
		if (HX_FIELD_EQ(inName,"combo") ) { return ::hx::Val( combo ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"health") ) { return ::hx::Val( health ); }
		if (HX_FIELD_EQ(inName,"iconP1") ) { return ::hx::Val( iconP1 ); }
		if (HX_FIELD_EQ(inName,"iconP2") ) { return ::hx::Val( iconP2 ); }
		if (HX_FIELD_EQ(inName,"camHUD") ) { return ::hx::Val( camHUD ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"getKey") ) { return ::hx::Val( getKey_dyn() ); }
		if (HX_FIELD_EQ(inName,"paused") ) { return ::hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { return ::hx::Val( maxNPS ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		if (HX_FIELD_EQ(inName,"upHold") ) { return ::hx::Val( upHold ); }
		if (HX_FIELD_EQ(inName,"danced") ) { return ::hx::Val( danced ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { return ::hx::Val( iconRPC ); }
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { return ::hx::Val( gfSpeed ); }
		if (HX_FIELD_EQ(inName,"camGame") ) { return ::hx::Val( camGame ); }
		if (HX_FIELD_EQ(inName,"talking") ) { return ::hx::Val( talking ); }
		if (HX_FIELD_EQ(inName,"endSong") ) { return ::hx::Val( endSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"keyShit") ) { return ::hx::Val( keyShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"focusIn") ) { return ::hx::Val( focusIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashing") ) { return ::hx::Val( mashing ); }
		if (HX_FIELD_EQ(inName,"stepHit") ) { return ::hx::Val( stepHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"poggers") ) { return ::hx::Val( poggers_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { return ::hx::Val( accuracy ); }
		if (HX_FIELD_EQ(inName,"camNotes") ) { return ::hx::Val( camNotes ); }
		if (HX_FIELD_EQ(inName,"isSMFile") ) { return ::hx::Val( isSMFile ); }
		if (HX_FIELD_EQ(inName,"idleBeat") ) { return ::hx::Val( idleBeat ); }
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"songName") ) { return ::hx::Val( songName ); }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { return ::hx::Val( scoreTxt ); }
		if (HX_FIELD_EQ(inName,"songTime") ) { return ::hx::Val( songTime ); }
		if (HX_FIELD_EQ(inName,"debugNum") ) { return ::hx::Val( debugNum ); }
		if (HX_FIELD_EQ(inName,"canPause") ) { return ::hx::Val( canPause ); }
		if (HX_FIELD_EQ(inName,"downHold") ) { return ::hx::Val( downHold ); }
		if (HX_FIELD_EQ(inName,"leftHold") ) { return ::hx::Val( leftHold ); }
		if (HX_FIELD_EQ(inName,"useVideo") ) { return ::hx::Val( useVideo ); }
		if (HX_FIELD_EQ(inName,"focusOut") ) { return ::hx::Val( focusOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"noteMiss") ) { return ::hx::Val( noteMiss_dyn() ); }
		if (HX_FIELD_EQ(inName,"curLight") ) { return ::hx::Val( curLight ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"originalX") ) { return ::hx::Val( originalX ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"healthBar") ) { return ::hx::Val( healthBar ); }
		if (HX_FIELD_EQ(inName,"cannotDie") ) { return ::hx::Val( cannotDie ); }
		if (HX_FIELD_EQ(inName,"songScore") ) { return ::hx::Val( songScore ); }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { return ::hx::Val( replayTxt ); }
		if (HX_FIELD_EQ(inName,"randomVar") ) { return ::hx::Val( randomVar ); }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { return ::hx::Val( saveNotes ); }
		if (HX_FIELD_EQ(inName,"saveJudge") ) { return ::hx::Val( saveJudge ); }
		if (HX_FIELD_EQ(inName,"replayAna") ) { return ::hx::Val( replayAna ); }
		if (HX_FIELD_EQ(inName,"dataColor") ) { return ::hx::Val( dataColor ); }
		if (HX_FIELD_EQ(inName,"addObject") ) { return ::hx::Val( addObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"cuzIntros") ) { return ::hx::Val( cuzIntros_dyn() ); }
		if (HX_FIELD_EQ(inName,"startSong") ) { return ::hx::Val( startSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeShown") ) { return ::hx::Val( timeShown ); }
		if (HX_FIELD_EQ(inName,"rightHold") ) { return ::hx::Val( rightHold ); }
		if (HX_FIELD_EQ(inName,"noteCheck") ) { return ::hx::Val( noteCheck_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCars") ) { return ::hx::Val( trainCars ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { return ::hx::Val( songLength ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"camZooming") ) { return ::hx::Val( camZooming ); }
		if (HX_FIELD_EQ(inName,"idleToBeat") ) { return ::hx::Val( idleToBeat ); }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { return ::hx::Val( wiggleShit ); }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { return ::hx::Val( inCutscene ); }
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { return ::hx::Val( dataSuffix ); }
		if (HX_FIELD_EQ(inName,"missedStab") ) { return ::hx::Val( missedStab ); }
		if (HX_FIELD_EQ(inName,"startTimer") ) { return ::hx::Val( startTimer ); }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { return ::hx::Val( luaWiggles ); }
		if (HX_FIELD_EQ(inName,"doAnything") ) { return ::hx::Val( doAnything ); }
		if (HX_FIELD_EQ(inName,"sortByShit") ) { return ::hx::Val( sortByShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"tweenCamIn") ) { return ::hx::Val( tweenCamIn_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { return ::hx::Val( stopUpdate ); }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { return ::hx::Val( currentBPM ); }
		if (HX_FIELD_EQ(inName,"endingSong") ) { return ::hx::Val( endingSong ); }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { return ::hx::Val( offsetTest ); }
		if (HX_FIELD_EQ(inName,"popUpScore") ) { return ::hx::Val( popUpScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"findByTime") ) { return ::hx::Val( findByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"pressArrow") ) { return ::hx::Val( pressArrow_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainStart") ) { return ::hx::Val( trainStart_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainReset") ) { return ::hx::Val( trainReset_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { return ::hx::Val( detailsText ); }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { return ::hx::Val( totalPlayed ); }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { return ::hx::Val( healthBarBG ); }
		if (HX_FIELD_EQ(inName,"camSustains") ) { return ::hx::Val( camSustains ); }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { return ::hx::Val( funneEffect ); }
		if (HX_FIELD_EQ(inName,"stabcounter") ) { return ::hx::Val( stabcounter ); }
		if (HX_FIELD_EQ(inName,"schoolIntro") ) { return ::hx::Val( schoolIntro_dyn() ); }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { return ::hx::Val( perfectMode ); }
		if (HX_FIELD_EQ(inName,"handleInput") ) { return ::hx::Val( handleInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"songStarted") ) { return ::hx::Val( songStarted ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return ::hx::Val( updateFrame ); }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { return ::hx::Val( videoSprite ); }
		if (HX_FIELD_EQ(inName,"goodNoteHit") ) { return ::hx::Val( goodNoteHit_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { return ::hx::Val( trainMoving ); }
		if (HX_FIELD_EQ(inName,"cleanedSong") ) { return ::hx::Val( cleanedSong ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleNotes") ) { return ::hx::Val( visibleNotes ); }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { return ::hx::Val( unspawnNotes ); }
		if (HX_FIELD_EQ(inName,"startingSong") ) { return ::hx::Val( startingSong ); }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { return ::hx::Val( songScoreDef ); }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { return ::hx::Val( botPlayState ); }
		if (HX_FIELD_EQ(inName,"removeObject") ) { return ::hx::Val( removeObject_dyn() ); }
		if (HX_FIELD_EQ(inName,"releaseInput") ) { return ::hx::Val( releaseInput_dyn() ); }
		if (HX_FIELD_EQ(inName,"closestNotes") ) { return ::hx::Val( closestNotes ); }
		if (HX_FIELD_EQ(inName,"previousRate") ) { return ::hx::Val( previousRate ); }
		if (HX_FIELD_EQ(inName,"generateSong") ) { return ::hx::Val( generateSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"openSubState") ) { return ::hx::Val( openSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"resyncVocals") ) { return ::hx::Val( resyncVocals_dyn() ); }
		if (HX_FIELD_EQ(inName,"removedVideo") ) { return ::hx::Val( removedVideo ); }
		if (HX_FIELD_EQ(inName,"NearlyEquals") ) { return ::hx::Val( NearlyEquals_dyn() ); }
		if (HX_FIELD_EQ(inName,"resetFastCar") ) { return ::hx::Val( resetFastCar_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarDrive") ) { return ::hx::Val( fastCarDrive_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleCombos") ) { return ::hx::Val( visibleCombos ); }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { return ::hx::Val( totalNotesHit ); }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { return ::hx::Val( notesHitArray ); }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { return ::hx::Val( currentFrames ); }
		if (HX_FIELD_EQ(inName,"closeSubState") ) { return ::hx::Val( closeSubState_dyn() ); }
		if (HX_FIELD_EQ(inName,"getRatesScore") ) { return ::hx::Val( getRatesScore_dyn() ); }
		if (HX_FIELD_EQ(inName,"fuckingVolume") ) { return ::hx::Val( fuckingVolume ); }
		if (HX_FIELD_EQ(inName,"getKeyPresses") ) { return ::hx::Val( getKeyPresses_dyn() ); }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { return ::hx::Val( trainCooldown ); }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { return ::hx::Val( startedMoving ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { return ::hx::Val( generatedMusic ); }
		if (HX_FIELD_EQ(inName,"currentSection") ) { return ::hx::Val( currentSection ); }
		if (HX_FIELD_EQ(inName,"usedTimeTravel") ) { return ::hx::Val( usedTimeTravel ); }
		if (HX_FIELD_EQ(inName,"startCountdown") ) { return ::hx::Val( startCountdown_dyn() ); }
		if (HX_FIELD_EQ(inName,"playingDathing") ) { return ::hx::Val( playingDathing ); }
		if (HX_FIELD_EQ(inName,"updateAccuracy") ) { return ::hx::Val( updateAccuracy_dyn() ); }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { return ::hx::Val( mashViolations ); }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { return ::hx::Val( trainFinishing ); }
		if (HX_FIELD_EQ(inName,"updateTrainPos") ) { return ::hx::Val( updateTrainPos_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { return ::hx::Val( accuracyDefault ); }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { return ::hx::Val( songPositionBar ); }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { return ::hx::Val( executeModchart ); }
		if (HX_FIELD_EQ(inName,"currentLuaIndex") ) { return ::hx::Val( currentLuaIndex ); }
		if (HX_FIELD_EQ(inName,"findByTimeIndex") ) { return ::hx::Val( findByTimeIndex_dyn() ); }
		if (HX_FIELD_EQ(inName,"backgroundVideo") ) { return ::hx::Val( backgroundVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { return ::hx::Val( fastCarCanDrive ); }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { return ::hx::Val( lightningOffset ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { return ::hx::Val( triggeredAlready ); }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { return ::hx::Val( startedCountdown ); }
		if (HX_FIELD_EQ(inName,"getSectionByTime") ) { return ::hx::Val( getSectionByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { return ::hx::Val( etternaModeScore ); }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { return ::hx::Val( trainFrameTiming ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { return ::hx::Val( detailsPausedText ); }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { return ::hx::Val( allowedToHeadbang ); }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { return ::hx::Val( previousFrameTime ); }
		if (HX_FIELD_EQ(inName,"pastScrollChanges") ) { return ::hx::Val( pastScrollChanges ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"appearStaticArrows") ) { return ::hx::Val( appearStaticArrows_dyn() ); }
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { return ::hx::Val( currentTimingShown ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { return ::hx::Val( kadeEngineWatermark ); }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { return ::hx::Val( storyDifficultyText ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeShit") ) { return ::hx::Val( lightningStrikeShit_dyn() ); }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { return ::hx::Val( lightningStrikeBeat ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { return ::hx::Val( totalNotesHitDefault ); }
		if (HX_FIELD_EQ(inName,"generateStaticArrows") ) { return ::hx::Val( generateStaticArrows_dyn() ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"recalculateAllSectionTimes") ) { return ::hx::Val( recalculateAllSectionTimes_dyn() ); }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { return ::hx::Val( lastReportedPlayheadPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PlayState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { outValue = ( sm ); return true; }
		if (HX_FIELD_EQ(inName,"gf") ) { outValue = ( gf ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { outValue = ( rep ); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { outValue = ( dad ); return true; }
		if (HX_FIELD_EQ(inName,"gf2") ) { outValue = ( gf2 ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { outValue = ( SONG ); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { outValue = ( bads ); return true; }
		if (HX_FIELD_EQ(inName,"isSM") ) { outValue = ( isSM ); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { outValue = ( shits ); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { outValue = ( goods ); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { outValue = ( sicks ); return true; }
		if (HX_FIELD_EQ(inName,"Stage") ) { outValue = ( Stage ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { outValue = ( misses ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { outValue = ( loadRep ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { outValue = ( weekSong ); return true; }
		if (HX_FIELD_EQ(inName,"pathToSm") ) { outValue = ( pathToSm ); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { outValue = ( theFunne ); return true; }
		if (HX_FIELD_EQ(inName,"songRate") ) { outValue = ( songRate ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { outValue = ( storyWeek ); return true; }
		if (HX_FIELD_EQ(inName,"weekScore") ) { outValue = ( weekScore ); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { outValue = ( songPosBG ); return true; }
		if (HX_FIELD_EQ(inName,"inResults") ) { outValue = ( inResults ); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { outValue = ( noteBools ); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { outValue = ( boyfriend ); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { outValue = ( cpuStrums ); return true; }
		if (HX_FIELD_EQ(inName,"curWindow") ) { outValue = ( curWindow ); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { outValue = ( startTime ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { outValue = ( songPosBar ); return true; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { outValue = ( trainSound ); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { outValue = ( repPresses ); return true; }
		if (HX_FIELD_EQ(inName,"lastWindow") ) { outValue = ( lastWindow ); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { outValue = ( songOffset ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { outValue = ( isStoryMode ); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { outValue = ( daPixelZoom ); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { outValue = ( repReleases ); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { outValue = ( luaModchart ); return true; }
		if (HX_FIELD_EQ(inName,"webmHandler") ) { outValue = ( webmHandler ); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { outValue = ( playerStrums ); return true; }
		if (HX_FIELD_EQ(inName,"campaignBads") ) { outValue = ( campaignBads ); return true; }
		if (HX_FIELD_EQ(inName,"highestCombo") ) { outValue = ( highestCombo ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { outValue = ( storyPlaylist ); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { outValue = ( prevCamFollow ); return true; }
		if (HX_FIELD_EQ(inName,"campaignSicks") ) { outValue = ( campaignSicks ); return true; }
		if (HX_FIELD_EQ(inName,"campaignGoods") ) { outValue = ( campaignGoods ); return true; }
		if (HX_FIELD_EQ(inName,"campaignShits") ) { outValue = ( campaignShits ); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { outValue = ( offsetTesting ); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { outValue = ( campaignScore ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { outValue = ( timeCurrently ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { outValue = ( strumLineNotes ); return true; }
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { outValue = ( campaignMisses ); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { outValue = ( timeCurrentlyR ); return true; }
		if (HX_FIELD_EQ(inName,"songMultiplier") ) { outValue = ( songMultiplier ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { outValue = ( storyDifficulty ); return true; }
	}
	return false;
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ss") ) { ss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fc") ) { fc=inValue.Cast< bool >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"nps") ) { nps=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"keys") ) { keys=inValue.Cast< ::Array< bool > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"hits") ) { hits=inValue.Cast< ::Array< Float > >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"notes") ) { notes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combo") ) { combo=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"health") ) { health=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP1") ) { iconP1=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"iconP2") ) { iconP2=inValue.Cast<  ::HealthIcon >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camHUD") ) { camHUD=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"maxNPS") ) { maxNPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"upHold") ) { upHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danced") ) { danced=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"iconRPC") ) { iconRPC=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gfSpeed") ) { gfSpeed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camGame") ) { camGame=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talking") ) { talking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashing") ) { mashing=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"accuracy") ) { accuracy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camNotes") ) { camNotes=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isSMFile") ) { isSMFile=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleBeat") ) { idleBeat=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songName") ) { songName=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scoreTxt") ) { scoreTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songTime") ) { songTime=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"debugNum") ) { debugNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canPause") ) { canPause=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"downHold") ) { downHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leftHold") ) { leftHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"useVideo") ) { useVideo=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curLight") ) { curLight=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"originalX") ) { originalX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBar") ) { healthBar=inValue.Cast<  ::flixel::ui::FlxBar >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cannotDie") ) { cannotDie=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScore") ) { songScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayTxt") ) { replayTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"randomVar") ) { randomVar=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveNotes") ) { saveNotes=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveJudge") ) { saveJudge=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"replayAna") ) { replayAna=inValue.Cast<  ::Analysis >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataColor") ) { dataColor=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timeShown") ) { timeShown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rightHold") ) { rightHold=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCars") ) { trainCars=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songLength") ) { songLength=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camZooming") ) { camZooming=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"idleToBeat") ) { idleToBeat=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wiggleShit") ) { wiggleShit=inValue.Cast<  ::WiggleEffect >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCutscene") ) { inCutscene=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dataSuffix") ) { dataSuffix=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"missedStab") ) { missedStab=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startTimer") ) { startTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"luaWiggles") ) { luaWiggles=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doAnything") ) { doAnything=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stopUpdate") ) { stopUpdate=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { currentBPM=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"endingSong") ) { endingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offsetTest") ) { offsetTest=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"detailsText") ) { detailsText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalPlayed") ) { totalPlayed=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"healthBarBG") ) { healthBarBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camSustains") ) { camSustains=inValue.Cast<  ::flixel::FlxCamera >(); return inValue; }
		if (HX_FIELD_EQ(inName,"funneEffect") ) { funneEffect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stabcounter") ) { stabcounter=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"perfectMode") ) { perfectMode=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songStarted") ) { songStarted=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { updateFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"videoSprite") ) { videoSprite=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainMoving") ) { trainMoving=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cleanedSong") ) { cleanedSong=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"visibleNotes") ) { visibleNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"unspawnNotes") ) { unspawnNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startingSong") ) { startingSong=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songScoreDef") ) { songScoreDef=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"botPlayState") ) { botPlayState=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"closestNotes") ) { closestNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousRate") ) { previousRate=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"removedVideo") ) { removedVideo=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"visibleCombos") ) { visibleCombos=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"totalNotesHit") ) { totalNotesHit=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notesHitArray") ) { notesHitArray=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentFrames") ) { currentFrames=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fuckingVolume") ) { fuckingVolume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainCooldown") ) { trainCooldown=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedMoving") ) { startedMoving=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"generatedMusic") ) { generatedMusic=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentSection") ) { currentSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"usedTimeTravel") ) { usedTimeTravel=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"playingDathing") ) { playingDathing=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mashViolations") ) { mashViolations=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFinishing") ) { trainFinishing=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"accuracyDefault") ) { accuracyDefault=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songPositionBar") ) { songPositionBar=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"executeModchart") ) { executeModchart=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentLuaIndex") ) { currentLuaIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"fastCarCanDrive") ) { fastCarCanDrive=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningOffset") ) { lightningOffset=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"triggeredAlready") ) { triggeredAlready=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"startedCountdown") ) { startedCountdown=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"etternaModeScore") ) { etternaModeScore=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"trainFrameTiming") ) { trainFrameTiming=inValue.Cast< Float >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"detailsPausedText") ) { detailsPausedText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"allowedToHeadbang") ) { allowedToHeadbang=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"previousFrameTime") ) { previousFrameTime=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pastScrollChanges") ) { pastScrollChanges=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"currentTimingShown") ) { currentTimingShown=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"kadeEngineWatermark") ) { kadeEngineWatermark=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"storyDifficultyText") ) { storyDifficultyText=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lightningStrikeBeat") ) { lightningStrikeBeat=inValue.Cast< int >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"totalNotesHitDefault") ) { totalNotesHitDefault=inValue.Cast< Float >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"lastReportedPlayheadPosition") ) { lastReportedPlayheadPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool PlayState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sm") ) { sm=ioValue.Cast<  ::smTools::SMFile >(); return true; }
		if (HX_FIELD_EQ(inName,"gf") ) { gf=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"rep") ) { rep=ioValue.Cast<  ::Replay >(); return true; }
		if (HX_FIELD_EQ(inName,"dad") ) { dad=ioValue.Cast<  ::Character >(); return true; }
		if (HX_FIELD_EQ(inName,"gf2") ) { gf2=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"SONG") ) { SONG=ioValue.Cast<  ::Dynamic >(); return true; }
		if (HX_FIELD_EQ(inName,"bads") ) { bads=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"isSM") ) { isSM=ioValue.Cast< bool >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"shits") ) { shits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"goods") ) { goods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"sicks") ) { sicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"Stage") ) { Stage=ioValue.Cast<  ::Stage >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"misses") ) { misses=ioValue.Cast< int >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"loadRep") ) { loadRep=ioValue.Cast< bool >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::PlayState >(); return true; }
		if (HX_FIELD_EQ(inName,"weekSong") ) { weekSong=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"pathToSm") ) { pathToSm=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"theFunne") ) { theFunne=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"songRate") ) { songRate=ioValue.Cast< Float >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"storyWeek") ) { storyWeek=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"weekScore") ) { weekScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songPosBG") ) { songPosBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		if (HX_FIELD_EQ(inName,"inResults") ) { inResults=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"noteBools") ) { noteBools=ioValue.Cast< ::Array< bool > >(); return true; }
		if (HX_FIELD_EQ(inName,"boyfriend") ) { boyfriend=ioValue.Cast<  ::Boyfriend >(); return true; }
		if (HX_FIELD_EQ(inName,"cpuStrums") ) { cpuStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"curWindow") ) { curWindow=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"startTime") ) { startTime=ioValue.Cast< Float >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"songPosBar") ) { songPosBar=ioValue.Cast<  ::flixel::ui::FlxBar >(); return true; }
		if (HX_FIELD_EQ(inName,"trainSound") ) { trainSound=ioValue.Cast<  ::flixel::_hx_system::FlxSound >(); return true; }
		if (HX_FIELD_EQ(inName,"repPresses") ) { repPresses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"lastWindow") ) { lastWindow=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"songOffset") ) { songOffset=ioValue.Cast< Float >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"isStoryMode") ) { isStoryMode=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"daPixelZoom") ) { daPixelZoom=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"repReleases") ) { repReleases=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"luaModchart") ) { luaModchart=ioValue.Cast<  ::ModchartState >(); return true; }
		if (HX_FIELD_EQ(inName,"webmHandler") ) { webmHandler=ioValue.Cast<  ::WebmHandler >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"playerStrums") ) { playerStrums=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignBads") ) { campaignBads=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"highestCombo") ) { highestCombo=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"storyPlaylist") ) { storyPlaylist=ioValue.Cast< ::Array< ::String > >(); return true; }
		if (HX_FIELD_EQ(inName,"prevCamFollow") ) { prevCamFollow=ioValue.Cast<  ::flixel::FlxObject >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignSicks") ) { campaignSicks=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignGoods") ) { campaignGoods=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignShits") ) { campaignShits=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"offsetTesting") ) { offsetTesting=ioValue.Cast< bool >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignScore") ) { campaignScore=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrently") ) { timeCurrently=ioValue.Cast< Float >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"strumLineNotes") ) { strumLineNotes=ioValue.Cast<  ::flixel::group::FlxTypedGroup >(); return true; }
		if (HX_FIELD_EQ(inName,"campaignMisses") ) { campaignMisses=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"timeCurrentlyR") ) { timeCurrentlyR=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"songMultiplier") ) { songMultiplier=ioValue.Cast< Float >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"storyDifficulty") ) { storyDifficulty=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("visibleCombos",77,ea,17,26));
	outFields->push(HX_("visibleNotes",6f,f6,4f,15));
	outFields->push(HX_("songLength",9b,3a,8c,fa));
	outFields->push(HX_("kadeEngineWatermark",ab,82,ba,66));
	outFields->push(HX_("storyDifficultyText",5d,4b,db,c2));
	outFields->push(HX_("iconRPC",ec,c8,10,d6));
	outFields->push(HX_("detailsText",8f,5e,84,21));
	outFields->push(HX_("detailsPausedText",dd,4f,70,44));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("originalX",e7,92,45,ea));
	outFields->push(HX_("notes",41,dc,ca,9f));
	outFields->push(HX_("unspawnNotes",9f,67,f2,45));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camZooming",60,3b,bf,d6));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("gfSpeed",e8,9c,20,98));
	outFields->push(HX_("health",9c,28,06,fd));
	outFields->push(HX_("combo",4e,28,5d,4a));
	outFields->push(HX_("accuracy",39,06,c5,ff));
	outFields->push(HX_("accuracyDefault",88,23,d8,06));
	outFields->push(HX_("totalNotesHit",76,f4,57,a6));
	outFields->push(HX_("totalNotesHitDefault",eb,26,a4,bd));
	outFields->push(HX_("totalPlayed",37,de,ee,fd));
	outFields->push(HX_("ss",a0,64,00,00));
	outFields->push(HX_("healthBarBG",1c,d8,3b,f4));
	outFields->push(HX_("healthBar",97,8a,92,42));
	outFields->push(HX_("songPositionBar",d5,62,6e,a6));
	outFields->push(HX_("generatedMusic",96,8a,5d,71));
	outFields->push(HX_("startingSong",b5,31,61,33));
	outFields->push(HX_("iconP1",9a,bd,d6,45));
	outFields->push(HX_("iconP2",9b,bd,d6,45));
	outFields->push(HX_("camHUD",e8,2b,76,b7));
	outFields->push(HX_("camSustains",9f,69,a2,15));
	outFields->push(HX_("camNotes",b2,c1,02,a8));
	outFields->push(HX_("camGame",a1,47,50,cf));
	outFields->push(HX_("cannotDie",fd,a9,4e,4f));
	outFields->push(HX_("isSMFile",a0,bf,e3,d7));
	outFields->push(HX_("notesHitArray",a7,0b,f3,bd));
	outFields->push(HX_("currentFrames",bf,30,e2,8f));
	outFields->push(HX_("idleToBeat",c5,ee,79,79));
	outFields->push(HX_("idleBeat",aa,ce,03,36));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("songName",c0,d0,d7,36));
	outFields->push(HX_("currentSection",ac,7a,6c,6b));
	outFields->push(HX_("fc",3d,59,00,00));
	outFields->push(HX_("wiggleShit",0b,07,40,33));
	outFields->push(HX_("talking",36,57,a8,16));
	outFields->push(HX_("songScore",3d,bb,53,a8));
	outFields->push(HX_("songScoreDef",88,1a,f9,d0));
	outFields->push(HX_("scoreTxt",3e,12,c4,0e));
	outFields->push(HX_("replayTxt",89,f1,6f,0a));
	outFields->push(HX_("funneEffect",67,55,3f,6f));
	outFields->push(HX_("inCutscene",8f,21,01,56));
	outFields->push(HX_("usedTimeTravel",a4,7d,1d,70));
	outFields->push(HX_("randomVar",a4,58,4f,a7));
	outFields->push(HX_("triggeredAlready",c1,04,84,a5));
	outFields->push(HX_("allowedToHeadbang",bb,a8,e9,48));
	outFields->push(HX_("botPlayState",76,4c,39,74));
	outFields->push(HX_("saveNotes",c4,e3,77,2e));
	outFields->push(HX_("saveJudge",1a,b7,c8,e4));
	outFields->push(HX_("replayAna",ed,7d,61,0a));
	outFields->push(HX_("executeModchart",31,4a,80,b8));
	outFields->push(HX_("dataSuffix",9b,a8,47,88));
	outFields->push(HX_("dataColor",d9,f2,4b,90));
	outFields->push(HX_("stabcounter",7a,a7,ca,f5));
	outFields->push(HX_("missedStab",bd,3b,d9,f1));
	outFields->push(HX_("startTimer",03,98,4c,2c));
	outFields->push(HX_("perfectMode",10,4f,4c,f3));
	outFields->push(HX_("luaWiggles",90,11,ce,e3));
	outFields->push(HX_("previousFrameTime",a3,ef,a7,c2));
	outFields->push(HX_("lastReportedPlayheadPosition",86,66,7f,37));
	outFields->push(HX_("songTime",82,2a,d5,3a));
	outFields->push(HX_("keys",f4,e1,06,47));
	outFields->push(HX_("closestNotes",28,4f,02,c1));
	outFields->push(HX_("songStarted",ec,81,a7,ed));
	outFields->push(HX_("doAnything",2d,8c,83,68));
	outFields->push(HX_("previousRate",b7,22,46,f2));
	outFields->push(HX_("debugNum",b3,39,d8,90));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("startedCountdown",30,57,28,9b));
	outFields->push(HX_("canPause",c6,18,eb,2b));
	outFields->push(HX_("nps",f1,d9,53,00));
	outFields->push(HX_("maxNPS",ad,a9,51,be));
	outFields->push(HX_("stopUpdate",ab,d7,b4,b0));
	outFields->push(HX_("removedVideo",bb,c0,72,00));
	outFields->push(HX_("currentBPM",26,68,25,c7));
	outFields->push(HX_("updateFrame",64,e1,1b,ec));
	outFields->push(HX_("pastScrollChanges",44,1c,82,6e));
	outFields->push(HX_("currentLuaIndex",93,2f,c9,10));
	outFields->push(HX_("endingSong",5c,73,d7,67));
	outFields->push(HX_("hits",c0,42,0e,45));
	outFields->push(HX_("offsetTest",85,51,11,49));
	outFields->push(HX_("timeShown",84,5d,18,31));
	outFields->push(HX_("currentTimingShown",2e,56,ba,1d));
	outFields->push(HX_("upHold",3a,25,8e,74));
	outFields->push(HX_("downHold",c1,c6,fa,79));
	outFields->push(HX_("rightHold",3b,1f,d9,af));
	outFields->push(HX_("leftHold",e6,0c,0e,4c));
	outFields->push(HX_("fuckingVolume",c5,2f,0e,74));
	outFields->push(HX_("useVideo",b4,76,67,fe));
	outFields->push(HX_("playingDathing",83,ed,1f,d5));
	outFields->push(HX_("videoSprite",e0,72,3d,3c));
	outFields->push(HX_("mashing",99,83,64,f9));
	outFields->push(HX_("mashViolations",77,15,e1,83));
	outFields->push(HX_("etternaModeScore",aa,02,79,42));
	outFields->push(HX_("fastCarCanDrive",d2,f1,13,ee));
	outFields->push(HX_("trainMoving",76,00,99,48));
	outFields->push(HX_("trainFrameTiming",af,67,10,1b));
	outFields->push(HX_("trainCars",c7,61,9c,4d));
	outFields->push(HX_("trainFinishing",87,15,8c,24));
	outFields->push(HX_("trainCooldown",93,a3,58,0c));
	outFields->push(HX_("startedMoving",af,76,97,fb));
	outFields->push(HX_("danced",d1,49,8f,1e));
	outFields->push(HX_("lightningStrikeBeat",72,e2,3d,b6));
	outFields->push(HX_("lightningOffset",3d,a8,e5,e6));
	outFields->push(HX_("cleanedSong",1d,82,51,e6));
	outFields->push(HX_("curLight",36,8b,aa,bc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,visibleCombos),HX_("visibleCombos",77,ea,17,26)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,visibleNotes),HX_("visibleNotes",6f,f6,4f,15)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songLength),HX_("songLength",9b,3a,8c,fa)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,kadeEngineWatermark),HX_("kadeEngineWatermark",ab,82,ba,66)},
	{::hx::fsString,(int)offsetof(PlayState_obj,storyDifficultyText),HX_("storyDifficultyText",5d,4b,db,c2)},
	{::hx::fsString,(int)offsetof(PlayState_obj,iconRPC),HX_("iconRPC",ec,c8,10,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsText),HX_("detailsText",8f,5e,84,21)},
	{::hx::fsString,(int)offsetof(PlayState_obj,detailsPausedText),HX_("detailsPausedText",dd,4f,70,44)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,originalX),HX_("originalX",e7,92,45,ea)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,notes),HX_("notes",41,dc,ca,9f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,unspawnNotes),HX_("unspawnNotes",9f,67,f2,45)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(PlayState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,camZooming),HX_("camZooming",60,3b,bf,d6)},
	{::hx::fsString,(int)offsetof(PlayState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,gfSpeed),HX_("gfSpeed",e8,9c,20,98)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,health),HX_("health",9c,28,06,fd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,combo),HX_("combo",4e,28,5d,4a)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracy),HX_("accuracy",39,06,c5,ff)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,accuracyDefault),HX_("accuracyDefault",88,23,d8,06)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHit),HX_("totalNotesHit",76,f4,57,a6)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,totalNotesHitDefault),HX_("totalNotesHitDefault",eb,26,a4,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,totalPlayed),HX_("totalPlayed",37,de,ee,fd)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,ss),HX_("ss",a0,64,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,healthBarBG),HX_("healthBarBG",1c,d8,3b,f4)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(int)offsetof(PlayState_obj,healthBar),HX_("healthBar",97,8a,92,42)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songPositionBar),HX_("songPositionBar",d5,62,6e,a6)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,generatedMusic),HX_("generatedMusic",96,8a,5d,71)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startingSong),HX_("startingSong",b5,31,61,33)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP1),HX_("iconP1",9a,bd,d6,45)},
	{::hx::fsObject /*  ::HealthIcon */ ,(int)offsetof(PlayState_obj,iconP2),HX_("iconP2",9b,bd,d6,45)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camHUD),HX_("camHUD",e8,2b,76,b7)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camSustains),HX_("camSustains",9f,69,a2,15)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camNotes),HX_("camNotes",b2,c1,02,a8)},
	{::hx::fsObject /*  ::flixel::FlxCamera */ ,(int)offsetof(PlayState_obj,camGame),HX_("camGame",a1,47,50,cf)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,cannotDie),HX_("cannotDie",fd,a9,4e,4f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,isSMFile),HX_("isSMFile",a0,bf,e3,d7)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,notesHitArray),HX_("notesHitArray",a7,0b,f3,bd)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentFrames),HX_("currentFrames",bf,30,e2,8f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,idleToBeat),HX_("idleToBeat",c5,ee,79,79)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,idleBeat),HX_("idleBeat",aa,ce,03,36)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,songName),HX_("songName",c0,d0,d7,36)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,currentSection),HX_("currentSection",ac,7a,6c,6b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fc),HX_("fc",3d,59,00,00)},
	{::hx::fsObject /*  ::WiggleEffect */ ,(int)offsetof(PlayState_obj,wiggleShit),HX_("wiggleShit",0b,07,40,33)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talking),HX_("talking",36,57,a8,16)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScore),HX_("songScore",3d,bb,53,a8)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,songScoreDef),HX_("songScoreDef",88,1a,f9,d0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,scoreTxt),HX_("scoreTxt",3e,12,c4,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,replayTxt),HX_("replayTxt",89,f1,6f,0a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,funneEffect),HX_("funneEffect",67,55,3f,6f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCutscene),HX_("inCutscene",8f,21,01,56)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,usedTimeTravel),HX_("usedTimeTravel",a4,7d,1d,70)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,randomVar),HX_("randomVar",a4,58,4f,a7)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,triggeredAlready),HX_("triggeredAlready",c1,04,84,a5)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,allowedToHeadbang),HX_("allowedToHeadbang",bb,a8,e9,48)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,botPlayState),HX_("botPlayState",76,4c,39,74)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PlayState_obj,saveNotes),HX_("saveNotes",c4,e3,77,2e)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,saveJudge),HX_("saveJudge",1a,b7,c8,e4)},
	{::hx::fsObject /*  ::Analysis */ ,(int)offsetof(PlayState_obj,replayAna),HX_("replayAna",ed,7d,61,0a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,executeModchart),HX_("executeModchart",31,4a,80,b8)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dataSuffix),HX_("dataSuffix",9b,a8,47,88)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(PlayState_obj,dataColor),HX_("dataColor",d9,f2,4b,90)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,stabcounter),HX_("stabcounter",7a,a7,ca,f5)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,missedStab),HX_("missedStab",bd,3b,d9,f1)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(PlayState_obj,startTimer),HX_("startTimer",03,98,4c,2c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,perfectMode),HX_("perfectMode",10,4f,4c,f3)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,luaWiggles),HX_("luaWiggles",90,11,ce,e3)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,previousFrameTime),HX_("previousFrameTime",a3,ef,a7,c2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lastReportedPlayheadPosition),HX_("lastReportedPlayheadPosition",86,66,7f,37)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,songTime),HX_("songTime",82,2a,d5,3a)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PlayState_obj,keys),HX_("keys",f4,e1,06,47)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,closestNotes),HX_("closestNotes",28,4f,02,c1)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,songStarted),HX_("songStarted",ec,81,a7,ed)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,doAnything),HX_("doAnything",2d,8c,83,68)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,previousRate),HX_("previousRate",b7,22,46,f2)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,debugNum),HX_("debugNum",b3,39,d8,90)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,paused),HX_("paused",ae,40,84,ef)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedCountdown),HX_("startedCountdown",30,57,28,9b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,canPause),HX_("canPause",c6,18,eb,2b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,nps),HX_("nps",f1,d9,53,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,maxNPS),HX_("maxNPS",ad,a9,51,be)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,stopUpdate),HX_("stopUpdate",ab,d7,b4,b0)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,removedVideo),HX_("removedVideo",bb,c0,72,00)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentBPM),HX_("currentBPM",26,68,25,c7)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,updateFrame),HX_("updateFrame",64,e1,1b,ec)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,pastScrollChanges),HX_("pastScrollChanges",44,1c,82,6e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,currentLuaIndex),HX_("currentLuaIndex",93,2f,c9,10)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,endingSong),HX_("endingSong",5c,73,d7,67)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(PlayState_obj,hits),HX_("hits",c0,42,0e,45)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,offsetTest),HX_("offsetTest",85,51,11,49)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,timeShown),HX_("timeShown",84,5d,18,31)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,currentTimingShown),HX_("currentTimingShown",2e,56,ba,1d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,upHold),HX_("upHold",3a,25,8e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,downHold),HX_("downHold",c1,c6,fa,79)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,rightHold),HX_("rightHold",3b,1f,d9,af)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,leftHold),HX_("leftHold",e6,0c,0e,4c)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,fuckingVolume),HX_("fuckingVolume",c5,2f,0e,74)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,useVideo),HX_("useVideo",b4,76,67,fe)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,playingDathing),HX_("playingDathing",83,ed,1f,d5)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,videoSprite),HX_("videoSprite",e0,72,3d,3c)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashing),HX_("mashing",99,83,64,f9)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,mashViolations),HX_("mashViolations",77,15,e1,83)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,etternaModeScore),HX_("etternaModeScore",aa,02,79,42)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,fastCarCanDrive),HX_("fastCarCanDrive",d2,f1,13,ee)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainMoving),HX_("trainMoving",76,00,99,48)},
	{::hx::fsFloat,(int)offsetof(PlayState_obj,trainFrameTiming),HX_("trainFrameTiming",af,67,10,1b)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCars),HX_("trainCars",c7,61,9c,4d)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,trainFinishing),HX_("trainFinishing",87,15,8c,24)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,trainCooldown),HX_("trainCooldown",93,a3,58,0c)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,startedMoving),HX_("startedMoving",af,76,97,fb)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,danced),HX_("danced",d1,49,8f,1e)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningStrikeBeat),HX_("lightningStrikeBeat",72,e2,3d,b6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,lightningOffset),HX_("lightningOffset",3d,a8,e5,e6)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PlayState_obj,cleanedSong),HX_("cleanedSong",1d,82,51,e6)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,curLight),HX_("curLight",36,8b,aa,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo PlayState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::PlayState */ ,(void *) &PlayState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &PlayState_obj::SONG,HX_("SONG",d5,eb,18,37)},
	{::hx::fsBool,(void *) &PlayState_obj::isStoryMode,HX_("isStoryMode",ae,68,02,07)},
	{::hx::fsInt,(void *) &PlayState_obj::storyWeek,HX_("storyWeek",89,3e,16,2f)},
	{::hx::fsObject /* ::Array< ::String > */ ,(void *) &PlayState_obj::storyPlaylist,HX_("storyPlaylist",67,a1,89,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::storyDifficulty,HX_("storyDifficulty",90,ca,a7,d0)},
	{::hx::fsInt,(void *) &PlayState_obj::weekSong,HX_("weekSong",e9,b9,87,33)},
	{::hx::fsInt,(void *) &PlayState_obj::weekScore,HX_("weekScore",be,2e,4d,db)},
	{::hx::fsInt,(void *) &PlayState_obj::shits,HX_("shits",b3,f8,22,7c)},
	{::hx::fsInt,(void *) &PlayState_obj::bads,HX_("bads",0e,db,10,41)},
	{::hx::fsInt,(void *) &PlayState_obj::goods,HX_("goods",96,00,f9,97)},
	{::hx::fsInt,(void *) &PlayState_obj::sicks,HX_("sicks",f5,99,c7,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &PlayState_obj::songPosBG,HX_("songPosBG",44,6c,11,f6)},
	{::hx::fsObject /*  ::flixel::ui::FlxBar */ ,(void *) &PlayState_obj::songPosBar,HX_("songPosBar",54,66,2d,59)},
	{::hx::fsObject /*  ::Replay */ ,(void *) &PlayState_obj::rep,HX_("rep",5d,d9,56,00)},
	{::hx::fsBool,(void *) &PlayState_obj::loadRep,HX_("loadRep",d7,52,e1,08)},
	{::hx::fsBool,(void *) &PlayState_obj::inResults,HX_("inResults",91,9b,59,51)},
	{::hx::fsObject /* ::Array< bool > */ ,(void *) &PlayState_obj::noteBools,HX_("noteBools",b7,6b,85,f4)},
	{::hx::fsBool,(void *) &PlayState_obj::isSM,HX_("isSM",04,f3,be,45)},
	{::hx::fsObject /*  ::smTools::SMFile */ ,(void *) &PlayState_obj::sm,HX_("sm",9a,64,00,00)},
	{::hx::fsString,(void *) &PlayState_obj::pathToSm,HX_("pathToSm",3a,8b,a0,42)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::dad,HX_("dad",47,36,4c,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::gf,HX_("gf",1f,5a,00,00)},
	{::hx::fsObject /*  ::Character */ ,(void *) &PlayState_obj::gf2,HX_("gf2",33,81,4e,00)},
	{::hx::fsObject /*  ::Boyfriend */ ,(void *) &PlayState_obj::boyfriend,HX_("boyfriend",6a,29,b8,e6)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(void *) &PlayState_obj::prevCamFollow,HX_("prevCamFollow",6d,99,a3,09)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::strumLineNotes,HX_("strumLineNotes",24,f1,48,a4)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::playerStrums,HX_("playerStrums",4b,e1,2a,0d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(void *) &PlayState_obj::cpuStrums,HX_("cpuStrums",52,86,8a,e0)},
	{::hx::fsInt,(void *) &PlayState_obj::misses,HX_("misses",6a,62,54,56)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignMisses,HX_("campaignMisses",9a,a9,70,e4)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignSicks,HX_("campaignSicks",c5,48,c4,0b)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignGoods,HX_("campaignGoods",66,af,f5,26)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignBads,HX_("campaignBads",3e,f6,cb,d5)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignShits,HX_("campaignShits",83,a7,1f,0b)},
	{::hx::fsBool,(void *) &PlayState_obj::offsetTesting,HX_("offsetTesting",7d,bc,10,da)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(void *) &PlayState_obj::trainSound,HX_("trainSound",e7,b3,e5,da)},
	{::hx::fsInt,(void *) &PlayState_obj::campaignScore,HX_("campaignScore",22,22,d6,07)},
	{::hx::fsFloat,(void *) &PlayState_obj::daPixelZoom,HX_("daPixelZoom",7c,81,6e,df)},
	{::hx::fsBool,(void *) &PlayState_obj::theFunne,HX_("theFunne",05,d0,55,cd)},
	{::hx::fsObject /*  ::Stage */ ,(void *) &PlayState_obj::Stage,HX_("Stage",9e,da,38,17)},
	{::hx::fsInt,(void *) &PlayState_obj::repPresses,HX_("repPresses",d4,b6,b1,e7)},
	{::hx::fsInt,(void *) &PlayState_obj::repReleases,HX_("repReleases",49,43,a4,da)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrently,HX_("timeCurrently",39,e5,d2,31)},
	{::hx::fsFloat,(void *) &PlayState_obj::timeCurrentlyR,HX_("timeCurrentlyR",f9,ac,b5,66)},
	{::hx::fsInt,(void *) &PlayState_obj::curWindow,HX_("curWindow",90,ad,19,c3)},
	{::hx::fsInt,(void *) &PlayState_obj::lastWindow,HX_("lastWindow",e6,76,67,1d)},
	{::hx::fsFloat,(void *) &PlayState_obj::songOffset,HX_("songOffset",48,3d,c4,bb)},
	{::hx::fsInt,(void *) &PlayState_obj::highestCombo,HX_("highestCombo",8a,3b,03,1f)},
	{::hx::fsFloat,(void *) &PlayState_obj::startTime,HX_("startTime",8f,45,f0,05)},
	{::hx::fsObject /*  ::ModchartState */ ,(void *) &PlayState_obj::luaModchart,HX_("luaModchart",b4,54,b5,aa)},
	{::hx::fsFloat,(void *) &PlayState_obj::songMultiplier,HX_("songMultiplier",b6,0b,db,c3)},
	{::hx::fsFloat,(void *) &PlayState_obj::songRate,HX_("songRate",55,b1,7c,39)},
	{::hx::fsObject /*  ::WebmHandler */ ,(void *) &PlayState_obj::webmHandler,HX_("webmHandler",71,c7,d0,f2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("visibleCombos",77,ea,17,26),
	HX_("visibleNotes",6f,f6,4f,15),
	HX_("songLength",9b,3a,8c,fa),
	HX_("kadeEngineWatermark",ab,82,ba,66),
	HX_("storyDifficultyText",5d,4b,db,c2),
	HX_("iconRPC",ec,c8,10,d6),
	HX_("detailsText",8f,5e,84,21),
	HX_("detailsPausedText",dd,4f,70,44),
	HX_("vocals",5e,10,51,59),
	HX_("originalX",e7,92,45,ea),
	HX_("notes",41,dc,ca,9f),
	HX_("unspawnNotes",9f,67,f2,45),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSection",45,58,c1,68),
	HX_("camFollow",e0,6e,47,22),
	HX_("camZooming",60,3b,bf,d6),
	HX_("curSong",75,95,6d,b7),
	HX_("gfSpeed",e8,9c,20,98),
	HX_("health",9c,28,06,fd),
	HX_("combo",4e,28,5d,4a),
	HX_("accuracy",39,06,c5,ff),
	HX_("accuracyDefault",88,23,d8,06),
	HX_("totalNotesHit",76,f4,57,a6),
	HX_("totalNotesHitDefault",eb,26,a4,bd),
	HX_("totalPlayed",37,de,ee,fd),
	HX_("ss",a0,64,00,00),
	HX_("healthBarBG",1c,d8,3b,f4),
	HX_("healthBar",97,8a,92,42),
	HX_("songPositionBar",d5,62,6e,a6),
	HX_("generatedMusic",96,8a,5d,71),
	HX_("startingSong",b5,31,61,33),
	HX_("iconP1",9a,bd,d6,45),
	HX_("iconP2",9b,bd,d6,45),
	HX_("camHUD",e8,2b,76,b7),
	HX_("camSustains",9f,69,a2,15),
	HX_("camNotes",b2,c1,02,a8),
	HX_("camGame",a1,47,50,cf),
	HX_("cannotDie",fd,a9,4e,4f),
	HX_("isSMFile",a0,bf,e3,d7),
	HX_("notesHitArray",a7,0b,f3,bd),
	HX_("currentFrames",bf,30,e2,8f),
	HX_("idleToBeat",c5,ee,79,79),
	HX_("idleBeat",aa,ce,03,36),
	HX_("dialogue",18,2d,94,a7),
	HX_("songName",c0,d0,d7,36),
	HX_("currentSection",ac,7a,6c,6b),
	HX_("fc",3d,59,00,00),
	HX_("wiggleShit",0b,07,40,33),
	HX_("talking",36,57,a8,16),
	HX_("songScore",3d,bb,53,a8),
	HX_("songScoreDef",88,1a,f9,d0),
	HX_("scoreTxt",3e,12,c4,0e),
	HX_("replayTxt",89,f1,6f,0a),
	HX_("funneEffect",67,55,3f,6f),
	HX_("inCutscene",8f,21,01,56),
	HX_("usedTimeTravel",a4,7d,1d,70),
	HX_("randomVar",a4,58,4f,a7),
	HX_("triggeredAlready",c1,04,84,a5),
	HX_("allowedToHeadbang",bb,a8,e9,48),
	HX_("botPlayState",76,4c,39,74),
	HX_("saveNotes",c4,e3,77,2e),
	HX_("saveJudge",1a,b7,c8,e4),
	HX_("replayAna",ed,7d,61,0a),
	HX_("executeModchart",31,4a,80,b8),
	HX_("dataSuffix",9b,a8,47,88),
	HX_("dataColor",d9,f2,4b,90),
	HX_("stabcounter",7a,a7,ca,f5),
	HX_("missedStab",bd,3b,d9,f1),
	HX_("addObject",c0,b3,63,cd),
	HX_("removeObject",23,1a,6d,84),
	HX_("create",fc,66,0f,7c),
	HX_("cuzIntros",2f,24,c9,5b),
	HX_("schoolIntro",58,5d,50,47),
	HX_("startTimer",03,98,4c,2c),
	HX_("perfectMode",10,4f,4c,f3),
	HX_("luaWiggles",90,11,ce,e3),
	HX_("startCountdown",ef,1f,f0,88),
	HX_("previousFrameTime",a3,ef,a7,c2),
	HX_("lastReportedPlayheadPosition",86,66,7f,37),
	HX_("songTime",82,2a,d5,3a),
	HX_("getKey",a9,c2,20,a3),
	HX_("keys",f4,e1,06,47),
	HX_("releaseInput",c3,5c,40,85),
	HX_("closestNotes",28,4f,02,c1),
	HX_("handleInput",42,6f,67,70),
	HX_("songStarted",ec,81,a7,ed),
	HX_("doAnything",2d,8c,83,68),
	HX_("previousRate",b7,22,46,f2),
	HX_("startSong",57,9d,4b,05),
	HX_("debugNum",b3,39,d8,90),
	HX_("generateSong",aa,ed,2b,1f),
	HX_("sortByShit",35,ff,86,6e),
	HX_("generateStaticArrows",ad,44,90,42),
	HX_("appearStaticArrows",0d,4c,c7,a0),
	HX_("tweenCamIn",69,37,60,f8),
	HX_("openSubState",5b,66,48,37),
	HX_("closeSubState",49,18,32,04),
	HX_("resyncVocals",8c,16,ed,6a),
	HX_("paused",ae,40,84,ef),
	HX_("startedCountdown",30,57,28,9b),
	HX_("canPause",c6,18,eb,2b),
	HX_("nps",f1,d9,53,00),
	HX_("maxNPS",ad,a9,51,be),
	HX_("stopUpdate",ab,d7,b4,b0),
	HX_("removedVideo",bb,c0,72,00),
	HX_("currentBPM",26,68,25,c7),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("pastScrollChanges",44,1c,82,6e),
	HX_("currentLuaIndex",93,2f,c9,10),
	HX_("update",09,86,05,87),
	HX_("getSectionByTime",d3,a2,dd,1e),
	HX_("recalculateAllSectionTimes",4f,b8,31,bc),
	HX_("endSong",50,dd,7c,2e),
	HX_("endingSong",5c,73,d7,67),
	HX_("hits",c0,42,0e,45),
	HX_("offsetTest",85,51,11,49),
	HX_("getRatesScore",f5,78,f9,44),
	HX_("timeShown",84,5d,18,31),
	HX_("currentTimingShown",2e,56,ba,1d),
	HX_("popUpScore",66,a1,f2,3f),
	HX_("NearlyEquals",b4,8d,40,69),
	HX_("upHold",3a,25,8e,74),
	HX_("downHold",c1,c6,fa,79),
	HX_("rightHold",3b,1f,d9,af),
	HX_("leftHold",e6,0c,0e,4c),
	HX_("keyShit",ff,40,2c,a6),
	HX_("findByTime",9d,3a,9f,3b),
	HX_("findByTimeIndex",35,37,38,0e),
	HX_("fuckingVolume",c5,2f,0e,74),
	HX_("useVideo",b4,76,67,fe),
	HX_("playingDathing",83,ed,1f,d5),
	HX_("videoSprite",e0,72,3d,3c),
	HX_("focusOut",96,6f,5e,11),
	HX_("focusIn",dd,45,83,41),
	HX_("backgroundVideo",ad,f1,e6,f9),
	HX_("noteMiss",0e,78,8f,57),
	HX_("updateAccuracy",62,f9,ee,34),
	HX_("getKeyPresses",08,cf,e0,04),
	HX_("mashing",99,83,64,f9),
	HX_("mashViolations",77,15,e1,83),
	HX_("etternaModeScore",aa,02,79,42),
	HX_("noteCheck",76,e3,43,83),
	HX_("goodNoteHit",c4,4d,c4,22),
	HX_("pressArrow",46,fb,e7,02),
	HX_("fastCarCanDrive",d2,f1,13,ee),
	HX_("resetFastCar",c9,38,fe,4f),
	HX_("fastCarDrive",12,97,d2,be),
	HX_("trainMoving",76,00,99,48),
	HX_("trainFrameTiming",af,67,10,1b),
	HX_("trainCars",c7,61,9c,4d),
	HX_("trainFinishing",87,15,8c,24),
	HX_("trainCooldown",93,a3,58,0c),
	HX_("trainStart",7a,9b,24,de),
	HX_("startedMoving",af,76,97,fb),
	HX_("updateTrainPos",d5,01,38,2b),
	HX_("trainReset",e7,70,e1,40),
	HX_("lightningStrikeShit",bc,d0,7c,c1),
	HX_("danced",d1,49,8f,1e),
	HX_("stepHit",67,ae,41,81),
	HX_("lightningStrikeBeat",72,e2,3d,b6),
	HX_("lightningOffset",3d,a8,e5,e6),
	HX_("beatHit",7d,ea,04,74),
	HX_("cleanedSong",1d,82,51,e6),
	HX_("poggers",e7,c2,a8,25),
	HX_("curLight",36,8b,aa,bc),
	::String(null()) };

static void PlayState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_MARK_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_MARK_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_MARK_MEMBER_NAME(PlayState_obj::weekScore,"weekScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_MARK_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_MARK_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_MARK_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_MARK_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_MARK_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_MARK_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_MARK_MEMBER_NAME(PlayState_obj::inResults,"inResults");
	HX_MARK_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_MARK_MEMBER_NAME(PlayState_obj::isSM,"isSM");
	HX_MARK_MEMBER_NAME(PlayState_obj::sm,"sm");
	HX_MARK_MEMBER_NAME(PlayState_obj::pathToSm,"pathToSm");
	HX_MARK_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_MARK_MEMBER_NAME(PlayState_obj::gf2,"gf2");
	HX_MARK_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_MARK_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_MARK_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_MARK_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_MARK_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignSicks,"campaignSicks");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignGoods,"campaignGoods");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignBads,"campaignBads");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignShits,"campaignShits");
	HX_MARK_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_MARK_MEMBER_NAME(PlayState_obj::trainSound,"trainSound");
	HX_MARK_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_MARK_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_MARK_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_MARK_MEMBER_NAME(PlayState_obj::Stage,"Stage");
	HX_MARK_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_MARK_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_MARK_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_MARK_MEMBER_NAME(PlayState_obj::curWindow,"curWindow");
	HX_MARK_MEMBER_NAME(PlayState_obj::lastWindow,"lastWindow");
	HX_MARK_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_MARK_MEMBER_NAME(PlayState_obj::highestCombo,"highestCombo");
	HX_MARK_MEMBER_NAME(PlayState_obj::startTime,"startTime");
	HX_MARK_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_MARK_MEMBER_NAME(PlayState_obj::songMultiplier,"songMultiplier");
	HX_MARK_MEMBER_NAME(PlayState_obj::songRate,"songRate");
	HX_MARK_MEMBER_NAME(PlayState_obj::webmHandler,"webmHandler");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PlayState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PlayState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(PlayState_obj::SONG,"SONG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isStoryMode,"isStoryMode");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyWeek,"storyWeek");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyPlaylist,"storyPlaylist");
	HX_VISIT_MEMBER_NAME(PlayState_obj::storyDifficulty,"storyDifficulty");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekSong,"weekSong");
	HX_VISIT_MEMBER_NAME(PlayState_obj::weekScore,"weekScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::shits,"shits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::bads,"bads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::goods,"goods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sicks,"sicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBG,"songPosBG");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songPosBar,"songPosBar");
	HX_VISIT_MEMBER_NAME(PlayState_obj::rep,"rep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::loadRep,"loadRep");
	HX_VISIT_MEMBER_NAME(PlayState_obj::inResults,"inResults");
	HX_VISIT_MEMBER_NAME(PlayState_obj::noteBools,"noteBools");
	HX_VISIT_MEMBER_NAME(PlayState_obj::isSM,"isSM");
	HX_VISIT_MEMBER_NAME(PlayState_obj::sm,"sm");
	HX_VISIT_MEMBER_NAME(PlayState_obj::pathToSm,"pathToSm");
	HX_VISIT_MEMBER_NAME(PlayState_obj::dad,"dad");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf,"gf");
	HX_VISIT_MEMBER_NAME(PlayState_obj::gf2,"gf2");
	HX_VISIT_MEMBER_NAME(PlayState_obj::boyfriend,"boyfriend");
	HX_VISIT_MEMBER_NAME(PlayState_obj::prevCamFollow,"prevCamFollow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::strumLineNotes,"strumLineNotes");
	HX_VISIT_MEMBER_NAME(PlayState_obj::playerStrums,"playerStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::cpuStrums,"cpuStrums");
	HX_VISIT_MEMBER_NAME(PlayState_obj::misses,"misses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignMisses,"campaignMisses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignSicks,"campaignSicks");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignGoods,"campaignGoods");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignBads,"campaignBads");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignShits,"campaignShits");
	HX_VISIT_MEMBER_NAME(PlayState_obj::offsetTesting,"offsetTesting");
	HX_VISIT_MEMBER_NAME(PlayState_obj::trainSound,"trainSound");
	HX_VISIT_MEMBER_NAME(PlayState_obj::campaignScore,"campaignScore");
	HX_VISIT_MEMBER_NAME(PlayState_obj::daPixelZoom,"daPixelZoom");
	HX_VISIT_MEMBER_NAME(PlayState_obj::theFunne,"theFunne");
	HX_VISIT_MEMBER_NAME(PlayState_obj::Stage,"Stage");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repPresses,"repPresses");
	HX_VISIT_MEMBER_NAME(PlayState_obj::repReleases,"repReleases");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrently,"timeCurrently");
	HX_VISIT_MEMBER_NAME(PlayState_obj::timeCurrentlyR,"timeCurrentlyR");
	HX_VISIT_MEMBER_NAME(PlayState_obj::curWindow,"curWindow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::lastWindow,"lastWindow");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songOffset,"songOffset");
	HX_VISIT_MEMBER_NAME(PlayState_obj::highestCombo,"highestCombo");
	HX_VISIT_MEMBER_NAME(PlayState_obj::startTime,"startTime");
	HX_VISIT_MEMBER_NAME(PlayState_obj::luaModchart,"luaModchart");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songMultiplier,"songMultiplier");
	HX_VISIT_MEMBER_NAME(PlayState_obj::songRate,"songRate");
	HX_VISIT_MEMBER_NAME(PlayState_obj::webmHandler,"webmHandler");
};

#endif

::hx::Class PlayState_obj::__mClass;

static ::String PlayState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("SONG",d5,eb,18,37),
	HX_("isStoryMode",ae,68,02,07),
	HX_("storyWeek",89,3e,16,2f),
	HX_("storyPlaylist",67,a1,89,7c),
	HX_("storyDifficulty",90,ca,a7,d0),
	HX_("weekSong",e9,b9,87,33),
	HX_("weekScore",be,2e,4d,db),
	HX_("shits",b3,f8,22,7c),
	HX_("bads",0e,db,10,41),
	HX_("goods",96,00,f9,97),
	HX_("sicks",f5,99,c7,7c),
	HX_("songPosBG",44,6c,11,f6),
	HX_("songPosBar",54,66,2d,59),
	HX_("rep",5d,d9,56,00),
	HX_("loadRep",d7,52,e1,08),
	HX_("inResults",91,9b,59,51),
	HX_("noteBools",b7,6b,85,f4),
	HX_("isSM",04,f3,be,45),
	HX_("sm",9a,64,00,00),
	HX_("pathToSm",3a,8b,a0,42),
	HX_("dad",47,36,4c,00),
	HX_("gf",1f,5a,00,00),
	HX_("gf2",33,81,4e,00),
	HX_("boyfriend",6a,29,b8,e6),
	HX_("prevCamFollow",6d,99,a3,09),
	HX_("strumLineNotes",24,f1,48,a4),
	HX_("playerStrums",4b,e1,2a,0d),
	HX_("cpuStrums",52,86,8a,e0),
	HX_("misses",6a,62,54,56),
	HX_("campaignMisses",9a,a9,70,e4),
	HX_("campaignSicks",c5,48,c4,0b),
	HX_("campaignGoods",66,af,f5,26),
	HX_("campaignBads",3e,f6,cb,d5),
	HX_("campaignShits",83,a7,1f,0b),
	HX_("offsetTesting",7d,bc,10,da),
	HX_("trainSound",e7,b3,e5,da),
	HX_("campaignScore",22,22,d6,07),
	HX_("daPixelZoom",7c,81,6e,df),
	HX_("theFunne",05,d0,55,cd),
	HX_("Stage",9e,da,38,17),
	HX_("repPresses",d4,b6,b1,e7),
	HX_("repReleases",49,43,a4,da),
	HX_("timeCurrently",39,e5,d2,31),
	HX_("timeCurrentlyR",f9,ac,b5,66),
	HX_("curWindow",90,ad,19,c3),
	HX_("lastWindow",e6,76,67,1d),
	HX_("songOffset",48,3d,c4,bb),
	HX_("highestCombo",8a,3b,03,1f),
	HX_("startTime",8f,45,f0,05),
	HX_("luaModchart",b4,54,b5,aa),
	HX_("songMultiplier",b6,0b,db,c3),
	HX_("songRate",55,b1,7c,39),
	HX_("webmHandler",71,c7,d0,f2),
	::String(null())
};

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PlayState_obj::__GetStatic;
	__mClass->mSetStaticField = &PlayState_obj::__SetStatic;
	__mClass->mMarkFunc = PlayState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(PlayState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PlayState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PlayState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_89_boot)
HXDLIN(  89)		instance = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_92_boot)
HXDLIN(  92)		isStoryMode = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_93_boot)
HXDLIN(  93)		storyWeek = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_94_boot)
HXDLIN(  94)		storyPlaylist = ::Array_obj< ::String >::__new(0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_95_boot)
HXDLIN(  95)		storyDifficulty = 1;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_96_boot)
HXDLIN(  96)		weekSong = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_97_boot)
HXDLIN(  97)		weekScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_98_boot)
HXDLIN(  98)		shits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_99_boot)
HXDLIN(  99)		bads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_100_boot)
HXDLIN( 100)		goods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_101_boot)
HXDLIN( 101)		sicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_112_boot)
HXDLIN( 112)		loadRep = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_113_boot)
HXDLIN( 113)		inResults = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_115_boot)
HXDLIN( 115)		noteBools = ::Array_obj< bool >::fromData( _hx_array_data_46c2835d_214,4);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_130_boot)
HXDLIN( 130)		isSM = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_155_boot)
HXDLIN( 155)		strumLineNotes = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_156_boot)
HXDLIN( 156)		playerStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_157_boot)
HXDLIN( 157)		cpuStrums = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_168_boot)
HXDLIN( 168)		misses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_169_boot)
HXDLIN( 169)		campaignMisses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_170_boot)
HXDLIN( 170)		campaignSicks = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_171_boot)
HXDLIN( 171)		campaignGoods = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_172_boot)
HXDLIN( 172)		campaignBads = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_173_boot)
HXDLIN( 173)		campaignShits = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_199_boot)
HXDLIN( 199)		offsetTesting = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_228_boot)
HXDLIN( 228)		campaignScore = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_230_boot)
HXDLIN( 230)		daPixelZoom = ((Float)6);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_232_boot)
HXDLIN( 232)		theFunne = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_242_boot)
HXDLIN( 242)		repPresses = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_243_boot)
HXDLIN( 243)		repReleases = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_245_boot)
HXDLIN( 245)		timeCurrently = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_246_boot)
HXDLIN( 246)		timeCurrentlyR = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_249_boot)
HXDLIN( 249)		curWindow = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_250_boot)
HXDLIN( 250)		lastWindow = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_259_boot)
HXDLIN( 259)		songOffset = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_268_boot)
HXDLIN( 268)		highestCombo = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_280_boot)
HXDLIN( 280)		startTime = ((Float)0.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1241_boot)
HXDLIN(1241)		luaModchart = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_1534_boot)
HXDLIN(1534)		songMultiplier = ((Float)1.0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_2122_boot)
HXDLIN(2122)		songRate = ((Float)1.5);
            	}
}

